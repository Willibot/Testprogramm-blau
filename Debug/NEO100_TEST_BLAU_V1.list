
NEO100_TEST_BLAU_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003148  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08003204  08003204  00004204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003380  08003380  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003380  08003380  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003380  08003380  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003380  08003380  00004380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003384  08003384  00004384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003388  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003394  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003394  000050e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009135  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b19  00000000  00000000  0000e169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0000fc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006dc  00000000  00000000  00010580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155f3  00000000  00000000  00010c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9ef  00000000  00000000  0002624f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000892d2  00000000  00000000  00033c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcf10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec4  00000000  00000000  000bcf54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000bee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080031ec 	.word	0x080031ec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080031ec 	.word	0x080031ec

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000222:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <MX_DMA_Init+0x44>)
 8000224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000226:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <MX_DMA_Init+0x44>)
 8000228:	2101      	movs	r1, #1
 800022a:	430a      	orrs	r2, r1
 800022c:	639a      	str	r2, [r3, #56]	@ 0x38
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <MX_DMA_Init+0x44>)
 8000230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000232:	2201      	movs	r2, #1
 8000234:	4013      	ands	r3, r2
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	2100      	movs	r1, #0
 800023e:	2009      	movs	r0, #9
 8000240:	f000 faae 	bl	80007a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000244:	2009      	movs	r0, #9
 8000246:	f000 facb 	bl	80007e0 <HAL_NVIC_EnableIRQ>

  // Korrekte Verknüpfung für STM32G0:
  __HAL_LINKDMA(&htim3, hdma[TIM_DMA_ID_CC2], hdma_tim3_ch2);
 800024a:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <MX_DMA_Init+0x48>)
 800024c:	4a06      	ldr	r2, [pc, #24]	@ (8000268 <MX_DMA_Init+0x4c>)
 800024e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <MX_DMA_Init+0x4c>)
 8000252:	4a04      	ldr	r2, [pc, #16]	@ (8000264 <MX_DMA_Init+0x48>)
 8000254:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	b002      	add	sp, #8
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)
 8000260:	40021000 	.word	0x40021000
 8000264:	20000030 	.word	0x20000030
 8000268:	2000007c 	.word	0x2000007c

0800026c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b08      	ldr	r3, [pc, #32]	@ (8000294 <MX_GPIO_Init+0x28>)
 8000274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000276:	4b07      	ldr	r3, [pc, #28]	@ (8000294 <MX_GPIO_Init+0x28>)
 8000278:	2101      	movs	r1, #1
 800027a:	430a      	orrs	r2, r1
 800027c:	635a      	str	r2, [r3, #52]	@ 0x34
 800027e:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <MX_GPIO_Init+0x28>)
 8000280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000282:	2201      	movs	r2, #1
 8000284:	4013      	ands	r3, r2
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

}
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	b002      	add	sp, #8
 8000290:	bd80      	pop	{r7, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)
 8000294:	40021000 	.word	0x40021000

08000298 <SystemClock_Config>:
const RGB COLOR_OFF  = {0, 0, 0};

volatile uint32_t systick_ms = 0;

void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b093      	sub	sp, #76	@ 0x4c
 800029c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	2410      	movs	r4, #16
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	2338      	movs	r3, #56	@ 0x38
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f002 ff73 	bl	8003194 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	003b      	movs	r3, r7
 80002b0:	0018      	movs	r0, r3
 80002b2:	2310      	movs	r3, #16
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f002 ff6c 	bl	8003194 <memset>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2202      	movs	r2, #2
 80002c0:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	2280      	movs	r2, #128	@ 0x80
 80002c6:	0052      	lsls	r2, r2, #1
 80002c8:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	0021      	movs	r1, r4
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2240      	movs	r2, #64	@ 0x40
 80002d0:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2202      	movs	r2, #2
 80002d6:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2202      	movs	r2, #2
 80002dc:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	625a      	str	r2, [r3, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLN = 8;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2208      	movs	r2, #8
 80002e8:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2280      	movs	r2, #128	@ 0x80
 80002ee:	0592      	lsls	r2, r2, #22
 80002f0:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fbb1 	bl	8000a5c <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	003b      	movs	r3, r7
 80002fc:	2207      	movs	r2, #7
 80002fe:	601a      	str	r2, [r3, #0]
                             |RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000300:	003b      	movs	r3, r7
 8000302:	2202      	movs	r2, #2
 8000304:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	003b      	movs	r3, r7
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030c:	003b      	movs	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8000312:	003b      	movs	r3, r7
 8000314:	2102      	movs	r1, #2
 8000316:	0018      	movs	r0, r3
 8000318:	f001 f80e 	bl	8001338 <HAL_RCC_ClockConfig>
}
 800031c:	46c0      	nop			@ (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b013      	add	sp, #76	@ 0x4c
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <main>:

int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    HAL_Init();
 8000328:	f000 f908 	bl	800053c <HAL_Init>
    SystemClock_Config();
 800032c:	f7ff ffb4 	bl	8000298 <SystemClock_Config>

    MX_GPIO_Init();
 8000330:	f7ff ff9c 	bl	800026c <MX_GPIO_Init>
    MX_DMA_Init();
 8000334:	f7ff ff72 	bl	800021c <MX_DMA_Init>
    MX_TIM3_Init();
 8000338:	f000 f882 	bl	8000440 <MX_TIM3_Init>

    // PWM-Test: PA7 sollte jetzt ein Rechtecksignal zeigen!
    if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK) {
 800033c:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <main+0x48>)
 800033e:	2104      	movs	r1, #4
 8000340:	0018      	movs	r0, r3
 8000342:	f001 fc1d 	bl	8001b80 <HAL_TIM_PWM_Start>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d009      	beq.n	800035e <main+0x3a>
        // Fehler: z.B. PA11 auf HIGH setzen
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800034a:	2380      	movs	r3, #128	@ 0x80
 800034c:	0119      	lsls	r1, r3, #4
 800034e:	23a0      	movs	r3, #160	@ 0xa0
 8000350:	05db      	lsls	r3, r3, #23
 8000352:	2201      	movs	r2, #1
 8000354:	0018      	movs	r0, r3
 8000356:	f000 fb1f 	bl	8000998 <HAL_GPIO_WritePin>
        while(1);
 800035a:	46c0      	nop			@ (mov r8, r8)
 800035c:	e7fd      	b.n	800035a <main+0x36>
    }
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 40);
 800035e:	4b03      	ldr	r3, [pc, #12]	@ (800036c <main+0x48>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2228      	movs	r2, #40	@ 0x28
 8000364:	639a      	str	r2, [r3, #56]	@ 0x38

    while (1)
 8000366:	46c0      	nop			@ (mov r8, r8)
 8000368:	e7fd      	b.n	8000366 <main+0x42>
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	20000030 	.word	0x20000030

08000370 <assert_failed>:
        // leer lassen
    }
}

void assert_failed(uint8_t *file, uint32_t line)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
    while(1);
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	e7fd      	b.n	800037a <assert_failed+0xa>
	...

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <HAL_MspInit+0x44>)
 8000388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <HAL_MspInit+0x44>)
 800038c:	2101      	movs	r1, #1
 800038e:	430a      	orrs	r2, r1
 8000390:	641a      	str	r2, [r3, #64]	@ 0x40
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <HAL_MspInit+0x44>)
 8000394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000396:	2201      	movs	r2, #1
 8000398:	4013      	ands	r3, r2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <HAL_MspInit+0x44>)
 80003a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003a2:	4b08      	ldr	r3, [pc, #32]	@ (80003c4 <HAL_MspInit+0x44>)
 80003a4:	2180      	movs	r1, #128	@ 0x80
 80003a6:	0549      	lsls	r1, r1, #21
 80003a8:	430a      	orrs	r2, r1
 80003aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80003ac:	4b05      	ldr	r3, [pc, #20]	@ (80003c4 <HAL_MspInit+0x44>)
 80003ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003b0:	2380      	movs	r3, #128	@ 0x80
 80003b2:	055b      	lsls	r3, r3, #21
 80003b4:	4013      	ands	r3, r2
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	46c0      	nop			@ (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b002      	add	sp, #8
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	46c0      	nop			@ (mov r8, r8)
 80003c4:	40021000 	.word	0x40021000

080003c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80003cc:	f000 f920 	bl	8000610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 0 */
  systick_ms++;
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SysTick_Handler+0x44>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	1c5a      	adds	r2, r3, #1
 80003d6:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <SysTick_Handler+0x44>)
 80003d8:	601a      	str	r2, [r3, #0]
  static uint8_t tick = 0;
  if (++tick >= 2) { // 2 ms bei 1 kHz SysTick, ergibt 500 Hz
 80003da:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <SysTick_Handler+0x48>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <SysTick_Handler+0x48>)
 80003e4:	701a      	strb	r2, [r3, #0]
 80003e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <SysTick_Handler+0x48>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d90a      	bls.n	8000404 <SysTick_Handler+0x3c>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80003ee:	2380      	movs	r3, #128	@ 0x80
 80003f0:	005a      	lsls	r2, r3, #1
 80003f2:	23a0      	movs	r3, #160	@ 0xa0
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	0011      	movs	r1, r2
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 fb07 	bl	8000a0c <HAL_GPIO_TogglePin>
      tick = 0;
 80003fe:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <SysTick_Handler+0x48>)
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8000404:	46c0      	nop			@ (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	20000028 	.word	0x20000028
 8000410:	2000002c 	.word	0x2000002c

08000414 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000418:	4b04      	ldr	r3, [pc, #16]	@ (800042c <DMA1_Channel1_IRQHandler+0x18>)
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fa0a 	bl	8000834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  ws2812_dma_done = 1;
 8000420:	4b03      	ldr	r3, [pc, #12]	@ (8000430 <DMA1_Channel1_IRQHandler+0x1c>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000007c 	.word	0x2000007c
 8000430:	200000d8 	.word	0x200000d8

08000434 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
	...

08000440 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch2;

void MX_TIM3_Init(void)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b08d      	sub	sp, #52	@ 0x34
 8000444:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000446:	2420      	movs	r4, #32
 8000448:	193b      	adds	r3, r7, r4
 800044a:	0018      	movs	r0, r3
 800044c:	2310      	movs	r3, #16
 800044e:	001a      	movs	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	f002 fe9f 	bl	8003194 <memset>
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	0018      	movs	r0, r3
 800045a:	231c      	movs	r3, #28
 800045c:	001a      	movs	r2, r3
 800045e:	2100      	movs	r1, #0
 8000460:	f002 fe98 	bl	8003194 <memset>

    htim3.Instance = TIM3;
 8000464:	4b1e      	ldr	r3, [pc, #120]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 8000466:	4a1f      	ldr	r2, [pc, #124]	@ (80004e4 <MX_TIM3_Init+0xa4>)
 8000468:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 800046a:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 79; // 64MHz/800kHz = 80 (Period-1)
 8000476:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 8000478:	224f      	movs	r2, #79	@ 0x4f
 800047a:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047c:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000482:	4b17      	ldr	r3, [pc, #92]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim3);
 8000488:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 800048a:	0018      	movs	r0, r3
 800048c:	f001 f97e 	bl	800178c <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2280      	movs	r2, #128	@ 0x80
 8000494:	0152      	lsls	r2, r2, #5
 8000496:	601a      	str	r2, [r3, #0]
    HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8000498:	193a      	adds	r2, r7, r4
 800049a:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 800049c:	0011      	movs	r1, r2
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 fea8 	bl	80021f4 <HAL_TIM_ConfigClockSource>

    HAL_TIM_PWM_Init(&htim3);
 80004a4:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 fa6c 	bl	8001984 <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2260      	movs	r2, #96	@ 0x60
 80004b0:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 0;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 80004c4:	1d39      	adds	r1, r7, #4
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fc94 	bl	8001df8 <HAL_TIM_PWM_ConfigChannel>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 40); // 50% Dutycycle bei Period=79
 80004d0:	4b03      	ldr	r3, [pc, #12]	@ (80004e0 <MX_TIM3_Init+0xa0>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2228      	movs	r2, #40	@ 0x28
 80004d6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80004d8:	46c0      	nop			@ (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b00d      	add	sp, #52	@ 0x34
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	20000030 	.word	0x20000030
 80004e4:	40000400 	.word	0x40000400

080004e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e8:	480d      	ldr	r0, [pc, #52]	@ (8000520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ec:	f7ff ffa2 	bl	8000434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	@ (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	@ (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	@ (8000534 <LoopForever+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000516:	f002 fe45 	bl	80031a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800051a:	f7ff ff03 	bl	8000324 <main>

0800051e <LoopForever>:

LoopForever:
  b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   r0, =_estack
 8000520:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800052c:	08003388 	.word	0x08003388
  ldr r2, =_sbss
 8000530:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000534:	200000e0 	.word	0x200000e0

08000538 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_IRQHandler>
	...

0800053c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000548:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <HAL_Init+0x3c>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <HAL_Init+0x3c>)
 800054e:	2180      	movs	r1, #128	@ 0x80
 8000550:	0049      	lsls	r1, r1, #1
 8000552:	430a      	orrs	r2, r1
 8000554:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000556:	2003      	movs	r0, #3
 8000558:	f000 f810 	bl	800057c <HAL_InitTick>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d003      	beq.n	8000568 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	e001      	b.n	800056c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000568:	f7ff ff0a 	bl	8000380 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781b      	ldrb	r3, [r3, #0]
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	b002      	add	sp, #8
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40022000 	.word	0x40022000

0800057c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000584:	230f      	movs	r3, #15
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800058c:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <HAL_InitTick+0x88>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d02b      	beq.n	80005ec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000594:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <HAL_InitTick+0x8c>)
 8000596:	681c      	ldr	r4, [r3, #0]
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <HAL_InitTick+0x88>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	0019      	movs	r1, r3
 800059e:	23fa      	movs	r3, #250	@ 0xfa
 80005a0:	0098      	lsls	r0, r3, #2
 80005a2:	f7ff fdaf 	bl	8000104 <__udivsi3>
 80005a6:	0003      	movs	r3, r0
 80005a8:	0019      	movs	r1, r3
 80005aa:	0020      	movs	r0, r4
 80005ac:	f7ff fdaa 	bl	8000104 <__udivsi3>
 80005b0:	0003      	movs	r3, r0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 f930 	bl	8000818 <HAL_SYSTICK_Config>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d112      	bne.n	80005e2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d80a      	bhi.n	80005d8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	2301      	movs	r3, #1
 80005c6:	425b      	negs	r3, r3
 80005c8:	2200      	movs	r2, #0
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 f8e8 	bl	80007a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <HAL_InitTick+0x90>)
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	e00d      	b.n	80005f4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80005d8:	230f      	movs	r3, #15
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
 80005e0:	e008      	b.n	80005f4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005e2:	230f      	movs	r3, #15
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	e003      	b.n	80005f4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005ec:	230f      	movs	r3, #15
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80005f4:	230f      	movs	r3, #15
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	781b      	ldrb	r3, [r3, #0]
}
 80005fa:	0018      	movs	r0, r3
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b005      	add	sp, #20
 8000600:	bd90      	pop	{r4, r7, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	20000008 	.word	0x20000008
 8000608:	20000000 	.word	0x20000000
 800060c:	20000004 	.word	0x20000004

08000610 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000614:	4b05      	ldr	r3, [pc, #20]	@ (800062c <HAL_IncTick+0x1c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	001a      	movs	r2, r3
 800061a:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <HAL_IncTick+0x20>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	18d2      	adds	r2, r2, r3
 8000620:	4b03      	ldr	r3, [pc, #12]	@ (8000630 <HAL_IncTick+0x20>)
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	20000008 	.word	0x20000008
 8000630:	200000dc 	.word	0x200000dc

08000634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  return uwTick;
 8000638:	4b02      	ldr	r3, [pc, #8]	@ (8000644 <HAL_GetTick+0x10>)
 800063a:	681b      	ldr	r3, [r3, #0]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	200000dc 	.word	0x200000dc

08000648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	0002      	movs	r2, r0
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000654:	1dfb      	adds	r3, r7, #7
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b7f      	cmp	r3, #127	@ 0x7f
 800065a:	d809      	bhi.n	8000670 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	001a      	movs	r2, r3
 8000662:	231f      	movs	r3, #31
 8000664:	401a      	ands	r2, r3
 8000666:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <__NVIC_EnableIRQ+0x30>)
 8000668:	2101      	movs	r1, #1
 800066a:	4091      	lsls	r1, r2
 800066c:	000a      	movs	r2, r1
 800066e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b002      	add	sp, #8
 8000676:	bd80      	pop	{r7, pc}
 8000678:	e000e100 	.word	0xe000e100

0800067c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	0002      	movs	r2, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000690:	d828      	bhi.n	80006e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000692:	4a2f      	ldr	r2, [pc, #188]	@ (8000750 <__NVIC_SetPriority+0xd4>)
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b25b      	sxtb	r3, r3
 800069a:	089b      	lsrs	r3, r3, #2
 800069c:	33c0      	adds	r3, #192	@ 0xc0
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	589b      	ldr	r3, [r3, r2]
 80006a2:	1dfa      	adds	r2, r7, #7
 80006a4:	7812      	ldrb	r2, [r2, #0]
 80006a6:	0011      	movs	r1, r2
 80006a8:	2203      	movs	r2, #3
 80006aa:	400a      	ands	r2, r1
 80006ac:	00d2      	lsls	r2, r2, #3
 80006ae:	21ff      	movs	r1, #255	@ 0xff
 80006b0:	4091      	lsls	r1, r2
 80006b2:	000a      	movs	r2, r1
 80006b4:	43d2      	mvns	r2, r2
 80006b6:	401a      	ands	r2, r3
 80006b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	019b      	lsls	r3, r3, #6
 80006be:	22ff      	movs	r2, #255	@ 0xff
 80006c0:	401a      	ands	r2, r3
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	0018      	movs	r0, r3
 80006c8:	2303      	movs	r3, #3
 80006ca:	4003      	ands	r3, r0
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d0:	481f      	ldr	r0, [pc, #124]	@ (8000750 <__NVIC_SetPriority+0xd4>)
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	089b      	lsrs	r3, r3, #2
 80006da:	430a      	orrs	r2, r1
 80006dc:	33c0      	adds	r3, #192	@ 0xc0
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006e2:	e031      	b.n	8000748 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000754 <__NVIC_SetPriority+0xd8>)
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	0019      	movs	r1, r3
 80006ec:	230f      	movs	r3, #15
 80006ee:	400b      	ands	r3, r1
 80006f0:	3b08      	subs	r3, #8
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	3306      	adds	r3, #6
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	18d3      	adds	r3, r2, r3
 80006fa:	3304      	adds	r3, #4
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	1dfa      	adds	r2, r7, #7
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	0011      	movs	r1, r2
 8000704:	2203      	movs	r2, #3
 8000706:	400a      	ands	r2, r1
 8000708:	00d2      	lsls	r2, r2, #3
 800070a:	21ff      	movs	r1, #255	@ 0xff
 800070c:	4091      	lsls	r1, r2
 800070e:	000a      	movs	r2, r1
 8000710:	43d2      	mvns	r2, r2
 8000712:	401a      	ands	r2, r3
 8000714:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	22ff      	movs	r2, #255	@ 0xff
 800071c:	401a      	ands	r2, r3
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	0018      	movs	r0, r3
 8000724:	2303      	movs	r3, #3
 8000726:	4003      	ands	r3, r0
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <__NVIC_SetPriority+0xd8>)
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	001c      	movs	r4, r3
 8000734:	230f      	movs	r3, #15
 8000736:	4023      	ands	r3, r4
 8000738:	3b08      	subs	r3, #8
 800073a:	089b      	lsrs	r3, r3, #2
 800073c:	430a      	orrs	r2, r1
 800073e:	3306      	adds	r3, #6
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	18c3      	adds	r3, r0, r3
 8000744:	3304      	adds	r3, #4
 8000746:	601a      	str	r2, [r3, #0]
}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b003      	add	sp, #12
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	2380      	movs	r3, #128	@ 0x80
 8000766:	045b      	lsls	r3, r3, #17
 8000768:	429a      	cmp	r2, r3
 800076a:	d301      	bcc.n	8000770 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076c:	2301      	movs	r3, #1
 800076e:	e010      	b.n	8000792 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000770:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <SysTick_Config+0x44>)
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	3a01      	subs	r2, #1
 8000776:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000778:	2301      	movs	r3, #1
 800077a:	425b      	negs	r3, r3
 800077c:	2103      	movs	r1, #3
 800077e:	0018      	movs	r0, r3
 8000780:	f7ff ff7c 	bl	800067c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <SysTick_Config+0x44>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	@ (800079c <SysTick_Config+0x44>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	230f      	movs	r3, #15
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	1c02      	adds	r2, r0, #0
 80007b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d904      	bls.n	80007c2 <HAL_NVIC_SetPriority+0x22>
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <HAL_NVIC_SetPriority+0x3c>)
 80007ba:	2189      	movs	r1, #137	@ 0x89
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fdd7 	bl	8000370 <assert_failed>
  NVIC_SetPriority(IRQn, PreemptPriority);
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	230f      	movs	r3, #15
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff ff54 	bl	800067c <__NVIC_SetPriority>
}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b004      	add	sp, #16
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	08003204 	.word	0x08003204

080007e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	0002      	movs	r2, r0
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80007f2:	d904      	bls.n	80007fe <HAL_NVIC_EnableIRQ+0x1e>
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <HAL_NVIC_EnableIRQ+0x34>)
 80007f6:	2197      	movs	r1, #151	@ 0x97
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fdb9 	bl	8000370 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b25b      	sxtb	r3, r3
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ff1f 	bl	8000648 <__NVIC_EnableIRQ>
}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b002      	add	sp, #8
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	08003204 	.word	0x08003204

08000818 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff ff98 	bl	8000758 <SysTick_Config>
 8000828:	0003      	movs	r3, r0
}
 800082a:	0018      	movs	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800083c:	4b55      	ldr	r3, [pc, #340]	@ (8000994 <HAL_DMA_IRQHandler+0x160>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	221c      	movs	r2, #28
 8000850:	4013      	ands	r3, r2
 8000852:	2204      	movs	r2, #4
 8000854:	409a      	lsls	r2, r3
 8000856:	0013      	movs	r3, r2
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	4013      	ands	r3, r2
 800085c:	d027      	beq.n	80008ae <HAL_DMA_IRQHandler+0x7a>
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	2204      	movs	r2, #4
 8000862:	4013      	ands	r3, r2
 8000864:	d023      	beq.n	80008ae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2220      	movs	r2, #32
 800086e:	4013      	ands	r3, r2
 8000870:	d107      	bne.n	8000882 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2104      	movs	r1, #4
 800087e:	438a      	bics	r2, r1
 8000880:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000882:	4b44      	ldr	r3, [pc, #272]	@ (8000994 <HAL_DMA_IRQHandler+0x160>)
 8000884:	6859      	ldr	r1, [r3, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	221c      	movs	r2, #28
 800088c:	4013      	ands	r3, r2
 800088e:	2204      	movs	r2, #4
 8000890:	409a      	lsls	r2, r3
 8000892:	4b40      	ldr	r3, [pc, #256]	@ (8000994 <HAL_DMA_IRQHandler+0x160>)
 8000894:	430a      	orrs	r2, r1
 8000896:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	2b00      	cmp	r3, #0
 800089e:	d100      	bne.n	80008a2 <HAL_DMA_IRQHandler+0x6e>
 80008a0:	e073      	b.n	800098a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	0010      	movs	r0, r2
 80008aa:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80008ac:	e06d      	b.n	800098a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	221c      	movs	r2, #28
 80008b4:	4013      	ands	r3, r2
 80008b6:	2202      	movs	r2, #2
 80008b8:	409a      	lsls	r2, r3
 80008ba:	0013      	movs	r3, r2
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	4013      	ands	r3, r2
 80008c0:	d02e      	beq.n	8000920 <HAL_DMA_IRQHandler+0xec>
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2202      	movs	r2, #2
 80008c6:	4013      	ands	r3, r2
 80008c8:	d02a      	beq.n	8000920 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2220      	movs	r2, #32
 80008d2:	4013      	ands	r3, r2
 80008d4:	d10b      	bne.n	80008ee <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	210a      	movs	r1, #10
 80008e2:	438a      	bics	r2, r1
 80008e4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2225      	movs	r2, #37	@ 0x25
 80008ea:	2101      	movs	r1, #1
 80008ec:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80008ee:	4b29      	ldr	r3, [pc, #164]	@ (8000994 <HAL_DMA_IRQHandler+0x160>)
 80008f0:	6859      	ldr	r1, [r3, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	221c      	movs	r2, #28
 80008f8:	4013      	ands	r3, r2
 80008fa:	2202      	movs	r2, #2
 80008fc:	409a      	lsls	r2, r3
 80008fe:	4b25      	ldr	r3, [pc, #148]	@ (8000994 <HAL_DMA_IRQHandler+0x160>)
 8000900:	430a      	orrs	r2, r1
 8000902:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2224      	movs	r2, #36	@ 0x24
 8000908:	2100      	movs	r1, #0
 800090a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000910:	2b00      	cmp	r3, #0
 8000912:	d03a      	beq.n	800098a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	0010      	movs	r0, r2
 800091c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800091e:	e034      	b.n	800098a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000924:	221c      	movs	r2, #28
 8000926:	4013      	ands	r3, r2
 8000928:	2208      	movs	r2, #8
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4013      	ands	r3, r2
 8000932:	d02b      	beq.n	800098c <HAL_DMA_IRQHandler+0x158>
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	2208      	movs	r2, #8
 8000938:	4013      	ands	r3, r2
 800093a:	d027      	beq.n	800098c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	210e      	movs	r1, #14
 8000948:	438a      	bics	r2, r1
 800094a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <HAL_DMA_IRQHandler+0x160>)
 800094e:	6859      	ldr	r1, [r3, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	221c      	movs	r2, #28
 8000956:	4013      	ands	r3, r2
 8000958:	2201      	movs	r2, #1
 800095a:	409a      	lsls	r2, r3
 800095c:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <HAL_DMA_IRQHandler+0x160>)
 800095e:	430a      	orrs	r2, r1
 8000960:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2201      	movs	r2, #1
 8000966:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2225      	movs	r2, #37	@ 0x25
 800096c:	2101      	movs	r1, #1
 800096e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2224      	movs	r2, #36	@ 0x24
 8000974:	2100      	movs	r1, #0
 8000976:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800097c:	2b00      	cmp	r3, #0
 800097e:	d005      	beq.n	800098c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	0010      	movs	r0, r2
 8000988:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	46c0      	nop			@ (mov r8, r8)
}
 800098e:	46bd      	mov	sp, r7
 8000990:	b004      	add	sp, #16
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40020000 	.word	0x40020000

08000998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	0008      	movs	r0, r1
 80009a2:	0011      	movs	r1, r2
 80009a4:	1cbb      	adds	r3, r7, #2
 80009a6:	1c02      	adds	r2, r0, #0
 80009a8:	801a      	strh	r2, [r3, #0]
 80009aa:	1c7b      	adds	r3, r7, #1
 80009ac:	1c0a      	adds	r2, r1, #0
 80009ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80009b0:	1cbb      	adds	r3, r7, #2
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d107      	bne.n	80009c8 <HAL_GPIO_WritePin+0x30>
 80009b8:	2398      	movs	r3, #152	@ 0x98
 80009ba:	33ff      	adds	r3, #255	@ 0xff
 80009bc:	001a      	movs	r2, r3
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_GPIO_WritePin+0x70>)
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f7ff fcd4 	bl	8000370 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80009c8:	1c7b      	adds	r3, r7, #1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00a      	beq.n	80009e6 <HAL_GPIO_WritePin+0x4e>
 80009d0:	1c7b      	adds	r3, r7, #1
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d006      	beq.n	80009e6 <HAL_GPIO_WritePin+0x4e>
 80009d8:	23cc      	movs	r3, #204	@ 0xcc
 80009da:	005a      	lsls	r2, r3, #1
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <HAL_GPIO_WritePin+0x70>)
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff fcc5 	bl	8000370 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80009e6:	1c7b      	adds	r3, r7, #1
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <HAL_GPIO_WritePin+0x60>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009ee:	1cbb      	adds	r3, r7, #2
 80009f0:	881a      	ldrh	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009f6:	e003      	b.n	8000a00 <HAL_GPIO_WritePin+0x68>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009f8:	1cbb      	adds	r3, r7, #2
 80009fa:	881a      	ldrh	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08003240 	.word	0x08003240

08000a0c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	000a      	movs	r2, r1
 8000a16:	1cbb      	adds	r3, r7, #2
 8000a18:	801a      	strh	r2, [r3, #0]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000a1a:	1cbb      	adds	r3, r7, #2
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d106      	bne.n	8000a30 <HAL_GPIO_TogglePin+0x24>
 8000a22:	23d8      	movs	r3, #216	@ 0xd8
 8000a24:	005a      	lsls	r2, r3, #1
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_GPIO_TogglePin+0x4c>)
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fca0 	bl	8000370 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a36:	1cbb      	adds	r3, r7, #2
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	041a      	lsls	r2, r3, #16
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	1cb9      	adds	r1, r7, #2
 8000a46:	8809      	ldrh	r1, [r1, #0]
 8000a48:	400b      	ands	r3, r1
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	619a      	str	r2, [r3, #24]
}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b004      	add	sp, #16
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	08003240 	.word	0x08003240

08000a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f000 fc49 	bl	8001302 <HAL_RCC_OscConfig+0x8a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d01a      	beq.n	8000aae <HAL_RCC_OscConfig+0x52>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d115      	bne.n	8000aae <HAL_RCC_OscConfig+0x52>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2202      	movs	r2, #2
 8000a88:	4013      	ands	r3, r2
 8000a8a:	d110      	bne.n	8000aae <HAL_RCC_OscConfig+0x52>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2208      	movs	r2, #8
 8000a92:	4013      	ands	r3, r2
 8000a94:	d10b      	bne.n	8000aae <HAL_RCC_OscConfig+0x52>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	d106      	bne.n	8000aae <HAL_RCC_OscConfig+0x52>
 8000aa0:	23a1      	movs	r3, #161	@ 0xa1
 8000aa2:	005a      	lsls	r2, r3, #1
 8000aa4:	4bc9      	ldr	r3, [pc, #804]	@ (8000dcc <HAL_RCC_OscConfig+0x370>)
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff fc61 	bl	8000370 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	d100      	bne.n	8000aba <HAL_RCC_OscConfig+0x5e>
 8000ab8:	e096      	b.n	8000be8 <HAL_RCC_OscConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d012      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x8c>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	2380      	movs	r3, #128	@ 0x80
 8000ac8:	025b      	lsls	r3, r3, #9
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d00c      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x8c>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	23a0      	movs	r3, #160	@ 0xa0
 8000ad4:	02db      	lsls	r3, r3, #11
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d006      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x8c>
 8000ada:	23a4      	movs	r3, #164	@ 0xa4
 8000adc:	005a      	lsls	r2, r3, #1
 8000ade:	4bbb      	ldr	r3, [pc, #748]	@ (8000dcc <HAL_RCC_OscConfig+0x370>)
 8000ae0:	0011      	movs	r1, r2
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff fc44 	bl	8000370 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ae8:	4bb9      	ldr	r3, [pc, #740]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2238      	movs	r2, #56	@ 0x38
 8000aee:	4013      	ands	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000af2:	4bb7      	ldr	r3, [pc, #732]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	2203      	movs	r2, #3
 8000af8:	4013      	ands	r3, r2
 8000afa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2b10      	cmp	r3, #16
 8000b00:	d102      	bne.n	8000b08 <HAL_RCC_OscConfig+0xac>
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d002      	beq.n	8000b0e <HAL_RCC_OscConfig+0xb2>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d10c      	bne.n	8000b28 <HAL_RCC_OscConfig+0xcc>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b0e:	4bb0      	ldr	r3, [pc, #704]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	2380      	movs	r3, #128	@ 0x80
 8000b14:	029b      	lsls	r3, r3, #10
 8000b16:	4013      	ands	r3, r2
 8000b18:	d065      	beq.n	8000be6 <HAL_RCC_OscConfig+0x18a>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d161      	bne.n	8000be6 <HAL_RCC_OscConfig+0x18a>
      {
        return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f000 fbed 	bl	8001302 <HAL_RCC_OscConfig+0x8a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	025b      	lsls	r3, r3, #9
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d107      	bne.n	8000b44 <HAL_RCC_OscConfig+0xe8>
 8000b34:	4ba6      	ldr	r3, [pc, #664]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4ba5      	ldr	r3, [pc, #660]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b3a:	2180      	movs	r1, #128	@ 0x80
 8000b3c:	0249      	lsls	r1, r1, #9
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	e020      	b.n	8000b86 <HAL_RCC_OscConfig+0x12a>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	23a0      	movs	r3, #160	@ 0xa0
 8000b4a:	02db      	lsls	r3, r3, #11
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d10e      	bne.n	8000b6e <HAL_RCC_OscConfig+0x112>
 8000b50:	4b9f      	ldr	r3, [pc, #636]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b9e      	ldr	r3, [pc, #632]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	02c9      	lsls	r1, r1, #11
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b9b      	ldr	r3, [pc, #620]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b64:	2180      	movs	r1, #128	@ 0x80
 8000b66:	0249      	lsls	r1, r1, #9
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	e00b      	b.n	8000b86 <HAL_RCC_OscConfig+0x12a>
 8000b6e:	4b98      	ldr	r3, [pc, #608]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b97      	ldr	r3, [pc, #604]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b74:	4997      	ldr	r1, [pc, #604]	@ (8000dd4 <HAL_RCC_OscConfig+0x378>)
 8000b76:	400a      	ands	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	4b95      	ldr	r3, [pc, #596]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b94      	ldr	r3, [pc, #592]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000b80:	4995      	ldr	r1, [pc, #596]	@ (8000dd8 <HAL_RCC_OscConfig+0x37c>)
 8000b82:	400a      	ands	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d015      	beq.n	8000bba <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b8e:	f7ff fd51 	bl	8000634 <HAL_GetTick>
 8000b92:	0003      	movs	r3, r0
 8000b94:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b96:	e009      	b.n	8000bac <HAL_RCC_OscConfig+0x150>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b98:	f7ff fd4c 	bl	8000634 <HAL_GetTick>
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b64      	cmp	r3, #100	@ 0x64
 8000ba4:	d902      	bls.n	8000bac <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	f000 fbab 	bl	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bac:	4b88      	ldr	r3, [pc, #544]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2380      	movs	r3, #128	@ 0x80
 8000bb2:	029b      	lsls	r3, r3, #10
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d0ef      	beq.n	8000b98 <HAL_RCC_OscConfig+0x13c>
 8000bb8:	e016      	b.n	8000be8 <HAL_RCC_OscConfig+0x18c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bba:	f7ff fd3b 	bl	8000634 <HAL_GetTick>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bc2:	e009      	b.n	8000bd8 <HAL_RCC_OscConfig+0x17c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bc4:	f7ff fd36 	bl	8000634 <HAL_GetTick>
 8000bc8:	0002      	movs	r2, r0
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b64      	cmp	r3, #100	@ 0x64
 8000bd0:	d902      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	f000 fb95 	bl	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bd8:	4b7d      	ldr	r3, [pc, #500]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	029b      	lsls	r3, r3, #10
 8000be0:	4013      	ands	r3, r2
 8000be2:	d1ef      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x168>
 8000be4:	e000      	b.n	8000be8 <HAL_RCC_OscConfig+0x18c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2202      	movs	r2, #2
 8000bee:	4013      	ands	r3, r2
 8000bf0:	d100      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x198>
 8000bf2:	e100      	b.n	8000df6 <HAL_RCC_OscConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00c      	beq.n	8000c16 <HAL_RCC_OscConfig+0x1ba>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	2380      	movs	r3, #128	@ 0x80
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d006      	beq.n	8000c16 <HAL_RCC_OscConfig+0x1ba>
 8000c08:	23bf      	movs	r3, #191	@ 0xbf
 8000c0a:	005a      	lsls	r2, r3, #1
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8000dcc <HAL_RCC_OscConfig+0x370>)
 8000c0e:	0011      	movs	r1, r2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fbad 	bl	8000370 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c1c:	d907      	bls.n	8000c2e <HAL_RCC_OscConfig+0x1d2>
 8000c1e:	2380      	movs	r3, #128	@ 0x80
 8000c20:	33ff      	adds	r3, #255	@ 0xff
 8000c22:	001a      	movs	r2, r3
 8000c24:	4b69      	ldr	r3, [pc, #420]	@ (8000dcc <HAL_RCC_OscConfig+0x370>)
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff fba1 	bl	8000370 <assert_failed>
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d030      	beq.n	8000c98 <HAL_RCC_OscConfig+0x23c>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	2380      	movs	r3, #128	@ 0x80
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d02a      	beq.n	8000c98 <HAL_RCC_OscConfig+0x23c>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	2380      	movs	r3, #128	@ 0x80
 8000c48:	015b      	lsls	r3, r3, #5
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d024      	beq.n	8000c98 <HAL_RCC_OscConfig+0x23c>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	23c0      	movs	r3, #192	@ 0xc0
 8000c54:	015b      	lsls	r3, r3, #5
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d01e      	beq.n	8000c98 <HAL_RCC_OscConfig+0x23c>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691a      	ldr	r2, [r3, #16]
 8000c5e:	2380      	movs	r3, #128	@ 0x80
 8000c60:	019b      	lsls	r3, r3, #6
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d018      	beq.n	8000c98 <HAL_RCC_OscConfig+0x23c>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	23a0      	movs	r3, #160	@ 0xa0
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d012      	beq.n	8000c98 <HAL_RCC_OscConfig+0x23c>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691a      	ldr	r2, [r3, #16]
 8000c76:	23c0      	movs	r3, #192	@ 0xc0
 8000c78:	019b      	lsls	r3, r3, #6
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d00c      	beq.n	8000c98 <HAL_RCC_OscConfig+0x23c>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	691a      	ldr	r2, [r3, #16]
 8000c82:	23e0      	movs	r3, #224	@ 0xe0
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d006      	beq.n	8000c98 <HAL_RCC_OscConfig+0x23c>
 8000c8a:	23c0      	movs	r3, #192	@ 0xc0
 8000c8c:	005a      	lsls	r2, r3, #1
 8000c8e:	4b4f      	ldr	r3, [pc, #316]	@ (8000dcc <HAL_RCC_OscConfig+0x370>)
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fb6c 	bl	8000370 <assert_failed>

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c98:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2238      	movs	r2, #56	@ 0x38
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2b10      	cmp	r3, #16
 8000cb0:	d102      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x25c>
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d002      	beq.n	8000cbe <HAL_RCC_OscConfig+0x262>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d135      	bne.n	8000d2a <HAL_RCC_OscConfig+0x2ce>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cbe:	4b44      	ldr	r3, [pc, #272]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d005      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x27a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x27a>
      {
        return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e315      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <HAL_RCC_OscConfig+0x380>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	0019      	movs	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	021a      	lsls	r2, r3, #8
 8000ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d112      	bne.n	8000d18 <HAL_RCC_OscConfig+0x2bc>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cf2:	4b37      	ldr	r3, [pc, #220]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a3a      	ldr	r2, [pc, #232]	@ (8000de0 <HAL_RCC_OscConfig+0x384>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	4b33      	ldr	r3, [pc, #204]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d02:	430a      	orrs	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000d06:	4b32      	ldr	r3, [pc, #200]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	0adb      	lsrs	r3, r3, #11
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	4013      	ands	r3, r2
 8000d10:	4a34      	ldr	r2, [pc, #208]	@ (8000de4 <HAL_RCC_OscConfig+0x388>)
 8000d12:	40da      	lsrs	r2, r3
 8000d14:	4b34      	ldr	r3, [pc, #208]	@ (8000de8 <HAL_RCC_OscConfig+0x38c>)
 8000d16:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000d18:	4b34      	ldr	r3, [pc, #208]	@ (8000dec <HAL_RCC_OscConfig+0x390>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fc2d 	bl	800057c <HAL_InitTick>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d066      	beq.n	8000df4 <HAL_RCC_OscConfig+0x398>
        {
          return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e2eb      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d030      	beq.n	8000d94 <HAL_RCC_OscConfig+0x338>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a2a      	ldr	r2, [pc, #168]	@ (8000de0 <HAL_RCC_OscConfig+0x384>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000d46:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d4c:	2180      	movs	r1, #128	@ 0x80
 8000d4e:	0049      	lsls	r1, r1, #1
 8000d50:	430a      	orrs	r2, r1
 8000d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d54:	f7ff fc6e 	bl	8000634 <HAL_GetTick>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x314>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fc69 	bl	8000634 <HAL_GetTick>
 8000d62:	0002      	movs	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x314>
          {
            return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e2c8      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	2380      	movs	r3, #128	@ 0x80
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d0f0      	beq.n	8000d5e <HAL_RCC_OscConfig+0x302>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	4a16      	ldr	r2, [pc, #88]	@ (8000ddc <HAL_RCC_OscConfig+0x380>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	0019      	movs	r1, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	021a      	lsls	r2, r3, #8
 8000d8c:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	e030      	b.n	8000df6 <HAL_RCC_OscConfig+0x39a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000d9a:	4915      	ldr	r1, [pc, #84]	@ (8000df0 <HAL_RCC_OscConfig+0x394>)
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da0:	f7ff fc48 	bl	8000634 <HAL_GetTick>
 8000da4:	0003      	movs	r3, r0
 8000da6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000daa:	f7ff fc43 	bl	8000634 <HAL_GetTick>
 8000dae:	0002      	movs	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e2a2      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <HAL_RCC_OscConfig+0x374>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2380      	movs	r3, #128	@ 0x80
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d1f0      	bne.n	8000daa <HAL_RCC_OscConfig+0x34e>
 8000dc8:	e015      	b.n	8000df6 <HAL_RCC_OscConfig+0x39a>
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	0800327c 	.word	0x0800327c
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	fffeffff 	.word	0xfffeffff
 8000dd8:	fffbffff 	.word	0xfffbffff
 8000ddc:	ffff80ff 	.word	0xffff80ff
 8000de0:	ffffc7ff 	.word	0xffffc7ff
 8000de4:	00f42400 	.word	0x00f42400
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000004 	.word	0x20000004
 8000df0:	fffffeff 	.word	0xfffffeff
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000df4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d056      	beq.n	8000eae <HAL_RCC_OscConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00a      	beq.n	8000e1e <HAL_RCC_OscConfig+0x3c2>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d006      	beq.n	8000e1e <HAL_RCC_OscConfig+0x3c2>
 8000e10:	23ea      	movs	r3, #234	@ 0xea
 8000e12:	005a      	lsls	r2, r3, #1
 8000e14:	4b85      	ldr	r3, [pc, #532]	@ (800102c <HAL_RCC_OscConfig+0x5d0>)
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff faa9 	bl	8000370 <assert_failed>

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000e1e:	4b84      	ldr	r3, [pc, #528]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2238      	movs	r2, #56	@ 0x38
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b18      	cmp	r3, #24
 8000e28:	d10a      	bne.n	8000e40 <HAL_RCC_OscConfig+0x3e4>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000e2a:	4b81      	ldr	r3, [pc, #516]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2e:	2202      	movs	r2, #2
 8000e30:	4013      	ands	r3, r2
 8000e32:	d03c      	beq.n	8000eae <HAL_RCC_OscConfig+0x452>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d138      	bne.n	8000eae <HAL_RCC_OscConfig+0x452>
      {
        return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e260      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d019      	beq.n	8000e7c <HAL_RCC_OscConfig+0x420>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000e48:	4b79      	ldr	r3, [pc, #484]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000e4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e4c:	4b78      	ldr	r3, [pc, #480]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	430a      	orrs	r2, r1
 8000e52:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e54:	f7ff fbee 	bl	8000634 <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x414>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fbe9 	bl	8000634 <HAL_GetTick>
 8000e62:	0002      	movs	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e248      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e70:	4b6f      	ldr	r3, [pc, #444]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e74:	2202      	movs	r2, #2
 8000e76:	4013      	ands	r3, r2
 8000e78:	d0f1      	beq.n	8000e5e <HAL_RCC_OscConfig+0x402>
 8000e7a:	e018      	b.n	8000eae <HAL_RCC_OscConfig+0x452>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000e7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000e7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e80:	4b6b      	ldr	r3, [pc, #428]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000e82:	2101      	movs	r1, #1
 8000e84:	438a      	bics	r2, r1
 8000e86:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e88:	f7ff fbd4 	bl	8000634 <HAL_GetTick>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x448>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e92:	f7ff fbcf 	bl	8000634 <HAL_GetTick>
 8000e96:	0002      	movs	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x448>
          {
            return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e22e      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ea4:	4b62      	ldr	r3, [pc, #392]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d1f1      	bne.n	8000e92 <HAL_RCC_OscConfig+0x436>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d100      	bne.n	8000eba <HAL_RCC_OscConfig+0x45e>
 8000eb8:	e0d0      	b.n	800105c <HAL_RCC_OscConfig+0x600>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eba:	231f      	movs	r3, #31
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00e      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x48c>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d00a      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x48c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	d006      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x48c>
 8000eda:	2383      	movs	r3, #131	@ 0x83
 8000edc:	009a      	lsls	r2, r3, #2
 8000ede:	4b53      	ldr	r3, [pc, #332]	@ (800102c <HAL_RCC_OscConfig+0x5d0>)
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fa44 	bl	8000370 <assert_failed>

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000ee8:	4b51      	ldr	r3, [pc, #324]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	2238      	movs	r2, #56	@ 0x38
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b20      	cmp	r3, #32
 8000ef2:	d10c      	bne.n	8000f0e <HAL_RCC_OscConfig+0x4b2>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000ef4:	4b4e      	ldr	r3, [pc, #312]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ef8:	2202      	movs	r2, #2
 8000efa:	4013      	ands	r3, r2
 8000efc:	d100      	bne.n	8000f00 <HAL_RCC_OscConfig+0x4a4>
 8000efe:	e0ad      	b.n	800105c <HAL_RCC_OscConfig+0x600>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d000      	beq.n	8000f0a <HAL_RCC_OscConfig+0x4ae>
 8000f08:	e0a8      	b.n	800105c <HAL_RCC_OscConfig+0x600>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e1f9      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f0e:	4b48      	ldr	r3, [pc, #288]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f12:	2380      	movs	r3, #128	@ 0x80
 8000f14:	055b      	lsls	r3, r3, #21
 8000f16:	4013      	ands	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_RCC_OscConfig+0x4c2>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <HAL_RCC_OscConfig+0x4c4>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d011      	beq.n	8000f48 <HAL_RCC_OscConfig+0x4ec>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f28:	4b41      	ldr	r3, [pc, #260]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000f2a:	2180      	movs	r1, #128	@ 0x80
 8000f2c:	0549      	lsls	r1, r1, #21
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f32:	4b3f      	ldr	r3, [pc, #252]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000f34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f36:	2380      	movs	r3, #128	@ 0x80
 8000f38:	055b      	lsls	r3, r3, #21
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000f40:	231f      	movs	r3, #31
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f48:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <HAL_RCC_OscConfig+0x5d8>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4013      	ands	r3, r2
 8000f52:	d11a      	bne.n	8000f8a <HAL_RCC_OscConfig+0x52e>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <HAL_RCC_OscConfig+0x5d8>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <HAL_RCC_OscConfig+0x5d8>)
 8000f5a:	2180      	movs	r1, #128	@ 0x80
 8000f5c:	0049      	lsls	r1, r1, #1
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb67 	bl	8000634 <HAL_GetTick>
 8000f66:	0003      	movs	r3, r0
 8000f68:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x522>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6c:	f7ff fb62 	bl	8000634 <HAL_GetTick>
 8000f70:	0002      	movs	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e1c1      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <HAL_RCC_OscConfig+0x5d8>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4013      	ands	r3, r2
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0x510>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d106      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x544>
 8000f92:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000f94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f9e:	e01c      	b.n	8000fda <HAL_RCC_OscConfig+0x57e>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d10c      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x566>
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000faa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fac:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000fae:	2104      	movs	r1, #4
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000fb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fc0:	e00b      	b.n	8000fda <HAL_RCC_OscConfig+0x57e>
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000fc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	438a      	bics	r2, r1
 8000fcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000fd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	438a      	bics	r2, r1
 8000fd8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d014      	beq.n	800100c <HAL_RCC_OscConfig+0x5b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fb27 	bl	8000634 <HAL_GetTick>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fea:	e009      	b.n	8001000 <HAL_RCC_OscConfig+0x5a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fec:	f7ff fb22 	bl	8000634 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a10      	ldr	r2, [pc, #64]	@ (8001038 <HAL_RCC_OscConfig+0x5dc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x5a4>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e180      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_RCC_OscConfig+0x5d4>)
 8001002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001004:	2202      	movs	r2, #2
 8001006:	4013      	ands	r3, r2
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x590>
 800100a:	e01c      	b.n	8001046 <HAL_RCC_OscConfig+0x5ea>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100c:	f7ff fb12 	bl	8000634 <HAL_GetTick>
 8001010:	0003      	movs	r3, r0
 8001012:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001014:	e012      	b.n	800103c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001016:	f7ff fb0d 	bl	8000634 <HAL_GetTick>
 800101a:	0002      	movs	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <HAL_RCC_OscConfig+0x5dc>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d90a      	bls.n	800103c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e16b      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	0800327c 	.word	0x0800327c
 8001030:	40021000 	.word	0x40021000
 8001034:	40007000 	.word	0x40007000
 8001038:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800103c:	4bb3      	ldr	r3, [pc, #716]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 800103e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001040:	2202      	movs	r2, #2
 8001042:	4013      	ands	r3, r2
 8001044:	d1e7      	bne.n	8001016 <HAL_RCC_OscConfig+0x5ba>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001046:	231f      	movs	r3, #31
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d105      	bne.n	800105c <HAL_RCC_OscConfig+0x600>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001050:	4bae      	ldr	r3, [pc, #696]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 8001052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001054:	4bad      	ldr	r3, [pc, #692]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 8001056:	49ae      	ldr	r1, [pc, #696]	@ (8001310 <HAL_RCC_OscConfig+0x8b4>)
 8001058:	400a      	ands	r2, r1
 800105a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00d      	beq.n	8001080 <HAL_RCC_OscConfig+0x624>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d009      	beq.n	8001080 <HAL_RCC_OscConfig+0x624>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d005      	beq.n	8001080 <HAL_RCC_OscConfig+0x624>
 8001074:	4aa7      	ldr	r2, [pc, #668]	@ (8001314 <HAL_RCC_OscConfig+0x8b8>)
 8001076:	4ba8      	ldr	r3, [pc, #672]	@ (8001318 <HAL_RCC_OscConfig+0x8bc>)
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f7ff f978 	bl	8000370 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d100      	bne.n	800108a <HAL_RCC_OscConfig+0x62e>
 8001088:	e13a      	b.n	8001300 <HAL_RCC_OscConfig+0x8a4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800108a:	4ba0      	ldr	r3, [pc, #640]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2238      	movs	r2, #56	@ 0x38
 8001090:	4013      	ands	r3, r2
 8001092:	2b10      	cmp	r3, #16
 8001094:	d100      	bne.n	8001098 <HAL_RCC_OscConfig+0x63c>
 8001096:	e0fa      	b.n	800128e <HAL_RCC_OscConfig+0x832>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d000      	beq.n	80010a2 <HAL_RCC_OscConfig+0x646>
 80010a0:	e0d4      	b.n	800124c <HAL_RCC_OscConfig+0x7f0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00d      	beq.n	80010c6 <HAL_RCC_OscConfig+0x66a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d009      	beq.n	80010c6 <HAL_RCC_OscConfig+0x66a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d005      	beq.n	80010c6 <HAL_RCC_OscConfig+0x66a>
 80010ba:	4a98      	ldr	r2, [pc, #608]	@ (800131c <HAL_RCC_OscConfig+0x8c0>)
 80010bc:	4b96      	ldr	r3, [pc, #600]	@ (8001318 <HAL_RCC_OscConfig+0x8bc>)
 80010be:	0011      	movs	r1, r2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff f955 	bl	8000370 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d021      	beq.n	8001112 <HAL_RCC_OscConfig+0x6b6>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d2:	2b10      	cmp	r3, #16
 80010d4:	d01d      	beq.n	8001112 <HAL_RCC_OscConfig+0x6b6>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010da:	2b20      	cmp	r3, #32
 80010dc:	d019      	beq.n	8001112 <HAL_RCC_OscConfig+0x6b6>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	2b30      	cmp	r3, #48	@ 0x30
 80010e4:	d015      	beq.n	8001112 <HAL_RCC_OscConfig+0x6b6>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	2b40      	cmp	r3, #64	@ 0x40
 80010ec:	d011      	beq.n	8001112 <HAL_RCC_OscConfig+0x6b6>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f2:	2b50      	cmp	r3, #80	@ 0x50
 80010f4:	d00d      	beq.n	8001112 <HAL_RCC_OscConfig+0x6b6>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fa:	2b60      	cmp	r3, #96	@ 0x60
 80010fc:	d009      	beq.n	8001112 <HAL_RCC_OscConfig+0x6b6>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	2b70      	cmp	r3, #112	@ 0x70
 8001104:	d005      	beq.n	8001112 <HAL_RCC_OscConfig+0x6b6>
 8001106:	4a86      	ldr	r2, [pc, #536]	@ (8001320 <HAL_RCC_OscConfig+0x8c4>)
 8001108:	4b83      	ldr	r3, [pc, #524]	@ (8001318 <HAL_RCC_OscConfig+0x8bc>)
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff f92f 	bl	8000370 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001116:	2b07      	cmp	r3, #7
 8001118:	d903      	bls.n	8001122 <HAL_RCC_OscConfig+0x6c6>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111e:	2b56      	cmp	r3, #86	@ 0x56
 8001120:	d905      	bls.n	800112e <HAL_RCC_OscConfig+0x6d2>
 8001122:	4a80      	ldr	r2, [pc, #512]	@ (8001324 <HAL_RCC_OscConfig+0x8c8>)
 8001124:	4b7c      	ldr	r3, [pc, #496]	@ (8001318 <HAL_RCC_OscConfig+0x8bc>)
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff f921 	bl	8000370 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001132:	2380      	movs	r3, #128	@ 0x80
 8001134:	029b      	lsls	r3, r3, #10
 8001136:	429a      	cmp	r2, r3
 8001138:	d305      	bcc.n	8001146 <HAL_RCC_OscConfig+0x6ea>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800113e:	23f8      	movs	r3, #248	@ 0xf8
 8001140:	039b      	lsls	r3, r3, #14
 8001142:	429a      	cmp	r2, r3
 8001144:	d906      	bls.n	8001154 <HAL_RCC_OscConfig+0x6f8>
 8001146:	23a5      	movs	r3, #165	@ 0xa5
 8001148:	009a      	lsls	r2, r3, #2
 800114a:	4b73      	ldr	r3, [pc, #460]	@ (8001318 <HAL_RCC_OscConfig+0x8bc>)
 800114c:	0011      	movs	r1, r2
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff f90e 	bl	8000370 <assert_failed>
#if defined(RCC_PLLQ_SUPPORT)
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	049b      	lsls	r3, r3, #18
 800115c:	429a      	cmp	r2, r3
 800115e:	d305      	bcc.n	800116c <HAL_RCC_OscConfig+0x710>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001164:	23e0      	movs	r3, #224	@ 0xe0
 8001166:	051b      	lsls	r3, r3, #20
 8001168:	429a      	cmp	r2, r3
 800116a:	d905      	bls.n	8001178 <HAL_RCC_OscConfig+0x71c>
 800116c:	4a6e      	ldr	r2, [pc, #440]	@ (8001328 <HAL_RCC_OscConfig+0x8cc>)
 800116e:	4b6a      	ldr	r3, [pc, #424]	@ (8001318 <HAL_RCC_OscConfig+0x8bc>)
 8001170:	0011      	movs	r1, r2
 8001172:	0018      	movs	r0, r3
 8001174:	f7ff f8fc 	bl	8000370 <assert_failed>
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800117c:	2380      	movs	r3, #128	@ 0x80
 800117e:	059b      	lsls	r3, r3, #22
 8001180:	429a      	cmp	r2, r3
 8001182:	d305      	bcc.n	8001190 <HAL_RCC_OscConfig+0x734>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001188:	23e0      	movs	r3, #224	@ 0xe0
 800118a:	061b      	lsls	r3, r3, #24
 800118c:	429a      	cmp	r2, r3
 800118e:	d906      	bls.n	800119e <HAL_RCC_OscConfig+0x742>
 8001190:	23a6      	movs	r3, #166	@ 0xa6
 8001192:	009a      	lsls	r2, r3, #2
 8001194:	4b60      	ldr	r3, [pc, #384]	@ (8001318 <HAL_RCC_OscConfig+0x8bc>)
 8001196:	0011      	movs	r1, r2
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff f8e9 	bl	8000370 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119e:	4b5b      	ldr	r3, [pc, #364]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b5a      	ldr	r3, [pc, #360]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 80011a4:	4961      	ldr	r1, [pc, #388]	@ (800132c <HAL_RCC_OscConfig+0x8d0>)
 80011a6:	400a      	ands	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fa43 	bl	8000634 <HAL_GetTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x76a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b4:	f7ff fa3e 	bl	8000634 <HAL_GetTick>
 80011b8:	0002      	movs	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x76a>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e09d      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c6:	4b51      	ldr	r3, [pc, #324]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	2380      	movs	r3, #128	@ 0x80
 80011cc:	049b      	lsls	r3, r3, #18
 80011ce:	4013      	ands	r3, r2
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x758>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d2:	4b4e      	ldr	r3, [pc, #312]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	4a56      	ldr	r2, [pc, #344]	@ (8001330 <HAL_RCC_OscConfig+0x8d4>)
 80011d8:	4013      	ands	r3, r2
 80011da:	0019      	movs	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1a      	ldr	r2, [r3, #32]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011fe:	431a      	orrs	r2, r3
 8001200:	4b42      	ldr	r3, [pc, #264]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 8001202:	430a      	orrs	r2, r1
 8001204:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001206:	4b41      	ldr	r3, [pc, #260]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b40      	ldr	r3, [pc, #256]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 800120c:	2180      	movs	r1, #128	@ 0x80
 800120e:	0449      	lsls	r1, r1, #17
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001214:	4b3d      	ldr	r3, [pc, #244]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	4b3c      	ldr	r3, [pc, #240]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 800121a:	2180      	movs	r1, #128	@ 0x80
 800121c:	0549      	lsls	r1, r1, #21
 800121e:	430a      	orrs	r2, r1
 8001220:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001222:	f7ff fa07 	bl	8000634 <HAL_GetTick>
 8001226:	0003      	movs	r3, r0
 8001228:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x7e2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fa02 	bl	8000634 <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x7e2>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e061      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800123e:	4b33      	ldr	r3, [pc, #204]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	049b      	lsls	r3, r3, #18
 8001246:	4013      	ands	r3, r2
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x7d0>
 800124a:	e059      	b.n	8001300 <HAL_RCC_OscConfig+0x8a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124c:	4b2f      	ldr	r3, [pc, #188]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b2e      	ldr	r3, [pc, #184]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 8001252:	4936      	ldr	r1, [pc, #216]	@ (800132c <HAL_RCC_OscConfig+0x8d0>)
 8001254:	400a      	ands	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff f9ec 	bl	8000634 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x818>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001262:	f7ff f9e7 	bl	8000634 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e046      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001274:	4b25      	ldr	r3, [pc, #148]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	049b      	lsls	r3, r3, #18
 800127c:	4013      	ands	r3, r2
 800127e:	d1f0      	bne.n	8001262 <HAL_RCC_OscConfig+0x806>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001280:	4b22      	ldr	r3, [pc, #136]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	4b21      	ldr	r3, [pc, #132]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 8001286:	492b      	ldr	r1, [pc, #172]	@ (8001334 <HAL_RCC_OscConfig+0x8d8>)
 8001288:	400a      	ands	r2, r1
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	e038      	b.n	8001300 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x83e>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e033      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800129a:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <HAL_RCC_OscConfig+0x8b0>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2203      	movs	r2, #3
 80012a4:	401a      	ands	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d126      	bne.n	80012fc <HAL_RCC_OscConfig+0x8a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2270      	movs	r2, #112	@ 0x70
 80012b2:	401a      	ands	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d11f      	bne.n	80012fc <HAL_RCC_OscConfig+0x8a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	23fe      	movs	r3, #254	@ 0xfe
 80012c0:	01db      	lsls	r3, r3, #7
 80012c2:	401a      	ands	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x8a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	23f8      	movs	r3, #248	@ 0xf8
 80012d2:	039b      	lsls	r3, r3, #14
 80012d4:	401a      	ands	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012da:	429a      	cmp	r2, r3
 80012dc:	d10e      	bne.n	80012fc <HAL_RCC_OscConfig+0x8a0>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	23e0      	movs	r3, #224	@ 0xe0
 80012e2:	051b      	lsls	r3, r3, #20
 80012e4:	401a      	ands	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x8a0>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	0f5b      	lsrs	r3, r3, #29
 80012f2:	075a      	lsls	r2, r3, #29
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_OscConfig+0x8a4>
        {
          return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <HAL_RCC_OscConfig+0x8a6>
        }
      }
    }
  }
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b008      	add	sp, #32
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	40021000 	.word	0x40021000
 8001310:	efffffff 	.word	0xefffffff
 8001314:	00000287 	.word	0x00000287
 8001318:	0800327c 	.word	0x0800327c
 800131c:	00000291 	.word	0x00000291
 8001320:	00000292 	.word	0x00000292
 8001324:	00000293 	.word	0x00000293
 8001328:	00000296 	.word	0x00000296
 800132c:	feffffff 	.word	0xfeffffff
 8001330:	11c1808c 	.word	0x11c1808c
 8001334:	eefefffc 	.word	0xeefefffc

08001338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e180      	b.n	800164e <HAL_RCC_ClockConfig+0x316>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2207      	movs	r2, #7
 8001352:	4013      	ands	r3, r2
 8001354:	d003      	beq.n	800135e <HAL_RCC_ClockConfig+0x26>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b07      	cmp	r3, #7
 800135c:	d906      	bls.n	800136c <HAL_RCC_ClockConfig+0x34>
 800135e:	23cc      	movs	r3, #204	@ 0xcc
 8001360:	009a      	lsls	r2, r3, #2
 8001362:	4bbd      	ldr	r3, [pc, #756]	@ (8001658 <HAL_RCC_ClockConfig+0x320>)
 8001364:	0011      	movs	r1, r2
 8001366:	0018      	movs	r0, r3
 8001368:	f7ff f802 	bl	8000370 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_RCC_ClockConfig+0x52>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d008      	beq.n	800138a <HAL_RCC_ClockConfig+0x52>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d005      	beq.n	800138a <HAL_RCC_ClockConfig+0x52>
 800137e:	4ab7      	ldr	r2, [pc, #732]	@ (800165c <HAL_RCC_ClockConfig+0x324>)
 8001380:	4bb5      	ldr	r3, [pc, #724]	@ (8001658 <HAL_RCC_ClockConfig+0x320>)
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f7fe fff3 	bl	8000370 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800138a:	4bb5      	ldr	r3, [pc, #724]	@ (8001660 <HAL_RCC_ClockConfig+0x328>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2207      	movs	r2, #7
 8001390:	4013      	ands	r3, r2
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d91e      	bls.n	80013d6 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001398:	4bb1      	ldr	r3, [pc, #708]	@ (8001660 <HAL_RCC_ClockConfig+0x328>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2207      	movs	r2, #7
 800139e:	4393      	bics	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	4baf      	ldr	r3, [pc, #700]	@ (8001660 <HAL_RCC_ClockConfig+0x328>)
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013aa:	f7ff f943 	bl	8000634 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013b2:	e009      	b.n	80013c8 <HAL_RCC_ClockConfig+0x90>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b4:	f7ff f93e 	bl	8000634 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	4aa9      	ldr	r2, [pc, #676]	@ (8001664 <HAL_RCC_ClockConfig+0x32c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e142      	b.n	800164e <HAL_RCC_ClockConfig+0x316>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013c8:	4ba5      	ldr	r3, [pc, #660]	@ (8001660 <HAL_RCC_ClockConfig+0x328>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2207      	movs	r2, #7
 80013ce:	4013      	ands	r3, r2
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d1ee      	bne.n	80013b4 <HAL_RCC_ClockConfig+0x7c>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	d04f      	beq.n	8001480 <HAL_RCC_ClockConfig+0x148>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2204      	movs	r2, #4
 80013e6:	4013      	ands	r3, r2
 80013e8:	d006      	beq.n	80013f8 <HAL_RCC_ClockConfig+0xc0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013ea:	4b9f      	ldr	r3, [pc, #636]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	4b9e      	ldr	r3, [pc, #632]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 80013f0:	21e0      	movs	r1, #224	@ 0xe0
 80013f2:	01c9      	lsls	r1, r1, #7
 80013f4:	430a      	orrs	r2, r1
 80013f6:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d035      	beq.n	800146c <HAL_RCC_ClockConfig+0x134>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	429a      	cmp	r2, r3
 800140a:	d02f      	beq.n	800146c <HAL_RCC_ClockConfig+0x134>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	2390      	movs	r3, #144	@ 0x90
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	429a      	cmp	r2, r3
 8001416:	d029      	beq.n	800146c <HAL_RCC_ClockConfig+0x134>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	23a0      	movs	r3, #160	@ 0xa0
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	429a      	cmp	r2, r3
 8001422:	d023      	beq.n	800146c <HAL_RCC_ClockConfig+0x134>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	23b0      	movs	r3, #176	@ 0xb0
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	429a      	cmp	r2, r3
 800142e:	d01d      	beq.n	800146c <HAL_RCC_ClockConfig+0x134>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	23c0      	movs	r3, #192	@ 0xc0
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	429a      	cmp	r2, r3
 800143a:	d017      	beq.n	800146c <HAL_RCC_ClockConfig+0x134>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	23d0      	movs	r3, #208	@ 0xd0
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	429a      	cmp	r2, r3
 8001446:	d011      	beq.n	800146c <HAL_RCC_ClockConfig+0x134>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	23e0      	movs	r3, #224	@ 0xe0
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	429a      	cmp	r2, r3
 8001452:	d00b      	beq.n	800146c <HAL_RCC_ClockConfig+0x134>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	23f0      	movs	r3, #240	@ 0xf0
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	429a      	cmp	r2, r3
 800145e:	d005      	beq.n	800146c <HAL_RCC_ClockConfig+0x134>
 8001460:	4a82      	ldr	r2, [pc, #520]	@ (800166c <HAL_RCC_ClockConfig+0x334>)
 8001462:	4b7d      	ldr	r3, [pc, #500]	@ (8001658 <HAL_RCC_ClockConfig+0x320>)
 8001464:	0011      	movs	r1, r2
 8001466:	0018      	movs	r0, r3
 8001468:	f7fe ff82 	bl	8000370 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146c:	4b7e      	ldr	r3, [pc, #504]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a7f      	ldr	r2, [pc, #508]	@ (8001670 <HAL_RCC_ClockConfig+0x338>)
 8001472:	4013      	ands	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	4b7b      	ldr	r3, [pc, #492]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 800147c:	430a      	orrs	r2, r1
 800147e:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	4013      	ands	r3, r2
 8001488:	d100      	bne.n	800148c <HAL_RCC_ClockConfig+0x154>
 800148a:	e072      	b.n	8001572 <HAL_RCC_ClockConfig+0x23a>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d016      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x18a>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d012      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x18a>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d00e      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x18a>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d00a      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x18a>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d006      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x18a>
 80014b4:	23d7      	movs	r3, #215	@ 0xd7
 80014b6:	009a      	lsls	r2, r3, #2
 80014b8:	4b67      	ldr	r3, [pc, #412]	@ (8001658 <HAL_RCC_ClockConfig+0x320>)
 80014ba:	0011      	movs	r1, r2
 80014bc:	0018      	movs	r0, r3
 80014be:	f7fe ff57 	bl	8000370 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0x1a2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ca:	4b67      	ldr	r3, [pc, #412]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	029b      	lsls	r3, r3, #10
 80014d2:	4013      	ands	r3, r2
 80014d4:	d12b      	bne.n	800152e <HAL_RCC_ClockConfig+0x1f6>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0b9      	b.n	800164e <HAL_RCC_ClockConfig+0x316>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0x1ba>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e2:	4b61      	ldr	r3, [pc, #388]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2380      	movs	r3, #128	@ 0x80
 80014e8:	049b      	lsls	r3, r3, #18
 80014ea:	4013      	ands	r3, r2
 80014ec:	d11f      	bne.n	800152e <HAL_RCC_ClockConfig+0x1f6>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0ad      	b.n	800164e <HAL_RCC_ClockConfig+0x316>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0x1d2>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	2380      	movs	r3, #128	@ 0x80
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4013      	ands	r3, r2
 8001504:	d113      	bne.n	800152e <HAL_RCC_ClockConfig+0x1f6>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0a1      	b.n	800164e <HAL_RCC_ClockConfig+0x316>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d106      	bne.n	8001520 <HAL_RCC_ClockConfig+0x1e8>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001512:	4b55      	ldr	r3, [pc, #340]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d108      	bne.n	800152e <HAL_RCC_ClockConfig+0x1f6>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e096      	b.n	800164e <HAL_RCC_ClockConfig+0x316>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001520:	4b51      	ldr	r3, [pc, #324]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 8001522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_RCC_ClockConfig+0x1f6>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e08f      	b.n	800164e <HAL_RCC_ClockConfig+0x316>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4b4e      	ldr	r3, [pc, #312]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2207      	movs	r2, #7
 8001534:	4393      	bics	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4b4a      	ldr	r3, [pc, #296]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001542:	f7ff f877 	bl	8000634 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e009      	b.n	8001560 <HAL_RCC_ClockConfig+0x228>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff f872 	bl	8000634 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	4a43      	ldr	r2, [pc, #268]	@ (8001664 <HAL_RCC_ClockConfig+0x32c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_ClockConfig+0x228>
      {
        return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e076      	b.n	800164e <HAL_RCC_ClockConfig+0x316>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001560:	4b41      	ldr	r3, [pc, #260]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2238      	movs	r2, #56	@ 0x38
 8001566:	401a      	ands	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	429a      	cmp	r2, r3
 8001570:	d1ec      	bne.n	800154c <HAL_RCC_ClockConfig+0x214>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001572:	4b3b      	ldr	r3, [pc, #236]	@ (8001660 <HAL_RCC_ClockConfig+0x328>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2207      	movs	r2, #7
 8001578:	4013      	ands	r3, r2
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d21e      	bcs.n	80015be <HAL_RCC_ClockConfig+0x286>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001580:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <HAL_RCC_ClockConfig+0x328>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2207      	movs	r2, #7
 8001586:	4393      	bics	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	4b35      	ldr	r3, [pc, #212]	@ (8001660 <HAL_RCC_ClockConfig+0x328>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001592:	f7ff f84f 	bl	8000634 <HAL_GetTick>
 8001596:	0003      	movs	r3, r0
 8001598:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800159a:	e009      	b.n	80015b0 <HAL_RCC_ClockConfig+0x278>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7ff f84a 	bl	8000634 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001664 <HAL_RCC_ClockConfig+0x32c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x278>
      {
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e04e      	b.n	800164e <HAL_RCC_ClockConfig+0x316>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_RCC_ClockConfig+0x328>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2207      	movs	r2, #7
 80015b6:	4013      	ands	r3, r2
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d1ee      	bne.n	800159c <HAL_RCC_ClockConfig+0x264>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2204      	movs	r2, #4
 80015c4:	4013      	ands	r3, r2
 80015c6:	d02b      	beq.n	8001620 <HAL_RCC_ClockConfig+0x2e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d01d      	beq.n	800160c <HAL_RCC_ClockConfig+0x2d4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	01db      	lsls	r3, r3, #7
 80015d8:	429a      	cmp	r2, r3
 80015da:	d017      	beq.n	800160c <HAL_RCC_ClockConfig+0x2d4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	23a0      	movs	r3, #160	@ 0xa0
 80015e2:	01db      	lsls	r3, r3, #7
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d011      	beq.n	800160c <HAL_RCC_ClockConfig+0x2d4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	23c0      	movs	r3, #192	@ 0xc0
 80015ee:	01db      	lsls	r3, r3, #7
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d00b      	beq.n	800160c <HAL_RCC_ClockConfig+0x2d4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	23e0      	movs	r3, #224	@ 0xe0
 80015fa:	01db      	lsls	r3, r3, #7
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x2d4>
 8001600:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <HAL_RCC_ClockConfig+0x33c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_RCC_ClockConfig+0x320>)
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f7fe feb2 	bl	8000370 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800160c:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a19      	ldr	r2, [pc, #100]	@ (8001678 <HAL_RCC_ClockConfig+0x340>)
 8001612:	4013      	ands	r3, r2
 8001614:	0019      	movs	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 800161c:	430a      	orrs	r2, r1
 800161e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001620:	f000 f832 	bl	8001688 <HAL_RCC_GetSysClockFreq>
 8001624:	0001      	movs	r1, r0
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_RCC_ClockConfig+0x330>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	220f      	movs	r2, #15
 800162e:	401a      	ands	r2, r3
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_RCC_ClockConfig+0x344>)
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	58d3      	ldr	r3, [r2, r3]
 8001636:	221f      	movs	r2, #31
 8001638:	4013      	ands	r3, r2
 800163a:	000a      	movs	r2, r1
 800163c:	40da      	lsrs	r2, r3
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <HAL_RCC_ClockConfig+0x348>)
 8001640:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <HAL_RCC_ClockConfig+0x34c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0018      	movs	r0, r3
 8001648:	f7fe ff98 	bl	800057c <HAL_InitTick>
 800164c:	0003      	movs	r3, r0
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b004      	add	sp, #16
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	0800327c 	.word	0x0800327c
 800165c:	00000331 	.word	0x00000331
 8001660:	40022000 	.word	0x40022000
 8001664:	00001388 	.word	0x00001388
 8001668:	40021000 	.word	0x40021000
 800166c:	00000355 	.word	0x00000355
 8001670:	fffff0ff 	.word	0xfffff0ff
 8001674:	000003af 	.word	0x000003af
 8001678:	ffff8fff 	.word	0xffff8fff
 800167c:	080032ec 	.word	0x080032ec
 8001680:	20000000 	.word	0x20000000
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168e:	4b3c      	ldr	r3, [pc, #240]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2238      	movs	r2, #56	@ 0x38
 8001694:	4013      	ands	r3, r2
 8001696:	d10f      	bne.n	80016b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001698:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0adb      	lsrs	r3, r3, #11
 800169e:	2207      	movs	r2, #7
 80016a0:	4013      	ands	r3, r2
 80016a2:	2201      	movs	r2, #1
 80016a4:	409a      	lsls	r2, r3
 80016a6:	0013      	movs	r3, r2
 80016a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	4835      	ldr	r0, [pc, #212]	@ (8001784 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016ae:	f7fe fd29 	bl	8000104 <__udivsi3>
 80016b2:	0003      	movs	r3, r0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	e05d      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b8:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2238      	movs	r2, #56	@ 0x38
 80016be:	4013      	ands	r3, r2
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016c4:	4b30      	ldr	r3, [pc, #192]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x100>)
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	e054      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2238      	movs	r2, #56	@ 0x38
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d138      	bne.n	8001748 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2203      	movs	r2, #3
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016e0:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	2207      	movs	r2, #7
 80016e8:	4013      	ands	r3, r2
 80016ea:	3301      	adds	r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d10d      	bne.n	8001710 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	4824      	ldr	r0, [pc, #144]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x100>)
 80016f8:	f7fe fd04 	bl	8000104 <__udivsi3>
 80016fc:	0003      	movs	r3, r0
 80016fe:	0019      	movs	r1, r3
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	227f      	movs	r2, #127	@ 0x7f
 8001708:	4013      	ands	r3, r2
 800170a:	434b      	muls	r3, r1
 800170c:	617b      	str	r3, [r7, #20]
        break;
 800170e:	e00d      	b.n	800172c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	481c      	ldr	r0, [pc, #112]	@ (8001784 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001714:	f7fe fcf6 	bl	8000104 <__udivsi3>
 8001718:	0003      	movs	r3, r0
 800171a:	0019      	movs	r1, r3
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	227f      	movs	r2, #127	@ 0x7f
 8001724:	4013      	ands	r3, r2
 8001726:	434b      	muls	r3, r1
 8001728:	617b      	str	r3, [r7, #20]
        break;
 800172a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800172c:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0f5b      	lsrs	r3, r3, #29
 8001732:	2207      	movs	r2, #7
 8001734:	4013      	ands	r3, r2
 8001736:	3301      	adds	r3, #1
 8001738:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	6978      	ldr	r0, [r7, #20]
 800173e:	f7fe fce1 	bl	8000104 <__udivsi3>
 8001742:	0003      	movs	r3, r0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	e015      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001748:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2238      	movs	r2, #56	@ 0x38
 800174e:	4013      	ands	r3, r2
 8001750:	2b20      	cmp	r3, #32
 8001752:	d103      	bne.n	800175c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001754:	2380      	movs	r3, #128	@ 0x80
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2238      	movs	r2, #56	@ 0x38
 8001762:	4013      	ands	r3, r2
 8001764:	2b18      	cmp	r3, #24
 8001766:	d103      	bne.n	8001770 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001768:	23fa      	movs	r3, #250	@ 0xfa
 800176a:	01db      	lsls	r3, r3, #7
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	e001      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001774:	693b      	ldr	r3, [r7, #16]
}
 8001776:	0018      	movs	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	b006      	add	sp, #24
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	40021000 	.word	0x40021000
 8001784:	00f42400 	.word	0x00f42400
 8001788:	007a1200 	.word	0x007a1200

0800178c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0d9      	b.n	8001952 <HAL_TIM_Base_Init+0x1c6>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a6e      	ldr	r2, [pc, #440]	@ (800195c <HAL_TIM_Base_Init+0x1d0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d020      	beq.n	80017ea <HAL_TIM_Base_Init+0x5e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	05db      	lsls	r3, r3, #23
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d01a      	beq.n	80017ea <HAL_TIM_Base_Init+0x5e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a69      	ldr	r2, [pc, #420]	@ (8001960 <HAL_TIM_Base_Init+0x1d4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d015      	beq.n	80017ea <HAL_TIM_Base_Init+0x5e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a68      	ldr	r2, [pc, #416]	@ (8001964 <HAL_TIM_Base_Init+0x1d8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d010      	beq.n	80017ea <HAL_TIM_Base_Init+0x5e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a66      	ldr	r2, [pc, #408]	@ (8001968 <HAL_TIM_Base_Init+0x1dc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00b      	beq.n	80017ea <HAL_TIM_Base_Init+0x5e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a65      	ldr	r2, [pc, #404]	@ (800196c <HAL_TIM_Base_Init+0x1e0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d006      	beq.n	80017ea <HAL_TIM_Base_Init+0x5e>
 80017dc:	238f      	movs	r3, #143	@ 0x8f
 80017de:	005a      	lsls	r2, r3, #1
 80017e0:	4b63      	ldr	r3, [pc, #396]	@ (8001970 <HAL_TIM_Base_Init+0x1e4>)
 80017e2:	0011      	movs	r1, r2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7fe fdc3 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d017      	beq.n	8001822 <HAL_TIM_Base_Init+0x96>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b10      	cmp	r3, #16
 80017f8:	d013      	beq.n	8001822 <HAL_TIM_Base_Init+0x96>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d00f      	beq.n	8001822 <HAL_TIM_Base_Init+0x96>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b40      	cmp	r3, #64	@ 0x40
 8001808:	d00b      	beq.n	8001822 <HAL_TIM_Base_Init+0x96>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b60      	cmp	r3, #96	@ 0x60
 8001810:	d007      	beq.n	8001822 <HAL_TIM_Base_Init+0x96>
 8001812:	2320      	movs	r3, #32
 8001814:	33ff      	adds	r3, #255	@ 0xff
 8001816:	001a      	movs	r2, r3
 8001818:	4b55      	ldr	r3, [pc, #340]	@ (8001970 <HAL_TIM_Base_Init+0x1e4>)
 800181a:	0011      	movs	r1, r2
 800181c:	0018      	movs	r0, r3
 800181e:	f7fe fda7 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d012      	beq.n	8001850 <HAL_TIM_Base_Init+0xc4>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	429a      	cmp	r2, r3
 8001834:	d00c      	beq.n	8001850 <HAL_TIM_Base_Init+0xc4>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	429a      	cmp	r2, r3
 8001840:	d006      	beq.n	8001850 <HAL_TIM_Base_Init+0xc4>
 8001842:	2390      	movs	r3, #144	@ 0x90
 8001844:	005a      	lsls	r2, r3, #1
 8001846:	4b4a      	ldr	r3, [pc, #296]	@ (8001970 <HAL_TIM_Base_Init+0x1e4>)
 8001848:	0011      	movs	r1, r2
 800184a:	0018      	movs	r0, r3
 800184c:	f7fe fd90 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	05db      	lsls	r3, r3, #23
 8001858:	429a      	cmp	r2, r3
 800185a:	d011      	beq.n	8001880 <HAL_TIM_Base_Init+0xf4>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <HAL_TIM_Base_Init+0xe8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	429a      	cmp	r2, r3
 800186e:	d201      	bcs.n	8001874 <HAL_TIM_Base_Init+0xe8>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <HAL_TIM_Base_Init+0xea>
 8001874:	2300      	movs	r3, #0
 8001876:	1c1a      	adds	r2, r3, #0
 8001878:	2301      	movs	r3, #1
 800187a:	4013      	ands	r3, r2
 800187c:	b2db      	uxtb	r3, r3
 800187e:	e004      	b.n	800188a <HAL_TIM_Base_Init+0xfe>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	4193      	sbcs	r3, r2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d107      	bne.n	800189e <HAL_TIM_Base_Init+0x112>
 800188e:	2322      	movs	r3, #34	@ 0x22
 8001890:	33ff      	adds	r3, #255	@ 0xff
 8001892:	001a      	movs	r2, r3
 8001894:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <HAL_TIM_Base_Init+0x1e4>)
 8001896:	0011      	movs	r1, r2
 8001898:	0018      	movs	r0, r3
 800189a:	f7fe fd69 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00a      	beq.n	80018bc <HAL_TIM_Base_Init+0x130>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b80      	cmp	r3, #128	@ 0x80
 80018ac:	d006      	beq.n	80018bc <HAL_TIM_Base_Init+0x130>
 80018ae:	2391      	movs	r3, #145	@ 0x91
 80018b0:	005a      	lsls	r2, r3, #1
 80018b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001970 <HAL_TIM_Base_Init+0x1e4>)
 80018b4:	0011      	movs	r1, r2
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7fe fd5a 	bl	8000370 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	223d      	movs	r2, #61	@ 0x3d
 80018c0:	5c9b      	ldrb	r3, [r3, r2]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_TIM_Base_Init+0x14c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	223c      	movs	r2, #60	@ 0x3c
 80018cc:	2100      	movs	r1, #0
 80018ce:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 f84e 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	223d      	movs	r2, #61	@ 0x3d
 80018dc:	2102      	movs	r1, #2
 80018de:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3304      	adds	r3, #4
 80018e8:	0019      	movs	r1, r3
 80018ea:	0010      	movs	r0, r2
 80018ec:	f000 ff72 	bl	80027d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2248      	movs	r2, #72	@ 0x48
 80018f4:	2101      	movs	r1, #1
 80018f6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	223e      	movs	r2, #62	@ 0x3e
 80018fc:	2101      	movs	r1, #1
 80018fe:	5499      	strb	r1, [r3, r2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	223f      	movs	r2, #63	@ 0x3f
 8001904:	2101      	movs	r1, #1
 8001906:	5499      	strb	r1, [r3, r2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2240      	movs	r2, #64	@ 0x40
 800190c:	2101      	movs	r1, #1
 800190e:	5499      	strb	r1, [r3, r2]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2241      	movs	r2, #65	@ 0x41
 8001914:	2101      	movs	r1, #1
 8001916:	5499      	strb	r1, [r3, r2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2242      	movs	r2, #66	@ 0x42
 800191c:	2101      	movs	r1, #1
 800191e:	5499      	strb	r1, [r3, r2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2243      	movs	r2, #67	@ 0x43
 8001924:	2101      	movs	r1, #1
 8001926:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2244      	movs	r2, #68	@ 0x44
 800192c:	2101      	movs	r1, #1
 800192e:	5499      	strb	r1, [r3, r2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2245      	movs	r2, #69	@ 0x45
 8001934:	2101      	movs	r1, #1
 8001936:	5499      	strb	r1, [r3, r2]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2246      	movs	r2, #70	@ 0x46
 800193c:	2101      	movs	r1, #1
 800193e:	5499      	strb	r1, [r3, r2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2247      	movs	r2, #71	@ 0x47
 8001944:	2101      	movs	r1, #1
 8001946:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	223d      	movs	r2, #61	@ 0x3d
 800194c:	2101      	movs	r1, #1
 800194e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	40012c00 	.word	0x40012c00
 8001960:	40000400 	.word	0x40000400
 8001964:	40002000 	.word	0x40002000
 8001968:	40014400 	.word	0x40014400
 800196c:	40014800 	.word	0x40014800
 8001970:	080032b4 	.word	0x080032b4

08001974 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b002      	add	sp, #8
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0d2      	b.n	8001b3c <HAL_TIM_PWM_Init+0x1b8>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a6a      	ldr	r2, [pc, #424]	@ (8001b44 <HAL_TIM_PWM_Init+0x1c0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d01f      	beq.n	80019e0 <HAL_TIM_PWM_Init+0x5c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	05db      	lsls	r3, r3, #23
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d019      	beq.n	80019e0 <HAL_TIM_PWM_Init+0x5c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a65      	ldr	r2, [pc, #404]	@ (8001b48 <HAL_TIM_PWM_Init+0x1c4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d014      	beq.n	80019e0 <HAL_TIM_PWM_Init+0x5c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a64      	ldr	r2, [pc, #400]	@ (8001b4c <HAL_TIM_PWM_Init+0x1c8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00f      	beq.n	80019e0 <HAL_TIM_PWM_Init+0x5c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a62      	ldr	r2, [pc, #392]	@ (8001b50 <HAL_TIM_PWM_Init+0x1cc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00a      	beq.n	80019e0 <HAL_TIM_PWM_Init+0x5c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a61      	ldr	r2, [pc, #388]	@ (8001b54 <HAL_TIM_PWM_Init+0x1d0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d005      	beq.n	80019e0 <HAL_TIM_PWM_Init+0x5c>
 80019d4:	4a60      	ldr	r2, [pc, #384]	@ (8001b58 <HAL_TIM_PWM_Init+0x1d4>)
 80019d6:	4b61      	ldr	r3, [pc, #388]	@ (8001b5c <HAL_TIM_PWM_Init+0x1d8>)
 80019d8:	0011      	movs	r1, r2
 80019da:	0018      	movs	r0, r3
 80019dc:	f7fe fcc8 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d015      	beq.n	8001a14 <HAL_TIM_PWM_Init+0x90>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b10      	cmp	r3, #16
 80019ee:	d011      	beq.n	8001a14 <HAL_TIM_PWM_Init+0x90>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d00d      	beq.n	8001a14 <HAL_TIM_PWM_Init+0x90>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b40      	cmp	r3, #64	@ 0x40
 80019fe:	d009      	beq.n	8001a14 <HAL_TIM_PWM_Init+0x90>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b60      	cmp	r3, #96	@ 0x60
 8001a06:	d005      	beq.n	8001a14 <HAL_TIM_PWM_Init+0x90>
 8001a08:	4a55      	ldr	r2, [pc, #340]	@ (8001b60 <HAL_TIM_PWM_Init+0x1dc>)
 8001a0a:	4b54      	ldr	r3, [pc, #336]	@ (8001b5c <HAL_TIM_PWM_Init+0x1d8>)
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7fe fcae 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d011      	beq.n	8001a40 <HAL_TIM_PWM_Init+0xbc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d00b      	beq.n	8001a40 <HAL_TIM_PWM_Init+0xbc>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d005      	beq.n	8001a40 <HAL_TIM_PWM_Init+0xbc>
 8001a34:	4a4b      	ldr	r2, [pc, #300]	@ (8001b64 <HAL_TIM_PWM_Init+0x1e0>)
 8001a36:	4b49      	ldr	r3, [pc, #292]	@ (8001b5c <HAL_TIM_PWM_Init+0x1d8>)
 8001a38:	0011      	movs	r1, r2
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7fe fc98 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	@ 0x80
 8001a46:	05db      	lsls	r3, r3, #23
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d011      	beq.n	8001a70 <HAL_TIM_PWM_Init+0xec>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_TIM_PWM_Init+0xe0>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	025b      	lsls	r3, r3, #9
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d201      	bcs.n	8001a64 <HAL_TIM_PWM_Init+0xe0>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_TIM_PWM_Init+0xe2>
 8001a64:	2300      	movs	r3, #0
 8001a66:	1c1a      	adds	r2, r3, #0
 8001a68:	2301      	movs	r3, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	e004      	b.n	8001a7a <HAL_TIM_PWM_Init+0xf6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	1e5a      	subs	r2, r3, #1
 8001a76:	4193      	sbcs	r3, r2
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d105      	bne.n	8001a8a <HAL_TIM_PWM_Init+0x106>
 8001a7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b68 <HAL_TIM_PWM_Init+0x1e4>)
 8001a80:	4b36      	ldr	r3, [pc, #216]	@ (8001b5c <HAL_TIM_PWM_Init+0x1d8>)
 8001a82:	0011      	movs	r1, r2
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7fe fc73 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_TIM_PWM_Init+0x122>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b80      	cmp	r3, #128	@ 0x80
 8001a98:	d005      	beq.n	8001aa6 <HAL_TIM_PWM_Init+0x122>
 8001a9a:	4a34      	ldr	r2, [pc, #208]	@ (8001b6c <HAL_TIM_PWM_Init+0x1e8>)
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <HAL_TIM_PWM_Init+0x1d8>)
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7fe fc65 	bl	8000370 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	223d      	movs	r2, #61	@ 0x3d
 8001aaa:	5c9b      	ldrb	r3, [r3, r2]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d107      	bne.n	8001ac2 <HAL_TIM_PWM_Init+0x13e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	223c      	movs	r2, #60	@ 0x3c
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 f857 	bl	8001b70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	223d      	movs	r2, #61	@ 0x3d
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	0010      	movs	r0, r2
 8001ad6:	f000 fe7d 	bl	80027d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2248      	movs	r2, #72	@ 0x48
 8001ade:	2101      	movs	r1, #1
 8001ae0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	223e      	movs	r2, #62	@ 0x3e
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	223f      	movs	r2, #63	@ 0x3f
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2240      	movs	r2, #64	@ 0x40
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2241      	movs	r2, #65	@ 0x41
 8001afe:	2101      	movs	r1, #1
 8001b00:	5499      	strb	r1, [r3, r2]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2242      	movs	r2, #66	@ 0x42
 8001b06:	2101      	movs	r1, #1
 8001b08:	5499      	strb	r1, [r3, r2]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2243      	movs	r2, #67	@ 0x43
 8001b0e:	2101      	movs	r1, #1
 8001b10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2244      	movs	r2, #68	@ 0x44
 8001b16:	2101      	movs	r1, #1
 8001b18:	5499      	strb	r1, [r3, r2]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2245      	movs	r2, #69	@ 0x45
 8001b1e:	2101      	movs	r1, #1
 8001b20:	5499      	strb	r1, [r3, r2]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2246      	movs	r2, #70	@ 0x46
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2247      	movs	r2, #71	@ 0x47
 8001b2e:	2101      	movs	r1, #1
 8001b30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	223d      	movs	r2, #61	@ 0x3d
 8001b36:	2101      	movs	r1, #1
 8001b38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b002      	add	sp, #8
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40012c00 	.word	0x40012c00
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40002000 	.word	0x40002000
 8001b50:	40014400 	.word	0x40014400
 8001b54:	40014800 	.word	0x40014800
 8001b58:	0000053b 	.word	0x0000053b
 8001b5c:	080032b4 	.word	0x080032b4
 8001b60:	0000053c 	.word	0x0000053c
 8001b64:	0000053d 	.word	0x0000053d
 8001b68:	0000053e 	.word	0x0000053e
 8001b6c:	0000053f 	.word	0x0000053f

08001b70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b78:	46c0      	nop			@ (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a92      	ldr	r2, [pc, #584]	@ (8001dd8 <HAL_TIM_PWM_Start+0x258>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d111      	bne.n	8001bb8 <HAL_TIM_PWM_Start+0x38>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d04f      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d04c      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d049      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d046      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d043      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b14      	cmp	r3, #20
 8001bb6:	d040      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	05db      	lsls	r3, r3, #23
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d10b      	bne.n	8001bdc <HAL_TIM_PWM_Start+0x5c>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d037      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d034      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d031      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b0c      	cmp	r3, #12
 8001bda:	d02e      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a7e      	ldr	r2, [pc, #504]	@ (8001ddc <HAL_TIM_PWM_Start+0x25c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10b      	bne.n	8001bfe <HAL_TIM_PWM_Start+0x7e>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d026      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d023      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d020      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d01d      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a77      	ldr	r2, [pc, #476]	@ (8001de0 <HAL_TIM_PWM_Start+0x260>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d102      	bne.n	8001c0e <HAL_TIM_PWM_Start+0x8e>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d015      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a74      	ldr	r2, [pc, #464]	@ (8001de4 <HAL_TIM_PWM_Start+0x264>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d102      	bne.n	8001c1e <HAL_TIM_PWM_Start+0x9e>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00d      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a71      	ldr	r2, [pc, #452]	@ (8001de8 <HAL_TIM_PWM_Start+0x268>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d102      	bne.n	8001c2e <HAL_TIM_PWM_Start+0xae>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_TIM_PWM_Start+0xba>
 8001c2e:	4a6f      	ldr	r2, [pc, #444]	@ (8001dec <HAL_TIM_PWM_Start+0x26c>)
 8001c30:	4b6f      	ldr	r3, [pc, #444]	@ (8001df0 <HAL_TIM_PWM_Start+0x270>)
 8001c32:	0011      	movs	r1, r2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7fe fb9b 	bl	8000370 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d108      	bne.n	8001c52 <HAL_TIM_PWM_Start+0xd2>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	223e      	movs	r2, #62	@ 0x3e
 8001c44:	5c9b      	ldrb	r3, [r3, r2]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	1e5a      	subs	r2, r3, #1
 8001c4c:	4193      	sbcs	r3, r2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	e037      	b.n	8001cc2 <HAL_TIM_PWM_Start+0x142>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d108      	bne.n	8001c6a <HAL_TIM_PWM_Start+0xea>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	223f      	movs	r2, #63	@ 0x3f
 8001c5c:	5c9b      	ldrb	r3, [r3, r2]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	1e5a      	subs	r2, r3, #1
 8001c64:	4193      	sbcs	r3, r2
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	e02b      	b.n	8001cc2 <HAL_TIM_PWM_Start+0x142>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d108      	bne.n	8001c82 <HAL_TIM_PWM_Start+0x102>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2240      	movs	r2, #64	@ 0x40
 8001c74:	5c9b      	ldrb	r3, [r3, r2]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	1e5a      	subs	r2, r3, #1
 8001c7c:	4193      	sbcs	r3, r2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	e01f      	b.n	8001cc2 <HAL_TIM_PWM_Start+0x142>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d108      	bne.n	8001c9a <HAL_TIM_PWM_Start+0x11a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2241      	movs	r2, #65	@ 0x41
 8001c8c:	5c9b      	ldrb	r3, [r3, r2]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	1e5a      	subs	r2, r3, #1
 8001c94:	4193      	sbcs	r3, r2
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	e013      	b.n	8001cc2 <HAL_TIM_PWM_Start+0x142>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d108      	bne.n	8001cb2 <HAL_TIM_PWM_Start+0x132>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2242      	movs	r2, #66	@ 0x42
 8001ca4:	5c9b      	ldrb	r3, [r3, r2]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	1e5a      	subs	r2, r3, #1
 8001cac:	4193      	sbcs	r3, r2
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	e007      	b.n	8001cc2 <HAL_TIM_PWM_Start+0x142>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2243      	movs	r2, #67	@ 0x43
 8001cb6:	5c9b      	ldrb	r3, [r3, r2]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	1e5a      	subs	r2, r3, #1
 8001cbe:	4193      	sbcs	r3, r2
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_TIM_PWM_Start+0x14a>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e081      	b.n	8001dce <HAL_TIM_PWM_Start+0x24e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <HAL_TIM_PWM_Start+0x15a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	223e      	movs	r2, #62	@ 0x3e
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	5499      	strb	r1, [r3, r2]
 8001cd8:	e023      	b.n	8001d22 <HAL_TIM_PWM_Start+0x1a2>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d104      	bne.n	8001cea <HAL_TIM_PWM_Start+0x16a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	223f      	movs	r2, #63	@ 0x3f
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	5499      	strb	r1, [r3, r2]
 8001ce8:	e01b      	b.n	8001d22 <HAL_TIM_PWM_Start+0x1a2>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d104      	bne.n	8001cfa <HAL_TIM_PWM_Start+0x17a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2240      	movs	r2, #64	@ 0x40
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	5499      	strb	r1, [r3, r2]
 8001cf8:	e013      	b.n	8001d22 <HAL_TIM_PWM_Start+0x1a2>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b0c      	cmp	r3, #12
 8001cfe:	d104      	bne.n	8001d0a <HAL_TIM_PWM_Start+0x18a>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2241      	movs	r2, #65	@ 0x41
 8001d04:	2102      	movs	r1, #2
 8001d06:	5499      	strb	r1, [r3, r2]
 8001d08:	e00b      	b.n	8001d22 <HAL_TIM_PWM_Start+0x1a2>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d104      	bne.n	8001d1a <HAL_TIM_PWM_Start+0x19a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2242      	movs	r2, #66	@ 0x42
 8001d14:	2102      	movs	r1, #2
 8001d16:	5499      	strb	r1, [r3, r2]
 8001d18:	e003      	b.n	8001d22 <HAL_TIM_PWM_Start+0x1a2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2243      	movs	r2, #67	@ 0x43
 8001d1e:	2102      	movs	r1, #2
 8001d20:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f001 f9c4 	bl	80030b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a28      	ldr	r2, [pc, #160]	@ (8001dd8 <HAL_TIM_PWM_Start+0x258>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d009      	beq.n	8001d4e <HAL_TIM_PWM_Start+0x1ce>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a29      	ldr	r2, [pc, #164]	@ (8001de4 <HAL_TIM_PWM_Start+0x264>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d004      	beq.n	8001d4e <HAL_TIM_PWM_Start+0x1ce>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a27      	ldr	r2, [pc, #156]	@ (8001de8 <HAL_TIM_PWM_Start+0x268>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_PWM_Start+0x1d2>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_TIM_PWM_Start+0x1d4>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_TIM_PWM_Start+0x1ea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2180      	movs	r1, #128	@ 0x80
 8001d64:	0209      	lsls	r1, r1, #8
 8001d66:	430a      	orrs	r2, r1
 8001d68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd8 <HAL_TIM_PWM_Start+0x258>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00a      	beq.n	8001d8a <HAL_TIM_PWM_Start+0x20a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	05db      	lsls	r3, r3, #23
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d004      	beq.n	8001d8a <HAL_TIM_PWM_Start+0x20a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a15      	ldr	r2, [pc, #84]	@ (8001ddc <HAL_TIM_PWM_Start+0x25c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d116      	bne.n	8001db8 <HAL_TIM_PWM_Start+0x238>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a18      	ldr	r2, [pc, #96]	@ (8001df4 <HAL_TIM_PWM_Start+0x274>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b06      	cmp	r3, #6
 8001d9a:	d016      	beq.n	8001dca <HAL_TIM_PWM_Start+0x24a>
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	025b      	lsls	r3, r3, #9
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d011      	beq.n	8001dca <HAL_TIM_PWM_Start+0x24a>
    {
      __HAL_TIM_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db6:	e008      	b.n	8001dca <HAL_TIM_PWM_Start+0x24a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e000      	b.n	8001dcc <HAL_TIM_PWM_Start+0x24c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dca:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b004      	add	sp, #16
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40002000 	.word	0x40002000
 8001de4:	40014400 	.word	0x40014400
 8001de8:	40014800 	.word	0x40014800
 8001dec:	000005c4 	.word	0x000005c4
 8001df0:	080032b4 	.word	0x080032b4
 8001df4:	00010007 	.word	0x00010007

08001df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e04:	2317      	movs	r3, #23
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d017      	beq.n	8001e42 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d014      	beq.n	8001e42 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d011      	beq.n	8001e42 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	d00e      	beq.n	8001e42 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d00b      	beq.n	8001e42 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b14      	cmp	r3, #20
 8001e2e:	d008      	beq.n	8001e42 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b3c      	cmp	r3, #60	@ 0x3c
 8001e34:	d005      	beq.n	8001e42 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001e36:	4ad1      	ldr	r2, [pc, #836]	@ (800217c <HAL_TIM_PWM_ConfigChannel+0x384>)
 8001e38:	4bd1      	ldr	r3, [pc, #836]	@ (8002180 <HAL_TIM_PWM_ConfigChannel+0x388>)
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7fe fa97 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b60      	cmp	r3, #96	@ 0x60
 8001e48:	d01d      	beq.n	8001e86 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b70      	cmp	r3, #112	@ 0x70
 8001e50:	d019      	beq.n	8001e86 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4acb      	ldr	r2, [pc, #812]	@ (8002184 <HAL_TIM_PWM_ConfigChannel+0x38c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d014      	beq.n	8001e86 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4ac9      	ldr	r2, [pc, #804]	@ (8002188 <HAL_TIM_PWM_ConfigChannel+0x390>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00f      	beq.n	8001e86 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4ac8      	ldr	r2, [pc, #800]	@ (800218c <HAL_TIM_PWM_ConfigChannel+0x394>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00a      	beq.n	8001e86 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4ac6      	ldr	r2, [pc, #792]	@ (8002190 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d005      	beq.n	8001e86 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8001e7a:	4ac6      	ldr	r2, [pc, #792]	@ (8002194 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8001e7c:	4bc0      	ldr	r3, [pc, #768]	@ (8002180 <HAL_TIM_PWM_ConfigChannel+0x388>)
 8001e7e:	0011      	movs	r1, r2
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7fe fa75 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d005      	beq.n	8001ea2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8001e96:	4ac0      	ldr	r2, [pc, #768]	@ (8002198 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8001e98:	4bb9      	ldr	r3, [pc, #740]	@ (8002180 <HAL_TIM_PWM_ConfigChannel+0x388>)
 8001e9a:	0011      	movs	r1, r2
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7fe fa67 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_TIM_PWM_ConfigChannel+0xc6>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d005      	beq.n	8001ebe <HAL_TIM_PWM_ConfigChannel+0xc6>
 8001eb2:	4aba      	ldr	r2, [pc, #744]	@ (800219c <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8001eb4:	4bb2      	ldr	r3, [pc, #712]	@ (8002180 <HAL_TIM_PWM_ConfigChannel+0x388>)
 8001eb6:	0011      	movs	r1, r2
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7fe fa59 	bl	8000370 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	223c      	movs	r2, #60	@ 0x3c
 8001ec2:	5c9b      	ldrb	r3, [r3, r2]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_TIM_PWM_ConfigChannel+0xd4>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e18f      	b.n	80021ec <HAL_TIM_PWM_ConfigChannel+0x3f4>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	223c      	movs	r2, #60	@ 0x3c
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b14      	cmp	r3, #20
 8001ed8:	d900      	bls.n	8001edc <HAL_TIM_PWM_ConfigChannel+0xe4>
 8001eda:	e17b      	b.n	80021d4 <HAL_TIM_PWM_ConfigChannel+0x3dc>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	009a      	lsls	r2, r3, #2
 8001ee0:	4baf      	ldr	r3, [pc, #700]	@ (80021a0 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8001ee2:	18d3      	adds	r3, r2, r3
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	469f      	mov	pc, r3
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4aad      	ldr	r2, [pc, #692]	@ (80021a4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01f      	beq.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	@ 0x80
 8001ef8:	05db      	lsls	r3, r3, #23
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d019      	beq.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4aa9      	ldr	r2, [pc, #676]	@ (80021a8 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d014      	beq.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4aa7      	ldr	r2, [pc, #668]	@ (80021ac <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00f      	beq.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4aa6      	ldr	r2, [pc, #664]	@ (80021b0 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00a      	beq.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4aa4      	ldr	r2, [pc, #656]	@ (80021b4 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d005      	beq.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8001f26:	4aa4      	ldr	r2, [pc, #656]	@ (80021b8 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 8001f28:	4b95      	ldr	r3, [pc, #596]	@ (8002180 <HAL_TIM_PWM_ConfigChannel+0x388>)
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7fe fa1f 	bl	8000370 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	0011      	movs	r1, r2
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 fcce 	bl	80028dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6999      	ldr	r1, [r3, #24]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	619a      	str	r2, [r3, #24]
      break;
 8001f72:	e134      	b.n	80021de <HAL_TIM_PWM_ConfigChannel+0x3e6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a8a      	ldr	r2, [pc, #552]	@ (80021a4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d010      	beq.n	8001fa0 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	05db      	lsls	r3, r3, #23
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d00a      	beq.n	8001fa0 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a86      	ldr	r2, [pc, #536]	@ (80021a8 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d005      	beq.n	8001fa0 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8001f94:	4a89      	ldr	r2, [pc, #548]	@ (80021bc <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8001f96:	4b7a      	ldr	r3, [pc, #488]	@ (8002180 <HAL_TIM_PWM_ConfigChannel+0x388>)
 8001f98:	0011      	movs	r1, r2
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7fe f9e8 	bl	8000370 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 fd4d 	bl	8002a48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2180      	movs	r1, #128	@ 0x80
 8001fba:	0109      	lsls	r1, r1, #4
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	497d      	ldr	r1, [pc, #500]	@ (80021c0 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6999      	ldr	r1, [r3, #24]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	021a      	lsls	r2, r3, #8
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	619a      	str	r2, [r3, #24]
      break;
 8001fe4:	e0fb      	b.n	80021de <HAL_TIM_PWM_ConfigChannel+0x3e6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6e      	ldr	r2, [pc, #440]	@ (80021a4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d010      	beq.n	8002012 <HAL_TIM_PWM_ConfigChannel+0x21a>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	05db      	lsls	r3, r3, #23
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d00a      	beq.n	8002012 <HAL_TIM_PWM_ConfigChannel+0x21a>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a69      	ldr	r2, [pc, #420]	@ (80021a8 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d005      	beq.n	8002012 <HAL_TIM_PWM_ConfigChannel+0x21a>
 8002006:	4a6f      	ldr	r2, [pc, #444]	@ (80021c4 <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 8002008:	4b5d      	ldr	r3, [pc, #372]	@ (8002180 <HAL_TIM_PWM_ConfigChannel+0x388>)
 800200a:	0011      	movs	r1, r2
 800200c:	0018      	movs	r0, r3
 800200e:	f7fe f9af 	bl	8000370 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	0011      	movs	r1, r2
 800201a:	0018      	movs	r0, r3
 800201c:	f000 fdc8 	bl	8002bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2108      	movs	r1, #8
 800202c:	430a      	orrs	r2, r1
 800202e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2104      	movs	r1, #4
 800203c:	438a      	bics	r2, r1
 800203e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69d9      	ldr	r1, [r3, #28]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	61da      	str	r2, [r3, #28]
      break;
 8002052:	e0c4      	b.n	80021de <HAL_TIM_PWM_ConfigChannel+0x3e6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a52      	ldr	r2, [pc, #328]	@ (80021a4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d010      	beq.n	8002080 <HAL_TIM_PWM_ConfigChannel+0x288>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	05db      	lsls	r3, r3, #23
 8002066:	429a      	cmp	r2, r3
 8002068:	d00a      	beq.n	8002080 <HAL_TIM_PWM_ConfigChannel+0x288>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a4e      	ldr	r2, [pc, #312]	@ (80021a8 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d005      	beq.n	8002080 <HAL_TIM_PWM_ConfigChannel+0x288>
 8002074:	4a54      	ldr	r2, [pc, #336]	@ (80021c8 <HAL_TIM_PWM_ConfigChannel+0x3d0>)
 8002076:	4b42      	ldr	r3, [pc, #264]	@ (8002180 <HAL_TIM_PWM_ConfigChannel+0x388>)
 8002078:	0011      	movs	r1, r2
 800207a:	0018      	movs	r0, r3
 800207c:	f7fe f978 	bl	8000370 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	0011      	movs	r1, r2
 8002088:	0018      	movs	r0, r3
 800208a:	f000 fe49 	bl	8002d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2180      	movs	r1, #128	@ 0x80
 800209a:	0109      	lsls	r1, r1, #4
 800209c:	430a      	orrs	r2, r1
 800209e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4945      	ldr	r1, [pc, #276]	@ (80021c0 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69d9      	ldr	r1, [r3, #28]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	021a      	lsls	r2, r3, #8
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	61da      	str	r2, [r3, #28]
      break;
 80020c4:	e08b      	b.n	80021de <HAL_TIM_PWM_ConfigChannel+0x3e6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a36      	ldr	r2, [pc, #216]	@ (80021a4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d005      	beq.n	80020dc <HAL_TIM_PWM_ConfigChannel+0x2e4>
 80020d0:	4a3e      	ldr	r2, [pc, #248]	@ (80021cc <HAL_TIM_PWM_ConfigChannel+0x3d4>)
 80020d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002180 <HAL_TIM_PWM_ConfigChannel+0x388>)
 80020d4:	0011      	movs	r1, r2
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7fe f94a 	bl	8000370 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	0011      	movs	r1, r2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fe93 	bl	8002e10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2108      	movs	r1, #8
 80020f6:	430a      	orrs	r2, r1
 80020f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2104      	movs	r1, #4
 8002106:	438a      	bics	r2, r1
 8002108:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800211c:	e05f      	b.n	80021de <HAL_TIM_PWM_ConfigChannel+0x3e6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a20      	ldr	r2, [pc, #128]	@ (80021a4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d005      	beq.n	8002134 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8002128:	4a29      	ldr	r2, [pc, #164]	@ (80021d0 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <HAL_TIM_PWM_ConfigChannel+0x388>)
 800212c:	0011      	movs	r1, r2
 800212e:	0018      	movs	r0, r3
 8002130:	f7fe f91e 	bl	8000370 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	0011      	movs	r1, r2
 800213c:	0018      	movs	r0, r3
 800213e:	f000 fec1 	bl	8002ec4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2180      	movs	r1, #128	@ 0x80
 800214e:	0109      	lsls	r1, r1, #4
 8002150:	430a      	orrs	r2, r1
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4918      	ldr	r1, [pc, #96]	@ (80021c0 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 8002160:	400a      	ands	r2, r1
 8002162:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	021a      	lsls	r2, r3, #8
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002178:	e031      	b.n	80021de <HAL_TIM_PWM_ConfigChannel+0x3e6>
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	000010bb 	.word	0x000010bb
 8002180:	080032b4 	.word	0x080032b4
 8002184:	00010040 	.word	0x00010040
 8002188:	00010050 	.word	0x00010050
 800218c:	00010060 	.word	0x00010060
 8002190:	00010070 	.word	0x00010070
 8002194:	000010bc 	.word	0x000010bc
 8002198:	000010bd 	.word	0x000010bd
 800219c:	000010be 	.word	0x000010be
 80021a0:	0800332c 	.word	0x0800332c
 80021a4:	40012c00 	.word	0x40012c00
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40002000 	.word	0x40002000
 80021b0:	40014400 	.word	0x40014400
 80021b4:	40014800 	.word	0x40014800
 80021b8:	000010c8 	.word	0x000010c8
 80021bc:	000010d9 	.word	0x000010d9
 80021c0:	fffffbff 	.word	0xfffffbff
 80021c4:	000010ea 	.word	0x000010ea
 80021c8:	000010fb 	.word	0x000010fb
 80021cc:	0000110c 	.word	0x0000110c
 80021d0:	0000111d 	.word	0x0000111d
    }

    default:
      status = HAL_ERROR;
 80021d4:	2317      	movs	r3, #23
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
      break;
 80021dc:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	223c      	movs	r2, #60	@ 0x3c
 80021e2:	2100      	movs	r1, #0
 80021e4:	5499      	strb	r1, [r3, r2]

  return status;
 80021e6:	2317      	movs	r3, #23
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	781b      	ldrb	r3, [r3, #0]
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b006      	add	sp, #24
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fe:	230f      	movs	r3, #15
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	223c      	movs	r2, #60	@ 0x3c
 800220a:	5c9b      	ldrb	r3, [r3, r2]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_TIM_ConfigClockSource+0x20>
 8002210:	2302      	movs	r3, #2
 8002212:	e2c1      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x5a4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	223c      	movs	r2, #60	@ 0x3c
 8002218:	2101      	movs	r1, #1
 800221a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	223d      	movs	r2, #61	@ 0x3d
 8002220:	2102      	movs	r1, #2
 8002222:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	015b      	lsls	r3, r3, #5
 800222c:	429a      	cmp	r2, r3
 800222e:	d02b      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b70      	cmp	r3, #112	@ 0x70
 8002236:	d027      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	019b      	lsls	r3, r3, #6
 8002240:	429a      	cmp	r2, r3
 8002242:	d021      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b40      	cmp	r3, #64	@ 0x40
 800224a:	d01d      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b50      	cmp	r3, #80	@ 0x50
 8002252:	d019      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b60      	cmp	r3, #96	@ 0x60
 800225a:	d015      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d011      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b10      	cmp	r3, #16
 800226a:	d00d      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b20      	cmp	r3, #32
 8002272:	d009      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b30      	cmp	r3, #48	@ 0x30
 800227a:	d005      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x94>
 800227c:	4aaa      	ldr	r2, [pc, #680]	@ (8002528 <HAL_TIM_ConfigClockSource+0x334>)
 800227e:	4bab      	ldr	r3, [pc, #684]	@ (800252c <HAL_TIM_ConfigClockSource+0x338>)
 8002280:	0011      	movs	r1, r2
 8002282:	0018      	movs	r0, r3
 8002284:	f7fe f874 	bl	8000370 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4aa7      	ldr	r2, [pc, #668]	@ (8002530 <HAL_TIM_ConfigClockSource+0x33c>)
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4aa6      	ldr	r2, [pc, #664]	@ (8002534 <HAL_TIM_ConfigClockSource+0x340>)
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2280      	movs	r2, #128	@ 0x80
 80022ae:	0192      	lsls	r2, r2, #6
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d100      	bne.n	80022b6 <HAL_TIM_ConfigClockSource+0xc2>
 80022b4:	e0cc      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x25c>
 80022b6:	2280      	movs	r2, #128	@ 0x80
 80022b8:	0192      	lsls	r2, r2, #6
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d900      	bls.n	80022c0 <HAL_TIM_ConfigClockSource+0xcc>
 80022be:	e25a      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x582>
 80022c0:	2280      	movs	r2, #128	@ 0x80
 80022c2:	0152      	lsls	r2, r2, #5
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d028      	beq.n	800231a <HAL_TIM_ConfigClockSource+0x126>
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	0152      	lsls	r2, r2, #5
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d900      	bls.n	80022d2 <HAL_TIM_ConfigClockSource+0xde>
 80022d0:	e251      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x582>
 80022d2:	2b70      	cmp	r3, #112	@ 0x70
 80022d4:	d04d      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x17e>
 80022d6:	d900      	bls.n	80022da <HAL_TIM_ConfigClockSource+0xe6>
 80022d8:	e24d      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x582>
 80022da:	2b60      	cmp	r3, #96	@ 0x60
 80022dc:	d100      	bne.n	80022e0 <HAL_TIM_ConfigClockSource+0xec>
 80022de:	e193      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x414>
 80022e0:	d900      	bls.n	80022e4 <HAL_TIM_ConfigClockSource+0xf0>
 80022e2:	e248      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x582>
 80022e4:	2b50      	cmp	r3, #80	@ 0x50
 80022e6:	d100      	bne.n	80022ea <HAL_TIM_ConfigClockSource+0xf6>
 80022e8:	e142      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x37c>
 80022ea:	d900      	bls.n	80022ee <HAL_TIM_ConfigClockSource+0xfa>
 80022ec:	e243      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x582>
 80022ee:	2b40      	cmp	r3, #64	@ 0x40
 80022f0:	d100      	bne.n	80022f4 <HAL_TIM_ConfigClockSource+0x100>
 80022f2:	e1d5      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x4ac>
 80022f4:	d900      	bls.n	80022f8 <HAL_TIM_ConfigClockSource+0x104>
 80022f6:	e23e      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x582>
 80022f8:	2b30      	cmp	r3, #48	@ 0x30
 80022fa:	d100      	bne.n	80022fe <HAL_TIM_ConfigClockSource+0x10a>
 80022fc:	e21c      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x544>
 80022fe:	d900      	bls.n	8002302 <HAL_TIM_ConfigClockSource+0x10e>
 8002300:	e239      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x582>
 8002302:	2b20      	cmp	r3, #32
 8002304:	d100      	bne.n	8002308 <HAL_TIM_ConfigClockSource+0x114>
 8002306:	e217      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x544>
 8002308:	d900      	bls.n	800230c <HAL_TIM_ConfigClockSource+0x118>
 800230a:	e234      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x582>
 800230c:	2b00      	cmp	r3, #0
 800230e:	d100      	bne.n	8002312 <HAL_TIM_ConfigClockSource+0x11e>
 8002310:	e212      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x544>
 8002312:	2b10      	cmp	r3, #16
 8002314:	d100      	bne.n	8002318 <HAL_TIM_ConfigClockSource+0x124>
 8002316:	e20f      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x544>
 8002318:	e22d      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x582>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a86      	ldr	r2, [pc, #536]	@ (8002538 <HAL_TIM_ConfigClockSource+0x344>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d100      	bne.n	8002326 <HAL_TIM_ConfigClockSource+0x132>
 8002324:	e22c      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x58c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	05db      	lsls	r3, r3, #23
 800232e:	429a      	cmp	r2, r3
 8002330:	d100      	bne.n	8002334 <HAL_TIM_ConfigClockSource+0x140>
 8002332:	e225      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x58c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a80      	ldr	r2, [pc, #512]	@ (800253c <HAL_TIM_ConfigClockSource+0x348>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d100      	bne.n	8002340 <HAL_TIM_ConfigClockSource+0x14c>
 800233e:	e21f      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x58c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a7e      	ldr	r2, [pc, #504]	@ (8002540 <HAL_TIM_ConfigClockSource+0x34c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d100      	bne.n	800234c <HAL_TIM_ConfigClockSource+0x158>
 800234a:	e219      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x58c>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a7c      	ldr	r2, [pc, #496]	@ (8002544 <HAL_TIM_ConfigClockSource+0x350>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d100      	bne.n	8002358 <HAL_TIM_ConfigClockSource+0x164>
 8002356:	e213      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x58c>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a7a      	ldr	r2, [pc, #488]	@ (8002548 <HAL_TIM_ConfigClockSource+0x354>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d100      	bne.n	8002364 <HAL_TIM_ConfigClockSource+0x170>
 8002362:	e20d      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x58c>
 8002364:	4a79      	ldr	r2, [pc, #484]	@ (800254c <HAL_TIM_ConfigClockSource+0x358>)
 8002366:	4b71      	ldr	r3, [pc, #452]	@ (800252c <HAL_TIM_ConfigClockSource+0x338>)
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f7fe f800 	bl	8000370 <assert_failed>
      break;
 8002370:	e206      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x58c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a70      	ldr	r2, [pc, #448]	@ (8002538 <HAL_TIM_ConfigClockSource+0x344>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d010      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x1aa>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	@ 0x80
 8002382:	05db      	lsls	r3, r3, #23
 8002384:	429a      	cmp	r2, r3
 8002386:	d00a      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x1aa>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6b      	ldr	r2, [pc, #428]	@ (800253c <HAL_TIM_ConfigClockSource+0x348>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d005      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x1aa>
 8002392:	4a6f      	ldr	r2, [pc, #444]	@ (8002550 <HAL_TIM_ConfigClockSource+0x35c>)
 8002394:	4b65      	ldr	r3, [pc, #404]	@ (800252c <HAL_TIM_ConfigClockSource+0x338>)
 8002396:	0011      	movs	r1, r2
 8002398:	0018      	movs	r0, r3
 800239a:	f7fd ffe9 	bl	8000370 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d017      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0x1e2>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	015b      	lsls	r3, r3, #5
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d011      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0x1e2>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	019b      	lsls	r3, r3, #6
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d00b      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0x1e2>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	23c0      	movs	r3, #192	@ 0xc0
 80023c4:	019b      	lsls	r3, r3, #6
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d005      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0x1e2>
 80023ca:	4a62      	ldr	r2, [pc, #392]	@ (8002554 <HAL_TIM_ConfigClockSource+0x360>)
 80023cc:	4b57      	ldr	r3, [pc, #348]	@ (800252c <HAL_TIM_ConfigClockSource+0x338>)
 80023ce:	0011      	movs	r1, r2
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7fd ffcd 	bl	8000370 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	2380      	movs	r3, #128	@ 0x80
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	429a      	cmp	r2, r3
 80023e0:	d015      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x21a>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d011      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x21a>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00d      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x21a>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d009      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x21a>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b0a      	cmp	r3, #10
 8002400:	d005      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x21a>
 8002402:	4a55      	ldr	r2, [pc, #340]	@ (8002558 <HAL_TIM_ConfigClockSource+0x364>)
 8002404:	4b49      	ldr	r3, [pc, #292]	@ (800252c <HAL_TIM_ConfigClockSource+0x338>)
 8002406:	0011      	movs	r1, r2
 8002408:	0018      	movs	r0, r3
 800240a:	f7fd ffb1 	bl	8000370 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	d905      	bls.n	8002422 <HAL_TIM_ConfigClockSource+0x22e>
 8002416:	4a51      	ldr	r2, [pc, #324]	@ (800255c <HAL_TIM_ConfigClockSource+0x368>)
 8002418:	4b44      	ldr	r3, [pc, #272]	@ (800252c <HAL_TIM_ConfigClockSource+0x338>)
 800241a:	0011      	movs	r1, r2
 800241c:	0018      	movs	r0, r3
 800241e:	f7fd ffa7 	bl	8000370 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002432:	f000 fe21 	bl	8003078 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2277      	movs	r2, #119	@ 0x77
 8002442:	4313      	orrs	r3, r2
 8002444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	609a      	str	r2, [r3, #8]
      break;
 800244e:	e198      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x58e>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a38      	ldr	r2, [pc, #224]	@ (8002538 <HAL_TIM_ConfigClockSource+0x344>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d010      	beq.n	800247c <HAL_TIM_ConfigClockSource+0x288>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	05db      	lsls	r3, r3, #23
 8002462:	429a      	cmp	r2, r3
 8002464:	d00a      	beq.n	800247c <HAL_TIM_ConfigClockSource+0x288>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a34      	ldr	r2, [pc, #208]	@ (800253c <HAL_TIM_ConfigClockSource+0x348>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d005      	beq.n	800247c <HAL_TIM_ConfigClockSource+0x288>
 8002470:	4a3b      	ldr	r2, [pc, #236]	@ (8002560 <HAL_TIM_ConfigClockSource+0x36c>)
 8002472:	4b2e      	ldr	r3, [pc, #184]	@ (800252c <HAL_TIM_ConfigClockSource+0x338>)
 8002474:	0011      	movs	r1, r2
 8002476:	0018      	movs	r0, r3
 8002478:	f7fd ff7a 	bl	8000370 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d017      	beq.n	80024b4 <HAL_TIM_ConfigClockSource+0x2c0>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	2380      	movs	r3, #128	@ 0x80
 800248a:	015b      	lsls	r3, r3, #5
 800248c:	429a      	cmp	r2, r3
 800248e:	d011      	beq.n	80024b4 <HAL_TIM_ConfigClockSource+0x2c0>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	2380      	movs	r3, #128	@ 0x80
 8002496:	019b      	lsls	r3, r3, #6
 8002498:	429a      	cmp	r2, r3
 800249a:	d00b      	beq.n	80024b4 <HAL_TIM_ConfigClockSource+0x2c0>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	23c0      	movs	r3, #192	@ 0xc0
 80024a2:	019b      	lsls	r3, r3, #6
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d005      	beq.n	80024b4 <HAL_TIM_ConfigClockSource+0x2c0>
 80024a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002564 <HAL_TIM_ConfigClockSource+0x370>)
 80024aa:	4b20      	ldr	r3, [pc, #128]	@ (800252c <HAL_TIM_ConfigClockSource+0x338>)
 80024ac:	0011      	movs	r1, r2
 80024ae:	0018      	movs	r0, r3
 80024b0:	f7fd ff5e 	bl	8000370 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	429a      	cmp	r2, r3
 80024be:	d015      	beq.n	80024ec <HAL_TIM_ConfigClockSource+0x2f8>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d011      	beq.n	80024ec <HAL_TIM_ConfigClockSource+0x2f8>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00d      	beq.n	80024ec <HAL_TIM_ConfigClockSource+0x2f8>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d009      	beq.n	80024ec <HAL_TIM_ConfigClockSource+0x2f8>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b0a      	cmp	r3, #10
 80024de:	d005      	beq.n	80024ec <HAL_TIM_ConfigClockSource+0x2f8>
 80024e0:	4a21      	ldr	r2, [pc, #132]	@ (8002568 <HAL_TIM_ConfigClockSource+0x374>)
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_TIM_ConfigClockSource+0x338>)
 80024e4:	0011      	movs	r1, r2
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7fd ff42 	bl	8000370 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b0f      	cmp	r3, #15
 80024f2:	d905      	bls.n	8002500 <HAL_TIM_ConfigClockSource+0x30c>
 80024f4:	4a1d      	ldr	r2, [pc, #116]	@ (800256c <HAL_TIM_ConfigClockSource+0x378>)
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <HAL_TIM_ConfigClockSource+0x338>)
 80024f8:	0011      	movs	r1, r2
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7fd ff38 	bl	8000370 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002510:	f000 fdb2 	bl	8003078 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2180      	movs	r1, #128	@ 0x80
 8002520:	01c9      	lsls	r1, r1, #7
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
      break;
 8002526:	e12c      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x58e>
 8002528:	00001573 	.word	0x00001573
 800252c:	080032b4 	.word	0x080032b4
 8002530:	ffceff88 	.word	0xffceff88
 8002534:	ffff00ff 	.word	0xffff00ff
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40000400 	.word	0x40000400
 8002540:	40002000 	.word	0x40002000
 8002544:	40014400 	.word	0x40014400
 8002548:	40014800 	.word	0x40014800
 800254c:	0000157f 	.word	0x0000157f
 8002550:	00001586 	.word	0x00001586
 8002554:	00001589 	.word	0x00001589
 8002558:	0000158a 	.word	0x0000158a
 800255c:	0000158b 	.word	0x0000158b
 8002560:	0000159e 	.word	0x0000159e
 8002564:	000015a1 	.word	0x000015a1
 8002568:	000015a2 	.word	0x000015a2
 800256c:	000015a3 	.word	0x000015a3
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a8a      	ldr	r2, [pc, #552]	@ (80027a0 <HAL_TIM_ConfigClockSource+0x5ac>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d010      	beq.n	800259c <HAL_TIM_ConfigClockSource+0x3a8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	05db      	lsls	r3, r3, #23
 8002582:	429a      	cmp	r2, r3
 8002584:	d00a      	beq.n	800259c <HAL_TIM_ConfigClockSource+0x3a8>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a86      	ldr	r2, [pc, #536]	@ (80027a4 <HAL_TIM_ConfigClockSource+0x5b0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d005      	beq.n	800259c <HAL_TIM_ConfigClockSource+0x3a8>
 8002590:	4a85      	ldr	r2, [pc, #532]	@ (80027a8 <HAL_TIM_ConfigClockSource+0x5b4>)
 8002592:	4b86      	ldr	r3, [pc, #536]	@ (80027ac <HAL_TIM_ConfigClockSource+0x5b8>)
 8002594:	0011      	movs	r1, r2
 8002596:	0018      	movs	r0, r3
 8002598:	f7fd feea 	bl	8000370 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	2380      	movs	r3, #128	@ 0x80
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d015      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0x3e0>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d011      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0x3e0>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0x3e0>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d009      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0x3e0>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b0a      	cmp	r3, #10
 80025c6:	d005      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0x3e0>
 80025c8:	4a79      	ldr	r2, [pc, #484]	@ (80027b0 <HAL_TIM_ConfigClockSource+0x5bc>)
 80025ca:	4b78      	ldr	r3, [pc, #480]	@ (80027ac <HAL_TIM_ConfigClockSource+0x5b8>)
 80025cc:	0011      	movs	r1, r2
 80025ce:	0018      	movs	r0, r3
 80025d0:	f7fd fece 	bl	8000370 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b0f      	cmp	r3, #15
 80025da:	d905      	bls.n	80025e8 <HAL_TIM_ConfigClockSource+0x3f4>
 80025dc:	4a75      	ldr	r2, [pc, #468]	@ (80027b4 <HAL_TIM_ConfigClockSource+0x5c0>)
 80025de:	4b73      	ldr	r3, [pc, #460]	@ (80027ac <HAL_TIM_ConfigClockSource+0x5b8>)
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7fd fec4 	bl	8000370 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f4:	001a      	movs	r2, r3
 80025f6:	f000 fcc3 	bl	8002f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2150      	movs	r1, #80	@ 0x50
 8002600:	0018      	movs	r0, r3
 8002602:	f000 fd1d 	bl	8003040 <TIM_ITRx_SetConfig>
      break;
 8002606:	e0bc      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x58e>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a64      	ldr	r2, [pc, #400]	@ (80027a0 <HAL_TIM_ConfigClockSource+0x5ac>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d010      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0x440>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	05db      	lsls	r3, r3, #23
 800261a:	429a      	cmp	r2, r3
 800261c:	d00a      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0x440>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a60      	ldr	r2, [pc, #384]	@ (80027a4 <HAL_TIM_ConfigClockSource+0x5b0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d005      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0x440>
 8002628:	4a63      	ldr	r2, [pc, #396]	@ (80027b8 <HAL_TIM_ConfigClockSource+0x5c4>)
 800262a:	4b60      	ldr	r3, [pc, #384]	@ (80027ac <HAL_TIM_ConfigClockSource+0x5b8>)
 800262c:	0011      	movs	r1, r2
 800262e:	0018      	movs	r0, r3
 8002630:	f7fd fe9e 	bl	8000370 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	429a      	cmp	r2, r3
 800263e:	d015      	beq.n	800266c <HAL_TIM_ConfigClockSource+0x478>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d011      	beq.n	800266c <HAL_TIM_ConfigClockSource+0x478>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <HAL_TIM_ConfigClockSource+0x478>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d009      	beq.n	800266c <HAL_TIM_ConfigClockSource+0x478>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b0a      	cmp	r3, #10
 800265e:	d005      	beq.n	800266c <HAL_TIM_ConfigClockSource+0x478>
 8002660:	4a56      	ldr	r2, [pc, #344]	@ (80027bc <HAL_TIM_ConfigClockSource+0x5c8>)
 8002662:	4b52      	ldr	r3, [pc, #328]	@ (80027ac <HAL_TIM_ConfigClockSource+0x5b8>)
 8002664:	0011      	movs	r1, r2
 8002666:	0018      	movs	r0, r3
 8002668:	f7fd fe82 	bl	8000370 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b0f      	cmp	r3, #15
 8002672:	d905      	bls.n	8002680 <HAL_TIM_ConfigClockSource+0x48c>
 8002674:	4a52      	ldr	r2, [pc, #328]	@ (80027c0 <HAL_TIM_ConfigClockSource+0x5cc>)
 8002676:	4b4d      	ldr	r3, [pc, #308]	@ (80027ac <HAL_TIM_ConfigClockSource+0x5b8>)
 8002678:	0011      	movs	r1, r2
 800267a:	0018      	movs	r0, r3
 800267c:	f7fd fe78 	bl	8000370 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800268c:	001a      	movs	r2, r3
 800268e:	f000 fca5 	bl	8002fdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2160      	movs	r1, #96	@ 0x60
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fcd1 	bl	8003040 <TIM_ITRx_SetConfig>
      break;
 800269e:	e070      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x58e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a3e      	ldr	r2, [pc, #248]	@ (80027a0 <HAL_TIM_ConfigClockSource+0x5ac>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d010      	beq.n	80026cc <HAL_TIM_ConfigClockSource+0x4d8>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	2380      	movs	r3, #128	@ 0x80
 80026b0:	05db      	lsls	r3, r3, #23
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d00a      	beq.n	80026cc <HAL_TIM_ConfigClockSource+0x4d8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3a      	ldr	r2, [pc, #232]	@ (80027a4 <HAL_TIM_ConfigClockSource+0x5b0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d005      	beq.n	80026cc <HAL_TIM_ConfigClockSource+0x4d8>
 80026c0:	4a40      	ldr	r2, [pc, #256]	@ (80027c4 <HAL_TIM_ConfigClockSource+0x5d0>)
 80026c2:	4b3a      	ldr	r3, [pc, #232]	@ (80027ac <HAL_TIM_ConfigClockSource+0x5b8>)
 80026c4:	0011      	movs	r1, r2
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7fd fe52 	bl	8000370 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d015      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x510>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d011      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x510>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00d      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x510>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d009      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x510>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b0a      	cmp	r3, #10
 80026f6:	d005      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x510>
 80026f8:	4a33      	ldr	r2, [pc, #204]	@ (80027c8 <HAL_TIM_ConfigClockSource+0x5d4>)
 80026fa:	4b2c      	ldr	r3, [pc, #176]	@ (80027ac <HAL_TIM_ConfigClockSource+0x5b8>)
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f7fd fe36 	bl	8000370 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d905      	bls.n	8002718 <HAL_TIM_ConfigClockSource+0x524>
 800270c:	4a2f      	ldr	r2, [pc, #188]	@ (80027cc <HAL_TIM_ConfigClockSource+0x5d8>)
 800270e:	4b27      	ldr	r3, [pc, #156]	@ (80027ac <HAL_TIM_ConfigClockSource+0x5b8>)
 8002710:	0011      	movs	r1, r2
 8002712:	0018      	movs	r0, r3
 8002714:	f7fd fe2c 	bl	8000370 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002724:	001a      	movs	r2, r3
 8002726:	f000 fc2b 	bl	8002f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2140      	movs	r1, #64	@ 0x40
 8002730:	0018      	movs	r0, r3
 8002732:	f000 fc85 	bl	8003040 <TIM_ITRx_SetConfig>
      break;
 8002736:	e024      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x58e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a18      	ldr	r2, [pc, #96]	@ (80027a0 <HAL_TIM_ConfigClockSource+0x5ac>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d010      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x570>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	05db      	lsls	r3, r3, #23
 800274a:	429a      	cmp	r2, r3
 800274c:	d00a      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x570>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a14      	ldr	r2, [pc, #80]	@ (80027a4 <HAL_TIM_ConfigClockSource+0x5b0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d005      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x570>
 8002758:	4a1d      	ldr	r2, [pc, #116]	@ (80027d0 <HAL_TIM_ConfigClockSource+0x5dc>)
 800275a:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <HAL_TIM_ConfigClockSource+0x5b8>)
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f7fd fe06 	bl	8000370 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0019      	movs	r1, r3
 800276e:	0010      	movs	r0, r2
 8002770:	f000 fc66 	bl	8003040 <TIM_ITRx_SetConfig>
      break;
 8002774:	e005      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x58e>
    }

    default:
      status = HAL_ERROR;
 8002776:	230f      	movs	r3, #15
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
      break;
 800277e:	e000      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x58e>
      break;
 8002780:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	223d      	movs	r2, #61	@ 0x3d
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	223c      	movs	r2, #60	@ 0x3c
 800278e:	2100      	movs	r1, #0
 8002790:	5499      	strb	r1, [r3, r2]

  return status;
 8002792:	230f      	movs	r3, #15
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	781b      	ldrb	r3, [r3, #0]
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b004      	add	sp, #16
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40000400 	.word	0x40000400
 80027a8:	000015b2 	.word	0x000015b2
 80027ac:	080032b4 	.word	0x080032b4
 80027b0:	000015b5 	.word	0x000015b5
 80027b4:	000015b6 	.word	0x000015b6
 80027b8:	000015c2 	.word	0x000015c2
 80027bc:	000015c5 	.word	0x000015c5
 80027c0:	000015c6 	.word	0x000015c6
 80027c4:	000015d2 	.word	0x000015d2
 80027c8:	000015d5 	.word	0x000015d5
 80027cc:	000015d6 	.word	0x000015d6
 80027d0:	000015e5 	.word	0x000015e5

080027d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a37      	ldr	r2, [pc, #220]	@ (80028c4 <TIM_Base_SetConfig+0xf0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d008      	beq.n	80027fe <TIM_Base_SetConfig+0x2a>
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	2380      	movs	r3, #128	@ 0x80
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d003      	beq.n	80027fe <TIM_Base_SetConfig+0x2a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a33      	ldr	r2, [pc, #204]	@ (80028c8 <TIM_Base_SetConfig+0xf4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2270      	movs	r2, #112	@ 0x70
 8002802:	4393      	bics	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a2c      	ldr	r2, [pc, #176]	@ (80028c4 <TIM_Base_SetConfig+0xf0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d014      	beq.n	8002842 <TIM_Base_SetConfig+0x6e>
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	2380      	movs	r3, #128	@ 0x80
 800281c:	05db      	lsls	r3, r3, #23
 800281e:	429a      	cmp	r2, r3
 8002820:	d00f      	beq.n	8002842 <TIM_Base_SetConfig+0x6e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a28      	ldr	r2, [pc, #160]	@ (80028c8 <TIM_Base_SetConfig+0xf4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00b      	beq.n	8002842 <TIM_Base_SetConfig+0x6e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a27      	ldr	r2, [pc, #156]	@ (80028cc <TIM_Base_SetConfig+0xf8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <TIM_Base_SetConfig+0x6e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a26      	ldr	r2, [pc, #152]	@ (80028d0 <TIM_Base_SetConfig+0xfc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d003      	beq.n	8002842 <TIM_Base_SetConfig+0x6e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a25      	ldr	r2, [pc, #148]	@ (80028d4 <TIM_Base_SetConfig+0x100>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a24      	ldr	r2, [pc, #144]	@ (80028d8 <TIM_Base_SetConfig+0x104>)
 8002846:	4013      	ands	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2280      	movs	r2, #128	@ 0x80
 8002858:	4393      	bics	r3, r2
 800285a:	001a      	movs	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a11      	ldr	r2, [pc, #68]	@ (80028c4 <TIM_Base_SetConfig+0xf0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <TIM_Base_SetConfig+0xbe>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <TIM_Base_SetConfig+0xfc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <TIM_Base_SetConfig+0xbe>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a11      	ldr	r2, [pc, #68]	@ (80028d4 <TIM_Base_SetConfig+0x100>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d103      	bne.n	800289a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2201      	movs	r2, #1
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2201      	movs	r2, #1
 80028b2:	4393      	bics	r3, r2
 80028b4:	001a      	movs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	611a      	str	r2, [r3, #16]
  }
}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b004      	add	sp, #16
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40002000 	.word	0x40002000
 80028d0:	40014400 	.word	0x40014400
 80028d4:	40014800 	.word	0x40014800
 80028d8:	fffffcff 	.word	0xfffffcff

080028dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	2201      	movs	r2, #1
 80028f2:	4393      	bics	r3, r2
 80028f4:	001a      	movs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a45      	ldr	r2, [pc, #276]	@ (8002a20 <TIM_OC1_SetConfig+0x144>)
 800290a:	4013      	ands	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2203      	movs	r2, #3
 8002912:	4393      	bics	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2202      	movs	r2, #2
 8002924:	4393      	bics	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a3b      	ldr	r2, [pc, #236]	@ (8002a24 <TIM_OC1_SetConfig+0x148>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <TIM_OC1_SetConfig+0x6e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a28 <TIM_OC1_SetConfig+0x14c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d003      	beq.n	800294a <TIM_OC1_SetConfig+0x6e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a39      	ldr	r2, [pc, #228]	@ (8002a2c <TIM_OC1_SetConfig+0x150>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d11a      	bne.n	8002980 <TIM_OC1_SetConfig+0xa4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <TIM_OC1_SetConfig+0x8a>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b08      	cmp	r3, #8
 8002958:	d005      	beq.n	8002966 <TIM_OC1_SetConfig+0x8a>
 800295a:	4a35      	ldr	r2, [pc, #212]	@ (8002a30 <TIM_OC1_SetConfig+0x154>)
 800295c:	4b35      	ldr	r3, [pc, #212]	@ (8002a34 <TIM_OC1_SetConfig+0x158>)
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f7fd fd05 	bl	8000370 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2208      	movs	r2, #8
 800296a:	4393      	bics	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2204      	movs	r2, #4
 800297c:	4393      	bics	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a28      	ldr	r2, [pc, #160]	@ (8002a24 <TIM_OC1_SetConfig+0x148>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d007      	beq.n	8002998 <TIM_OC1_SetConfig+0xbc>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a27      	ldr	r2, [pc, #156]	@ (8002a28 <TIM_OC1_SetConfig+0x14c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d003      	beq.n	8002998 <TIM_OC1_SetConfig+0xbc>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a26      	ldr	r2, [pc, #152]	@ (8002a2c <TIM_OC1_SetConfig+0x150>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d131      	bne.n	80029fc <TIM_OC1_SetConfig+0x120>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	699a      	ldr	r2, [r3, #24]
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d009      	beq.n	80029b8 <TIM_OC1_SetConfig+0xdc>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <TIM_OC1_SetConfig+0xdc>
 80029ac:	4a22      	ldr	r2, [pc, #136]	@ (8002a38 <TIM_OC1_SetConfig+0x15c>)
 80029ae:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <TIM_OC1_SetConfig+0x158>)
 80029b0:	0011      	movs	r1, r2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7fd fcdc 	bl	8000370 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d009      	beq.n	80029d8 <TIM_OC1_SetConfig+0xfc>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <TIM_OC1_SetConfig+0xfc>
 80029cc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a3c <TIM_OC1_SetConfig+0x160>)
 80029ce:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <TIM_OC1_SetConfig+0x158>)
 80029d0:	0011      	movs	r1, r2
 80029d2:	0018      	movs	r0, r3
 80029d4:	f7fd fccc 	bl	8000370 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4a19      	ldr	r2, [pc, #100]	@ (8002a40 <TIM_OC1_SetConfig+0x164>)
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4a18      	ldr	r2, [pc, #96]	@ (8002a44 <TIM_OC1_SetConfig+0x168>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	621a      	str	r2, [r3, #32]
}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b006      	add	sp, #24
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	fffeff8f 	.word	0xfffeff8f
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40014400 	.word	0x40014400
 8002a2c:	40014800 	.word	0x40014800
 8002a30:	00001b8b 	.word	0x00001b8b
 8002a34:	080032b4 	.word	0x080032b4
 8002a38:	00001b98 	.word	0x00001b98
 8002a3c:	00001b99 	.word	0x00001b99
 8002a40:	fffffeff 	.word	0xfffffeff
 8002a44:	fffffdff 	.word	0xfffffdff

08002a48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	4393      	bics	r3, r2
 8002a60:	001a      	movs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a43      	ldr	r2, [pc, #268]	@ (8002b84 <TIM_OC2_SetConfig+0x13c>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a42      	ldr	r2, [pc, #264]	@ (8002b88 <TIM_OC2_SetConfig+0x140>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2220      	movs	r2, #32
 8002a92:	4393      	bics	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a39      	ldr	r2, [pc, #228]	@ (8002b8c <TIM_OC2_SetConfig+0x144>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d11b      	bne.n	8002ae2 <TIM_OC2_SetConfig+0x9a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <TIM_OC2_SetConfig+0x7e>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d005      	beq.n	8002ac6 <TIM_OC2_SetConfig+0x7e>
 8002aba:	4a35      	ldr	r2, [pc, #212]	@ (8002b90 <TIM_OC2_SetConfig+0x148>)
 8002abc:	4b35      	ldr	r3, [pc, #212]	@ (8002b94 <TIM_OC2_SetConfig+0x14c>)
 8002abe:	0011      	movs	r1, r2
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7fd fc55 	bl	8000370 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2280      	movs	r2, #128	@ 0x80
 8002aca:	4393      	bics	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2240      	movs	r2, #64	@ 0x40
 8002ade:	4393      	bics	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a29      	ldr	r2, [pc, #164]	@ (8002b8c <TIM_OC2_SetConfig+0x144>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <TIM_OC2_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2a      	ldr	r2, [pc, #168]	@ (8002b98 <TIM_OC2_SetConfig+0x150>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <TIM_OC2_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a29      	ldr	r2, [pc, #164]	@ (8002b9c <TIM_OC2_SetConfig+0x154>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d133      	bne.n	8002b62 <TIM_OC2_SetConfig+0x11a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d009      	beq.n	8002b1a <TIM_OC2_SetConfig+0xd2>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <TIM_OC2_SetConfig+0xd2>
 8002b0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ba0 <TIM_OC2_SetConfig+0x158>)
 8002b10:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <TIM_OC2_SetConfig+0x14c>)
 8002b12:	0011      	movs	r1, r2
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7fd fc2b 	bl	8000370 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d009      	beq.n	8002b3a <TIM_OC2_SetConfig+0xf2>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <TIM_OC2_SetConfig+0xf2>
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba4 <TIM_OC2_SetConfig+0x15c>)
 8002b30:	4b18      	ldr	r3, [pc, #96]	@ (8002b94 <TIM_OC2_SetConfig+0x14c>)
 8002b32:	0011      	movs	r1, r2
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7fd fc1b 	bl	8000370 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba8 <TIM_OC2_SetConfig+0x160>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4a19      	ldr	r2, [pc, #100]	@ (8002bac <TIM_OC2_SetConfig+0x164>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	621a      	str	r2, [r3, #32]
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b006      	add	sp, #24
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	feff8fff 	.word	0xfeff8fff
 8002b88:	fffffcff 	.word	0xfffffcff
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	00001bd7 	.word	0x00001bd7
 8002b94:	080032b4 	.word	0x080032b4
 8002b98:	40014400 	.word	0x40014400
 8002b9c:	40014800 	.word	0x40014800
 8002ba0:	00001be4 	.word	0x00001be4
 8002ba4:	00001be5 	.word	0x00001be5
 8002ba8:	fffffbff 	.word	0xfffffbff
 8002bac:	fffff7ff 	.word	0xfffff7ff

08002bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4a48      	ldr	r2, [pc, #288]	@ (8002ce8 <TIM_OC3_SetConfig+0x138>)
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a44      	ldr	r2, [pc, #272]	@ (8002cec <TIM_OC3_SetConfig+0x13c>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2203      	movs	r2, #3
 8002be4:	4393      	bics	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	4a3e      	ldr	r2, [pc, #248]	@ (8002cf0 <TIM_OC3_SetConfig+0x140>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a3a      	ldr	r2, [pc, #232]	@ (8002cf4 <TIM_OC3_SetConfig+0x144>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d11b      	bne.n	8002c46 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <TIM_OC3_SetConfig+0x7a>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d005      	beq.n	8002c2a <TIM_OC3_SetConfig+0x7a>
 8002c1e:	4a36      	ldr	r2, [pc, #216]	@ (8002cf8 <TIM_OC3_SetConfig+0x148>)
 8002c20:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <TIM_OC3_SetConfig+0x14c>)
 8002c22:	0011      	movs	r1, r2
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7fd fba3 	bl	8000370 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	4a34      	ldr	r2, [pc, #208]	@ (8002d00 <TIM_OC3_SetConfig+0x150>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	4a30      	ldr	r2, [pc, #192]	@ (8002d04 <TIM_OC3_SetConfig+0x154>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf4 <TIM_OC3_SetConfig+0x144>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <TIM_OC3_SetConfig+0xae>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2d      	ldr	r2, [pc, #180]	@ (8002d08 <TIM_OC3_SetConfig+0x158>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d003      	beq.n	8002c5e <TIM_OC3_SetConfig+0xae>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a2c      	ldr	r2, [pc, #176]	@ (8002d0c <TIM_OC3_SetConfig+0x15c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d133      	bne.n	8002cc6 <TIM_OC3_SetConfig+0x116>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	2380      	movs	r3, #128	@ 0x80
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d009      	beq.n	8002c7e <TIM_OC3_SetConfig+0xce>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <TIM_OC3_SetConfig+0xce>
 8002c72:	4a27      	ldr	r2, [pc, #156]	@ (8002d10 <TIM_OC3_SetConfig+0x160>)
 8002c74:	4b21      	ldr	r3, [pc, #132]	@ (8002cfc <TIM_OC3_SetConfig+0x14c>)
 8002c76:	0011      	movs	r1, r2
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7fd fb79 	bl	8000370 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d009      	beq.n	8002c9e <TIM_OC3_SetConfig+0xee>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <TIM_OC3_SetConfig+0xee>
 8002c92:	4a20      	ldr	r2, [pc, #128]	@ (8002d14 <TIM_OC3_SetConfig+0x164>)
 8002c94:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <TIM_OC3_SetConfig+0x14c>)
 8002c96:	0011      	movs	r1, r2
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7fd fb69 	bl	8000370 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d18 <TIM_OC3_SetConfig+0x168>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d1c <TIM_OC3_SetConfig+0x16c>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	621a      	str	r2, [r3, #32]
}
 8002ce0:	46c0      	nop			@ (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b006      	add	sp, #24
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	fffffeff 	.word	0xfffffeff
 8002cec:	fffeff8f 	.word	0xfffeff8f
 8002cf0:	fffffdff 	.word	0xfffffdff
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	00001c22 	.word	0x00001c22
 8002cfc:	080032b4 	.word	0x080032b4
 8002d00:	fffff7ff 	.word	0xfffff7ff
 8002d04:	fffffbff 	.word	0xfffffbff
 8002d08:	40014400 	.word	0x40014400
 8002d0c:	40014800 	.word	0x40014800
 8002d10:	00001c2f 	.word	0x00001c2f
 8002d14:	00001c30 	.word	0x00001c30
 8002d18:	ffffefff 	.word	0xffffefff
 8002d1c:	ffffdfff 	.word	0xffffdfff

08002d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a2c      	ldr	r2, [pc, #176]	@ (8002de8 <TIM_OC4_SetConfig+0xc8>)
 8002d36:	401a      	ands	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a28      	ldr	r2, [pc, #160]	@ (8002dec <TIM_OC4_SetConfig+0xcc>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a27      	ldr	r2, [pc, #156]	@ (8002df0 <TIM_OC4_SetConfig+0xd0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4a23      	ldr	r2, [pc, #140]	@ (8002df4 <TIM_OC4_SetConfig+0xd4>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	031b      	lsls	r3, r3, #12
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002df8 <TIM_OC4_SetConfig+0xd8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <TIM_OC4_SetConfig+0x70>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a1e      	ldr	r2, [pc, #120]	@ (8002dfc <TIM_OC4_SetConfig+0xdc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d003      	beq.n	8002d90 <TIM_OC4_SetConfig+0x70>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <TIM_OC4_SetConfig+0xe0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d119      	bne.n	8002dc4 <TIM_OC4_SetConfig+0xa4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d009      	beq.n	8002db0 <TIM_OC4_SetConfig+0x90>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <TIM_OC4_SetConfig+0x90>
 8002da4:	4a17      	ldr	r2, [pc, #92]	@ (8002e04 <TIM_OC4_SetConfig+0xe4>)
 8002da6:	4b18      	ldr	r3, [pc, #96]	@ (8002e08 <TIM_OC4_SetConfig+0xe8>)
 8002da8:	0011      	movs	r1, r2
 8002daa:	0018      	movs	r0, r3
 8002dac:	f7fd fae0 	bl	8000370 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	4a16      	ldr	r2, [pc, #88]	@ (8002e0c <TIM_OC4_SetConfig+0xec>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	019b      	lsls	r3, r3, #6
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	46c0      	nop			@ (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b006      	add	sp, #24
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	ffffefff 	.word	0xffffefff
 8002dec:	feff8fff 	.word	0xfeff8fff
 8002df0:	fffffcff 	.word	0xfffffcff
 8002df4:	ffffdfff 	.word	0xffffdfff
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40014400 	.word	0x40014400
 8002e00:	40014800 	.word	0x40014800
 8002e04:	00001c6f 	.word	0x00001c6f
 8002e08:	080032b4 	.word	0x080032b4
 8002e0c:	ffffbfff 	.word	0xffffbfff

08002e10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4a21      	ldr	r2, [pc, #132]	@ (8002eac <TIM_OC5_SetConfig+0x9c>)
 8002e26:	401a      	ands	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb0 <TIM_OC5_SetConfig+0xa0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	@ (8002eb4 <TIM_OC5_SetConfig+0xa4>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a15      	ldr	r2, [pc, #84]	@ (8002eb8 <TIM_OC5_SetConfig+0xa8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <TIM_OC5_SetConfig+0x66>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a14      	ldr	r2, [pc, #80]	@ (8002ebc <TIM_OC5_SetConfig+0xac>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_OC5_SetConfig+0x66>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a13      	ldr	r2, [pc, #76]	@ (8002ec0 <TIM_OC5_SetConfig+0xb0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d109      	bne.n	8002e8a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4a0c      	ldr	r2, [pc, #48]	@ (8002eac <TIM_OC5_SetConfig+0x9c>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	621a      	str	r2, [r3, #32]
}
 8002ea4:	46c0      	nop			@ (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b006      	add	sp, #24
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	fffeffff 	.word	0xfffeffff
 8002eb0:	fffeff8f 	.word	0xfffeff8f
 8002eb4:	fffdffff 	.word	0xfffdffff
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40014400 	.word	0x40014400
 8002ec0:	40014800 	.word	0x40014800

08002ec4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	@ (8002f64 <TIM_OC6_SetConfig+0xa0>)
 8002eda:	401a      	ands	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a1e      	ldr	r2, [pc, #120]	@ (8002f68 <TIM_OC6_SetConfig+0xa4>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4a1a      	ldr	r2, [pc, #104]	@ (8002f6c <TIM_OC6_SetConfig+0xa8>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	051b      	lsls	r3, r3, #20
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a16      	ldr	r2, [pc, #88]	@ (8002f70 <TIM_OC6_SetConfig+0xac>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d007      	beq.n	8002f2c <TIM_OC6_SetConfig+0x68>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a15      	ldr	r2, [pc, #84]	@ (8002f74 <TIM_OC6_SetConfig+0xb0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_OC6_SetConfig+0x68>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a14      	ldr	r2, [pc, #80]	@ (8002f78 <TIM_OC6_SetConfig+0xb4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d109      	bne.n	8002f40 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	4a13      	ldr	r2, [pc, #76]	@ (8002f7c <TIM_OC6_SetConfig+0xb8>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	029b      	lsls	r3, r3, #10
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b006      	add	sp, #24
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	ffefffff 	.word	0xffefffff
 8002f68:	feff8fff 	.word	0xfeff8fff
 8002f6c:	ffdfffff 	.word	0xffdfffff
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40014400 	.word	0x40014400
 8002f78:	40014800 	.word	0x40014800
 8002f7c:	fffbffff 	.word	0xfffbffff

08002f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	2201      	movs	r2, #1
 8002f98:	4393      	bics	r3, r2
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	22f0      	movs	r2, #240	@ 0xf0
 8002faa:	4393      	bics	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	220a      	movs	r2, #10
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	621a      	str	r2, [r3, #32]
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b006      	add	sp, #24
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	2210      	movs	r2, #16
 8002ff4:	4393      	bics	r3, r2
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4a0d      	ldr	r2, [pc, #52]	@ (800303c <TIM_TI2_ConfigInputStage+0x60>)
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	031b      	lsls	r3, r3, #12
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	22a0      	movs	r2, #160	@ 0xa0
 8003018:	4393      	bics	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	621a      	str	r2, [r3, #32]
}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b006      	add	sp, #24
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	ffff0fff 	.word	0xffff0fff

08003040 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <TIM_ITRx_SetConfig+0x34>)
 8003054:	4013      	ands	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	2207      	movs	r2, #7
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	609a      	str	r2, [r3, #8]
}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b004      	add	sp, #16
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	ffcfff8f 	.word	0xffcfff8f

08003078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4a09      	ldr	r2, [pc, #36]	@ (80030b4 <TIM_ETR_SetConfig+0x3c>)
 8003090:	4013      	ands	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	021a      	lsls	r2, r3, #8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	431a      	orrs	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4313      	orrs	r3, r2
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	609a      	str	r2, [r3, #8]
}
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b006      	add	sp, #24
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	ffff00ff 	.word	0xffff00ff

080030b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003174 <TIM_CCxChannelCmd+0xbc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d01a      	beq.n	8003102 <TIM_CCxChannelCmd+0x4a>
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	05db      	lsls	r3, r3, #23
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d015      	beq.n	8003102 <TIM_CCxChannelCmd+0x4a>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a27      	ldr	r2, [pc, #156]	@ (8003178 <TIM_CCxChannelCmd+0xc0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d011      	beq.n	8003102 <TIM_CCxChannelCmd+0x4a>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a26      	ldr	r2, [pc, #152]	@ (800317c <TIM_CCxChannelCmd+0xc4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <TIM_CCxChannelCmd+0x4a>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4a25      	ldr	r2, [pc, #148]	@ (8003180 <TIM_CCxChannelCmd+0xc8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d009      	beq.n	8003102 <TIM_CCxChannelCmd+0x4a>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a24      	ldr	r2, [pc, #144]	@ (8003184 <TIM_CCxChannelCmd+0xcc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d005      	beq.n	8003102 <TIM_CCxChannelCmd+0x4a>
 80030f6:	4a24      	ldr	r2, [pc, #144]	@ (8003188 <TIM_CCxChannelCmd+0xd0>)
 80030f8:	4b24      	ldr	r3, [pc, #144]	@ (800318c <TIM_CCxChannelCmd+0xd4>)
 80030fa:	0011      	movs	r1, r2
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7fd f937 	bl	8000370 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d017      	beq.n	8003138 <TIM_CCxChannelCmd+0x80>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b04      	cmp	r3, #4
 800310c:	d014      	beq.n	8003138 <TIM_CCxChannelCmd+0x80>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d011      	beq.n	8003138 <TIM_CCxChannelCmd+0x80>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d00e      	beq.n	8003138 <TIM_CCxChannelCmd+0x80>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d00b      	beq.n	8003138 <TIM_CCxChannelCmd+0x80>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b14      	cmp	r3, #20
 8003124:	d008      	beq.n	8003138 <TIM_CCxChannelCmd+0x80>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b3c      	cmp	r3, #60	@ 0x3c
 800312a:	d005      	beq.n	8003138 <TIM_CCxChannelCmd+0x80>
 800312c:	4a18      	ldr	r2, [pc, #96]	@ (8003190 <TIM_CCxChannelCmd+0xd8>)
 800312e:	4b17      	ldr	r3, [pc, #92]	@ (800318c <TIM_CCxChannelCmd+0xd4>)
 8003130:	0011      	movs	r1, r2
 8003132:	0018      	movs	r0, r3
 8003134:	f7fd f91c 	bl	8000370 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	221f      	movs	r2, #31
 800313c:	4013      	ands	r3, r2
 800313e:	2201      	movs	r2, #1
 8003140:	409a      	lsls	r2, r3
 8003142:	0013      	movs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	43d2      	mvns	r2, r2
 800314e:	401a      	ands	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	211f      	movs	r1, #31
 800315c:	400b      	ands	r3, r1
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4099      	lsls	r1, r3
 8003162:	000b      	movs	r3, r1
 8003164:	431a      	orrs	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	621a      	str	r2, [r3, #32]
}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	b006      	add	sp, #24
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40000400 	.word	0x40000400
 800317c:	40002000 	.word	0x40002000
 8003180:	40014400 	.word	0x40014400
 8003184:	40014800 	.word	0x40014800
 8003188:	00001ec9 	.word	0x00001ec9
 800318c:	080032b4 	.word	0x080032b4
 8003190:	00001eca 	.word	0x00001eca

08003194 <memset>:
 8003194:	0003      	movs	r3, r0
 8003196:	1882      	adds	r2, r0, r2
 8003198:	4293      	cmp	r3, r2
 800319a:	d100      	bne.n	800319e <memset+0xa>
 800319c:	4770      	bx	lr
 800319e:	7019      	strb	r1, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	e7f9      	b.n	8003198 <memset+0x4>

080031a4 <__libc_init_array>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	2600      	movs	r6, #0
 80031a8:	4c0c      	ldr	r4, [pc, #48]	@ (80031dc <__libc_init_array+0x38>)
 80031aa:	4d0d      	ldr	r5, [pc, #52]	@ (80031e0 <__libc_init_array+0x3c>)
 80031ac:	1b64      	subs	r4, r4, r5
 80031ae:	10a4      	asrs	r4, r4, #2
 80031b0:	42a6      	cmp	r6, r4
 80031b2:	d109      	bne.n	80031c8 <__libc_init_array+0x24>
 80031b4:	2600      	movs	r6, #0
 80031b6:	f000 f819 	bl	80031ec <_init>
 80031ba:	4c0a      	ldr	r4, [pc, #40]	@ (80031e4 <__libc_init_array+0x40>)
 80031bc:	4d0a      	ldr	r5, [pc, #40]	@ (80031e8 <__libc_init_array+0x44>)
 80031be:	1b64      	subs	r4, r4, r5
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	42a6      	cmp	r6, r4
 80031c4:	d105      	bne.n	80031d2 <__libc_init_array+0x2e>
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	00b3      	lsls	r3, r6, #2
 80031ca:	58eb      	ldr	r3, [r5, r3]
 80031cc:	4798      	blx	r3
 80031ce:	3601      	adds	r6, #1
 80031d0:	e7ee      	b.n	80031b0 <__libc_init_array+0xc>
 80031d2:	00b3      	lsls	r3, r6, #2
 80031d4:	58eb      	ldr	r3, [r5, r3]
 80031d6:	4798      	blx	r3
 80031d8:	3601      	adds	r6, #1
 80031da:	e7f2      	b.n	80031c2 <__libc_init_array+0x1e>
 80031dc:	08003380 	.word	0x08003380
 80031e0:	08003380 	.word	0x08003380
 80031e4:	08003384 	.word	0x08003384
 80031e8:	08003380 	.word	0x08003380

080031ec <_init>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr

080031f8 <_fini>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fe:	bc08      	pop	{r3}
 8003200:	469e      	mov	lr, r3
 8003202:	4770      	bx	lr
