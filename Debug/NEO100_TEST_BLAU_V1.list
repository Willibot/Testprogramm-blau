
NEO100_TEST_BLAU_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004960  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08004a1c  08004a1c  00005a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c5c  08004c5c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004c5c  08004c5c  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004c5c  08004c5c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c5c  08004c5c  00005c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c60  08004c60  00005c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004c64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000000c  08004c70  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004c70  0000633c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a285  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6d  00000000  00000000  000102b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00012028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fd  00000000  00000000  00012bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001573f  00000000  00000000  000134bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010200  00000000  00000000  00028bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b95  00000000  00000000  00038dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2991  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a0  00000000  00000000  000c29d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000c5274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004a04 	.word	0x08004a04

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004a04 	.word	0x08004a04

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <MX_DMA_Init+0x38>)
 8000224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000226:	4b0b      	ldr	r3, [pc, #44]	@ (8000254 <MX_DMA_Init+0x38>)
 8000228:	2101      	movs	r1, #1
 800022a:	430a      	orrs	r2, r1
 800022c:	639a      	str	r2, [r3, #56]	@ 0x38
 800022e:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <MX_DMA_Init+0x38>)
 8000230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000232:	2201      	movs	r2, #1
 8000234:	4013      	ands	r3, r2
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	2100      	movs	r1, #0
 800023e:	2009      	movs	r0, #9
 8000240:	f000 fce0 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000244:	2009      	movs	r0, #9
 8000246:	f000 fcfd 	bl	8000c44 <HAL_NVIC_EnableIRQ>

}
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	b002      	add	sp, #8
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	40021000 	.word	0x40021000

08000258 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025e:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <MX_GPIO_Init+0x28>)
 8000260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000262:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <MX_GPIO_Init+0x28>)
 8000264:	2101      	movs	r1, #1
 8000266:	430a      	orrs	r2, r1
 8000268:	635a      	str	r2, [r3, #52]	@ 0x34
 800026a:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <MX_GPIO_Init+0x28>)
 800026c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800026e:	2201      	movs	r2, #1
 8000270:	4013      	ands	r3, r2
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]

}
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b002      	add	sp, #8
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)
 8000280:	40021000 	.word	0x40021000

08000284 <set_led_color>:
void cycle_colors(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_led_color(uint8_t index, uint8_t g, uint8_t r, uint8_t b) {
 8000284:	b5b0      	push	{r4, r5, r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	0005      	movs	r5, r0
 800028c:	000c      	movs	r4, r1
 800028e:	0010      	movs	r0, r2
 8000290:	0019      	movs	r1, r3
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	1c2a      	adds	r2, r5, #0
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	1dbb      	adds	r3, r7, #6
 800029a:	1c22      	adds	r2, r4, #0
 800029c:	701a      	strb	r2, [r3, #0]
 800029e:	1d7b      	adds	r3, r7, #5
 80002a0:	1c02      	adds	r2, r0, #0
 80002a2:	701a      	strb	r2, [r3, #0]
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	1c0a      	adds	r2, r1, #0
 80002a8:	701a      	strb	r2, [r3, #0]
    if (index < LED_COUNT) {
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b0b      	cmp	r3, #11
 80002b0:	d81e      	bhi.n	80002f0 <set_led_color+0x6c>
        led_data[index][0] = g;
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	4910      	ldr	r1, [pc, #64]	@ (80002f8 <set_led_color+0x74>)
 80002b8:	0013      	movs	r3, r2
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	189b      	adds	r3, r3, r2
 80002be:	1dba      	adds	r2, r7, #6
 80002c0:	7812      	ldrb	r2, [r2, #0]
 80002c2:	545a      	strb	r2, [r3, r1]
        led_data[index][1] = r;
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	490b      	ldr	r1, [pc, #44]	@ (80002f8 <set_led_color+0x74>)
 80002ca:	0013      	movs	r3, r2
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	189b      	adds	r3, r3, r2
 80002d0:	18cb      	adds	r3, r1, r3
 80002d2:	3301      	adds	r3, #1
 80002d4:	1d7a      	adds	r2, r7, #5
 80002d6:	7812      	ldrb	r2, [r2, #0]
 80002d8:	701a      	strb	r2, [r3, #0]
        led_data[index][2] = b;
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	781a      	ldrb	r2, [r3, #0]
 80002de:	4906      	ldr	r1, [pc, #24]	@ (80002f8 <set_led_color+0x74>)
 80002e0:	0013      	movs	r3, r2
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	189b      	adds	r3, r3, r2
 80002e6:	18cb      	adds	r3, r1, r3
 80002e8:	3302      	adds	r3, #2
 80002ea:	1d3a      	adds	r2, r7, #4
 80002ec:	7812      	ldrb	r2, [r2, #0]
 80002ee:	701a      	strb	r2, [r3, #0]
    }
}
 80002f0:	46c0      	nop			@ (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b002      	add	sp, #8
 80002f6:	bdb0      	pop	{r4, r5, r7, pc}
 80002f8:	20000028 	.word	0x20000028

080002fc <clear_leds_except>:

void clear_leds_except(uint8_t active) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	0002      	movs	r2, r0
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < LED_COUNT; i++) {
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	e00e      	b.n	800032c <clear_leds_except+0x30>
        if (i != active) set_led_color(i, 0, 0, 0);
 800030e:	1dfb      	adds	r3, r7, #7
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	429a      	cmp	r2, r3
 8000316:	d006      	beq.n	8000326 <clear_leds_except+0x2a>
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	b2d8      	uxtb	r0, r3
 800031c:	2300      	movs	r3, #0
 800031e:	2200      	movs	r2, #0
 8000320:	2100      	movs	r1, #0
 8000322:	f7ff ffaf 	bl	8000284 <set_led_color>
    for (int i = 0; i < LED_COUNT; i++) {
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3301      	adds	r3, #1
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	2b0b      	cmp	r3, #11
 8000330:	dded      	ble.n	800030e <clear_leds_except+0x12>
    }
}
 8000332:	46c0      	nop			@ (mov r8, r8)
 8000334:	46c0      	nop			@ (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b004      	add	sp, #16
 800033a:	bd80      	pop	{r7, pc}

0800033c <prepare_pwm_buffer>:

void prepare_pwm_buffer(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
    int k = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < LED_COUNT; i++) {
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	e030      	b.n	80003ae <prepare_pwm_buffer+0x72>
        for (int j = 0; j < 3; j++) {
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	e027      	b.n	80003a2 <prepare_pwm_buffer+0x66>
            uint8_t val = led_data[i][j];
 8000352:	1df9      	adds	r1, r7, #7
 8000354:	481a      	ldr	r0, [pc, #104]	@ (80003c0 <prepare_pwm_buffer+0x84>)
 8000356:	693a      	ldr	r2, [r7, #16]
 8000358:	0013      	movs	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	189b      	adds	r3, r3, r2
 800035e:	18c2      	adds	r2, r0, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	18d3      	adds	r3, r2, r3
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	700b      	strb	r3, [r1, #0]
            for (int bit = 7; bit >= 0; bit--) {
 8000368:	2307      	movs	r3, #7
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	e013      	b.n	8000396 <prepare_pwm_buffer+0x5a>
                pwm_buffer[k++] = (val & (1 << bit)) ? HIGH_DUTY : LOW_DUTY;
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	781a      	ldrb	r2, [r3, #0]
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	411a      	asrs	r2, r3
 8000376:	0013      	movs	r3, r2
 8000378:	2201      	movs	r2, #1
 800037a:	4013      	ands	r3, r2
 800037c:	d001      	beq.n	8000382 <prepare_pwm_buffer+0x46>
 800037e:	2140      	movs	r1, #64	@ 0x40
 8000380:	e000      	b.n	8000384 <prepare_pwm_buffer+0x48>
 8000382:	211a      	movs	r1, #26
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	1c5a      	adds	r2, r3, #1
 8000388:	617a      	str	r2, [r7, #20]
 800038a:	4a0e      	ldr	r2, [pc, #56]	@ (80003c4 <prepare_pwm_buffer+0x88>)
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	5299      	strh	r1, [r3, r2]
            for (int bit = 7; bit >= 0; bit--) {
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	3b01      	subs	r3, #1
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	2b00      	cmp	r3, #0
 800039a:	dae8      	bge.n	800036e <prepare_pwm_buffer+0x32>
        for (int j = 0; j < 3; j++) {
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	3301      	adds	r3, #1
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	ddd4      	ble.n	8000352 <prepare_pwm_buffer+0x16>
    for (int i = 0; i < LED_COUNT; i++) {
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	3301      	adds	r3, #1
 80003ac:	613b      	str	r3, [r7, #16]
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	2b0b      	cmp	r3, #11
 80003b2:	ddcb      	ble.n	800034c <prepare_pwm_buffer+0x10>
            }
        }
    }
}
 80003b4:	46c0      	nop			@ (mov r8, r8)
 80003b6:	46c0      	nop			@ (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b006      	add	sp, #24
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	20000028 	.word	0x20000028
 80003c4:	2000004c 	.word	0x2000004c

080003c8 <send_leds>:

void send_leds(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003cc:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <send_leds+0x34>)
 80003ce:	2104      	movs	r1, #4
 80003d0:	0018      	movs	r0, r3
 80003d2:	f002 fa83 	bl	80028dc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t *)pwm_buffer, LED_DATA_LEN);
 80003d6:	2390      	movs	r3, #144	@ 0x90
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4a09      	ldr	r2, [pc, #36]	@ (8000400 <send_leds+0x38>)
 80003dc:	4807      	ldr	r0, [pc, #28]	@ (80003fc <send_leds+0x34>)
 80003de:	2104      	movs	r1, #4
 80003e0:	f002 fc9e 	bl	8002d20 <HAL_TIM_PWM_Start_DMA>
    HAL_Delay(1); // >50 µs Latch-Zeit
 80003e4:	2001      	movs	r0, #1
 80003e6:	f000 fb3d 	bl	8000a64 <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80003ea:	4b04      	ldr	r3, [pc, #16]	@ (80003fc <send_leds+0x34>)
 80003ec:	2104      	movs	r1, #4
 80003ee:	0018      	movs	r0, r3
 80003f0:	f002 fbb0 	bl	8002b54 <HAL_TIM_PWM_Stop>
}
 80003f4:	46c0      	nop			@ (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	20000290 	.word	0x20000290
 8000400:	2000004c 	.word	0x2000004c

08000404 <cycle_colors>:


void cycle_colors(void) {
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
    static uint8_t hue = 0;
    uint8_t r, g, b;
    uint8_t region = hue / 43;
 800040a:	4b51      	ldr	r3, [pc, #324]	@ (8000550 <cycle_colors+0x14c>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	1d3c      	adds	r4, r7, #4
 8000410:	212b      	movs	r1, #43	@ 0x2b
 8000412:	0018      	movs	r0, r3
 8000414:	f7ff fe76 	bl	8000104 <__udivsi3>
 8000418:	0003      	movs	r3, r0
 800041a:	7023      	strb	r3, [r4, #0]
    uint8_t remainder = (hue - (region * 43)) * 6;
 800041c:	4b4c      	ldr	r3, [pc, #304]	@ (8000550 <cycle_colors+0x14c>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	0019      	movs	r1, r3
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	781a      	ldrb	r2, [r3, #0]
 8000426:	0013      	movs	r3, r2
 8000428:	069b      	lsls	r3, r3, #26
 800042a:	1a9b      	subs	r3, r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	189b      	adds	r3, r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	189b      	adds	r3, r3, r2
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	189b      	adds	r3, r3, r2
 8000438:	18cb      	adds	r3, r1, r3
 800043a:	b2db      	uxtb	r3, r3
 800043c:	1cfa      	adds	r2, r7, #3
 800043e:	1c19      	adds	r1, r3, #0
 8000440:	1c0b      	adds	r3, r1, #0
 8000442:	18db      	adds	r3, r3, r3
 8000444:	185b      	adds	r3, r3, r1
 8000446:	18db      	adds	r3, r3, r3
 8000448:	7013      	strb	r3, [r2, #0]
    uint8_t p = 0;
 800044a:	1cbb      	adds	r3, r7, #2
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
    uint8_t q = 255 - remainder;
 8000450:	1c7b      	adds	r3, r7, #1
 8000452:	1cfa      	adds	r2, r7, #3
 8000454:	7812      	ldrb	r2, [r2, #0]
 8000456:	43d2      	mvns	r2, r2
 8000458:	701a      	strb	r2, [r3, #0]
    uint8_t t = remainder;
 800045a:	003b      	movs	r3, r7
 800045c:	1cfa      	adds	r2, r7, #3
 800045e:	7812      	ldrb	r2, [r2, #0]
 8000460:	701a      	strb	r2, [r3, #0]

    switch (region) {
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b04      	cmp	r3, #4
 8000468:	d840      	bhi.n	80004ec <cycle_colors+0xe8>
 800046a:	009a      	lsls	r2, r3, #2
 800046c:	4b39      	ldr	r3, [pc, #228]	@ (8000554 <cycle_colors+0x150>)
 800046e:	18d3      	adds	r3, r2, r3
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	469f      	mov	pc, r3
        case 0: r = 255; g = t;   b = p; break;
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	22ff      	movs	r2, #255	@ 0xff
 8000478:	701a      	strb	r2, [r3, #0]
 800047a:	1dbb      	adds	r3, r7, #6
 800047c:	003a      	movs	r2, r7
 800047e:	7812      	ldrb	r2, [r2, #0]
 8000480:	701a      	strb	r2, [r3, #0]
 8000482:	1d7b      	adds	r3, r7, #5
 8000484:	1cba      	adds	r2, r7, #2
 8000486:	7812      	ldrb	r2, [r2, #0]
 8000488:	701a      	strb	r2, [r3, #0]
 800048a:	e03b      	b.n	8000504 <cycle_colors+0x100>
        case 1: r = q;   g = 255; b = p; break;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	1c7a      	adds	r2, r7, #1
 8000490:	7812      	ldrb	r2, [r2, #0]
 8000492:	701a      	strb	r2, [r3, #0]
 8000494:	1dbb      	adds	r3, r7, #6
 8000496:	22ff      	movs	r2, #255	@ 0xff
 8000498:	701a      	strb	r2, [r3, #0]
 800049a:	1d7b      	adds	r3, r7, #5
 800049c:	1cba      	adds	r2, r7, #2
 800049e:	7812      	ldrb	r2, [r2, #0]
 80004a0:	701a      	strb	r2, [r3, #0]
 80004a2:	e02f      	b.n	8000504 <cycle_colors+0x100>
        case 2: r = p;   g = 255; b = t; break;
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	1cba      	adds	r2, r7, #2
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	701a      	strb	r2, [r3, #0]
 80004ac:	1dbb      	adds	r3, r7, #6
 80004ae:	22ff      	movs	r2, #255	@ 0xff
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	1d7b      	adds	r3, r7, #5
 80004b4:	003a      	movs	r2, r7
 80004b6:	7812      	ldrb	r2, [r2, #0]
 80004b8:	701a      	strb	r2, [r3, #0]
 80004ba:	e023      	b.n	8000504 <cycle_colors+0x100>
        case 3: r = p;   g = q;   b = 255; break;
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	1cba      	adds	r2, r7, #2
 80004c0:	7812      	ldrb	r2, [r2, #0]
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	1c7a      	adds	r2, r7, #1
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	701a      	strb	r2, [r3, #0]
 80004cc:	1d7b      	adds	r3, r7, #5
 80004ce:	22ff      	movs	r2, #255	@ 0xff
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	e017      	b.n	8000504 <cycle_colors+0x100>
        case 4: r = t;   g = p;   b = 255; break;
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	003a      	movs	r2, r7
 80004d8:	7812      	ldrb	r2, [r2, #0]
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	1dbb      	adds	r3, r7, #6
 80004de:	1cba      	adds	r2, r7, #2
 80004e0:	7812      	ldrb	r2, [r2, #0]
 80004e2:	701a      	strb	r2, [r3, #0]
 80004e4:	1d7b      	adds	r3, r7, #5
 80004e6:	22ff      	movs	r2, #255	@ 0xff
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	e00b      	b.n	8000504 <cycle_colors+0x100>
        default: r = 255; g = p;  b = q; break;
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	22ff      	movs	r2, #255	@ 0xff
 80004f0:	701a      	strb	r2, [r3, #0]
 80004f2:	1dbb      	adds	r3, r7, #6
 80004f4:	1cba      	adds	r2, r7, #2
 80004f6:	7812      	ldrb	r2, [r2, #0]
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	1d7b      	adds	r3, r7, #5
 80004fc:	1c7a      	adds	r2, r7, #1
 80004fe:	7812      	ldrb	r2, [r2, #0]
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	46c0      	nop			@ (mov r8, r8)
    }

    set_led_color(0, g, r, b);
 8000504:	1d7b      	adds	r3, r7, #5
 8000506:	7818      	ldrb	r0, [r3, #0]
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781a      	ldrb	r2, [r3, #0]
 800050c:	1dbb      	adds	r3, r7, #6
 800050e:	7819      	ldrb	r1, [r3, #0]
 8000510:	0003      	movs	r3, r0
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff feb6 	bl	8000284 <set_led_color>
    clear_leds_except(0);
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff feef 	bl	80002fc <clear_leds_except>
    prepare_pwm_buffer();
 800051e:	f7ff ff0d 	bl	800033c <prepare_pwm_buffer>
    send_leds();
 8000522:	f7ff ff51 	bl	80003c8 <send_leds>

    hue = (hue + 2) % 256;
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <cycle_colors+0x14c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	3302      	adds	r3, #2
 800052c:	4a0a      	ldr	r2, [pc, #40]	@ (8000558 <cycle_colors+0x154>)
 800052e:	4013      	ands	r3, r2
 8000530:	d503      	bpl.n	800053a <cycle_colors+0x136>
 8000532:	3b01      	subs	r3, #1
 8000534:	4a09      	ldr	r2, [pc, #36]	@ (800055c <cycle_colors+0x158>)
 8000536:	4313      	orrs	r3, r2
 8000538:	3301      	adds	r3, #1
 800053a:	b2da      	uxtb	r2, r3
 800053c:	4b04      	ldr	r3, [pc, #16]	@ (8000550 <cycle_colors+0x14c>)
 800053e:	701a      	strb	r2, [r3, #0]
    HAL_Delay(50);
 8000540:	2032      	movs	r0, #50	@ 0x32
 8000542:	f000 fa8f 	bl	8000a64 <HAL_Delay>
}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b003      	add	sp, #12
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	2000028c 	.word	0x2000028c
 8000554:	08004bb4 	.word	0x08004bb4
 8000558:	800000ff 	.word	0x800000ff
 800055c:	ffffff00 	.word	0xffffff00

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 f9f8 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f809 	bl	800057e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f7ff fe74 	bl	8000258 <MX_GPIO_Init>
  MX_DMA_Init();
 8000570:	f7ff fe54 	bl	800021c <MX_DMA_Init>
  MX_TIM3_Init();
 8000574:	f000 f8c0 	bl	80006f8 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    cycle_colors();
 8000578:	f7ff ff44 	bl	8000404 <cycle_colors>
 800057c:	e7fc      	b.n	8000578 <main+0x18>

0800057e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057e:	b590      	push	{r4, r7, lr}
 8000580:	b093      	sub	sp, #76	@ 0x4c
 8000582:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000584:	2410      	movs	r4, #16
 8000586:	193b      	adds	r3, r7, r4
 8000588:	0018      	movs	r0, r3
 800058a:	2338      	movs	r3, #56	@ 0x38
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f004 fa0c 	bl	80049ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	003b      	movs	r3, r7
 8000596:	0018      	movs	r0, r3
 8000598:	2310      	movs	r3, #16
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f004 fa05 	bl	80049ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	2380      	movs	r3, #128	@ 0x80
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 f8ba 	bl	8001720 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2202      	movs	r2, #2
 80005b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2280      	movs	r2, #128	@ 0x80
 80005b6:	0052      	lsls	r2, r2, #1
 80005b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005ba:	0021      	movs	r1, r4
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2240      	movs	r2, #64	@ 0x40
 80005c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2202      	movs	r2, #2
 80005cc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2202      	movs	r2, #2
 80005d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2208      	movs	r2, #8
 80005de:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	0292      	lsls	r2, r2, #10
 80005e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2280      	movs	r2, #128	@ 0x80
 80005ec:	0492      	lsls	r2, r2, #18
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2280      	movs	r2, #128	@ 0x80
 80005f4:	0592      	lsls	r2, r2, #22
 80005f6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 f8e4 	bl	80017c8 <HAL_RCC_OscConfig>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000604:	f000 f819 	bl	800063a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	003b      	movs	r3, r7
 800060a:	2207      	movs	r2, #7
 800060c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	003b      	movs	r3, r7
 8000610:	2202      	movs	r2, #2
 8000612:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	003b      	movs	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061a:	003b      	movs	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000620:	003b      	movs	r3, r7
 8000622:	2102      	movs	r1, #2
 8000624:	0018      	movs	r0, r3
 8000626:	f001 fd3d 	bl	80020a4 <HAL_RCC_ClockConfig>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800062e:	f000 f804 	bl	800063a <Error_Handler>
  }
}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b013      	add	sp, #76	@ 0x4c
 8000638:	bd90      	pop	{r4, r7, pc}

0800063a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063e:	b672      	cpsid	i
}
 8000640:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	e7fd      	b.n	8000642 <Error_Handler+0x8>

08000646 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
 800064e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <HAL_MspInit+0x44>)
 8000660:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <HAL_MspInit+0x44>)
 8000664:	2101      	movs	r1, #1
 8000666:	430a      	orrs	r2, r1
 8000668:	641a      	str	r2, [r3, #64]	@ 0x40
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <HAL_MspInit+0x44>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <HAL_MspInit+0x44>)
 8000678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <HAL_MspInit+0x44>)
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	0549      	lsls	r1, r1, #21
 8000680:	430a      	orrs	r2, r1
 8000682:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <HAL_MspInit+0x44>)
 8000686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000688:	2380      	movs	r3, #128	@ 0x80
 800068a:	055b      	lsls	r3, r3, #21
 800068c:	4013      	ands	r3, r2
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b002      	add	sp, #8
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	40021000 	.word	0x40021000

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	e7fd      	b.n	80006a4 <NMI_Handler+0x4>

080006a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ac:	46c0      	nop			@ (mov r8, r8)
 80006ae:	e7fd      	b.n	80006ac <HardFault_Handler+0x4>

080006b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006b4:	46c0      	nop			@ (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c8:	f000 f9b0 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80006d8:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <DMA1_Channel1_IRQHandler+0x14>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fcb2 	bl	8001044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	200002dc 	.word	0x200002dc

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08e      	sub	sp, #56	@ 0x38
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	2328      	movs	r3, #40	@ 0x28
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	0018      	movs	r0, r3
 8000704:	2310      	movs	r3, #16
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f004 f94f 	bl	80049ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	231c      	movs	r3, #28
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	0018      	movs	r0, r3
 8000714:	230c      	movs	r3, #12
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f004 f947 	bl	80049ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071e:	003b      	movs	r3, r7
 8000720:	0018      	movs	r0, r3
 8000722:	231c      	movs	r3, #28
 8000724:	001a      	movs	r2, r3
 8000726:	2100      	movs	r1, #0
 8000728:	f004 f940 	bl	80049ac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800072c:	4b2f      	ldr	r3, [pc, #188]	@ (80007ec <MX_TIM3_Init+0xf4>)
 800072e:	4a30      	ldr	r2, [pc, #192]	@ (80007f0 <MX_TIM3_Init+0xf8>)
 8000730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000732:	4b2e      	ldr	r3, [pc, #184]	@ (80007ec <MX_TIM3_Init+0xf4>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <MX_TIM3_Init+0xf4>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 800073e:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <MX_TIM3_Init+0xf4>)
 8000740:	224f      	movs	r2, #79	@ 0x4f
 8000742:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <MX_TIM3_Init+0xf4>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <MX_TIM3_Init+0xf4>)
 800074c:	2280      	movs	r2, #128	@ 0x80
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000750:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <MX_TIM3_Init+0xf4>)
 8000752:	0018      	movs	r0, r3
 8000754:	f001 fed0 	bl	80024f8 <HAL_TIM_Base_Init>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800075c:	f7ff ff6d 	bl	800063a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	2128      	movs	r1, #40	@ 0x28
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2280      	movs	r2, #128	@ 0x80
 8000766:	0152      	lsls	r2, r2, #5
 8000768:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800076a:	187a      	adds	r2, r7, r1
 800076c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_TIM3_Init+0xf4>)
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f002 ff39 	bl	80035e8 <HAL_TIM_ConfigClockSource>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800077a:	f7ff ff5e 	bl	800063a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_TIM3_Init+0xf4>)
 8000780:	0018      	movs	r0, r3
 8000782:	f001 ffad 	bl	80026e0 <HAL_TIM_PWM_Init>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800078a:	f7ff ff56 	bl	800063a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	211c      	movs	r1, #28
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800079c:	187a      	adds	r2, r7, r1
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_TIM3_Init+0xf4>)
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f003 ffdc 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80007ac:	f7ff ff45 	bl	800063a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b0:	003b      	movs	r3, r7
 80007b2:	2260      	movs	r2, #96	@ 0x60
 80007b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007c8:	0039      	movs	r1, r7
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_TIM3_Init+0xf4>)
 80007cc:	2204      	movs	r2, #4
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 fd0c 	bl	80031ec <HAL_TIM_PWM_ConfigChannel>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80007d8:	f7ff ff2f 	bl	800063a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007dc:	4b03      	ldr	r3, [pc, #12]	@ (80007ec <MX_TIM3_Init+0xf4>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f854 	bl	800088c <HAL_TIM_MspPostInit>

}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b00e      	add	sp, #56	@ 0x38
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000290 	.word	0x20000290
 80007f0:	40000400 	.word	0x40000400

080007f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a1e      	ldr	r2, [pc, #120]	@ (800087c <HAL_TIM_Base_MspInit+0x88>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d136      	bne.n	8000874 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <HAL_TIM_Base_MspInit+0x8c>)
 8000808:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800080a:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <HAL_TIM_Base_MspInit+0x8c>)
 800080c:	2102      	movs	r1, #2
 800080e:	430a      	orrs	r2, r1
 8000810:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <HAL_TIM_Base_MspInit+0x8c>)
 8000814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000816:	2202      	movs	r2, #2
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 8000820:	4a19      	ldr	r2, [pc, #100]	@ (8000888 <HAL_TIM_Base_MspInit+0x94>)
 8000822:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 8000826:	2221      	movs	r2, #33	@ 0x21
 8000828:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 800082c:	2210      	movs	r2, #16
 800082e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 800083e:	2280      	movs	r2, #128	@ 0x80
 8000840:	0052      	lsls	r2, r2, #1
 8000842:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 8000846:	2280      	movs	r2, #128	@ 0x80
 8000848:	00d2      	lsls	r2, r2, #3
 800084a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 800084e:	2220      	movs	r2, #32
 8000850:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fa1c 	bl	8000c98 <HAL_DMA_Init>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000864:	f7ff fee9 	bl	800063a <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
 800086e:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <HAL_TIM_Base_MspInit+0x90>)
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b004      	add	sp, #16
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40000400 	.word	0x40000400
 8000880:	40021000 	.word	0x40021000
 8000884:	200002dc 	.word	0x200002dc
 8000888:	40020008 	.word	0x40020008

0800088c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b089      	sub	sp, #36	@ 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	240c      	movs	r4, #12
 8000896:	193b      	adds	r3, r7, r4
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f004 f884 	bl	80049ac <memset>
  if(timHandle->Instance==TIM3)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <HAL_TIM_MspPostInit+0x70>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d122      	bne.n	80008f4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <HAL_TIM_MspPostInit+0x74>)
 80008b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <HAL_TIM_MspPostInit+0x74>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <HAL_TIM_MspPostInit+0x74>)
 80008bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008c6:	0021      	movs	r1, r4
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2280      	movs	r2, #128	@ 0x80
 80008cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2202      	movs	r2, #2
 80008d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2201      	movs	r2, #1
 80008e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	187a      	adds	r2, r7, r1
 80008e8:	23a0      	movs	r3, #160	@ 0xa0
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fcea 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b009      	add	sp, #36	@ 0x24
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	40000400 	.word	0x40000400
 8000900:	40021000 	.word	0x40021000

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480d      	ldr	r0, [pc, #52]	@ (800093c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f7ff fef0 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	@ (8000940 <LoopForever+0x6>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	@ (8000944 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <LoopForever+0xe>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	@ (8000950 <LoopForever+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000932:	f004 f843 	bl	80049bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000936:	f7ff fe13 	bl	8000560 <main>

0800093a <LoopForever>:

LoopForever:
  b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   r0, =_estack
 800093c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000948:	08004c64 	.word	0x08004c64
  ldr r2, =_sbss
 800094c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000950:	2000033c 	.word	0x2000033c

08000954 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC1_IRQHandler>
	...

08000958 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <HAL_Init+0x3c>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_Init+0x3c>)
 800096a:	2180      	movs	r1, #128	@ 0x80
 800096c:	0049      	lsls	r1, r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000972:	2003      	movs	r0, #3
 8000974:	f000 f810 	bl	8000998 <HAL_InitTick>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d003      	beq.n	8000984 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e001      	b.n	8000988 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff fe68 	bl	8000658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	781b      	ldrb	r3, [r3, #0]
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b002      	add	sp, #8
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a0:	230f      	movs	r3, #15
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <HAL_InitTick+0x88>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d02b      	beq.n	8000a08 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80009b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <HAL_InitTick+0x8c>)
 80009b2:	681c      	ldr	r4, [r3, #0]
 80009b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <HAL_InitTick+0x88>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	0019      	movs	r1, r3
 80009ba:	23fa      	movs	r3, #250	@ 0xfa
 80009bc:	0098      	lsls	r0, r3, #2
 80009be:	f7ff fba1 	bl	8000104 <__udivsi3>
 80009c2:	0003      	movs	r3, r0
 80009c4:	0019      	movs	r1, r3
 80009c6:	0020      	movs	r0, r4
 80009c8:	f7ff fb9c 	bl	8000104 <__udivsi3>
 80009cc:	0003      	movs	r3, r0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f954 	bl	8000c7c <HAL_SYSTICK_Config>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d112      	bne.n	80009fe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d80a      	bhi.n	80009f4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	2301      	movs	r3, #1
 80009e2:	425b      	negs	r3, r3
 80009e4:	2200      	movs	r2, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 f90c 	bl	8000c04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <HAL_InitTick+0x90>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	e00d      	b.n	8000a10 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009f4:	230f      	movs	r3, #15
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e008      	b.n	8000a10 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009fe:	230f      	movs	r3, #15
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e003      	b.n	8000a10 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a10:	230f      	movs	r3, #15
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	781b      	ldrb	r3, [r3, #0]
}
 8000a16:	0018      	movs	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b005      	add	sp, #20
 8000a1c:	bd90      	pop	{r4, r7, pc}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <HAL_IncTick+0x1c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	001a      	movs	r2, r3
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	18d2      	adds	r2, r2, r3
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000338 	.word	0x20000338

08000a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b02      	ldr	r3, [pc, #8]	@ (8000a60 <HAL_GetTick+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	20000338 	.word	0x20000338

08000a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff fff0 	bl	8000a50 <HAL_GetTick>
 8000a70:	0003      	movs	r3, r0
 8000a72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	d005      	beq.n	8000a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <HAL_Delay+0x44>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	001a      	movs	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	189b      	adds	r3, r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	f7ff ffe0 	bl	8000a50 <HAL_GetTick>
 8000a90:	0002      	movs	r2, r0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8f7      	bhi.n	8000a8c <HAL_Delay+0x28>
  {
  }
}
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	20000008 	.word	0x20000008

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000abe:	d809      	bhi.n	8000ad4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	231f      	movs	r3, #31
 8000ac8:	401a      	ands	r2, r3
 8000aca:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <__NVIC_EnableIRQ+0x30>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	4091      	lsls	r1, r2
 8000ad0:	000a      	movs	r2, r1
 8000ad2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000af4:	d828      	bhi.n	8000b48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af6:	4a2f      	ldr	r2, [pc, #188]	@ (8000bb4 <__NVIC_SetPriority+0xd4>)
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	33c0      	adds	r3, #192	@ 0xc0
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	589b      	ldr	r3, [r3, r2]
 8000b06:	1dfa      	adds	r2, r7, #7
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	400a      	ands	r2, r1
 8000b10:	00d2      	lsls	r2, r2, #3
 8000b12:	21ff      	movs	r1, #255	@ 0xff
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	22ff      	movs	r2, #255	@ 0xff
 8000b24:	401a      	ands	r2, r3
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	4003      	ands	r3, r0
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	481f      	ldr	r0, [pc, #124]	@ (8000bb4 <__NVIC_SetPriority+0xd4>)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	089b      	lsrs	r3, r3, #2
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	33c0      	adds	r3, #192	@ 0xc0
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b46:	e031      	b.n	8000bac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb8 <__NVIC_SetPriority+0xd8>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0019      	movs	r1, r3
 8000b50:	230f      	movs	r3, #15
 8000b52:	400b      	ands	r3, r1
 8000b54:	3b08      	subs	r3, #8
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	3306      	adds	r3, #6
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	18d3      	adds	r3, r2, r3
 8000b5e:	3304      	adds	r3, #4
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1dfa      	adds	r2, r7, #7
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	0011      	movs	r1, r2
 8000b68:	2203      	movs	r2, #3
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	00d2      	lsls	r2, r2, #3
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
 8000b70:	4091      	lsls	r1, r2
 8000b72:	000a      	movs	r2, r1
 8000b74:	43d2      	mvns	r2, r2
 8000b76:	401a      	ands	r2, r3
 8000b78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	019b      	lsls	r3, r3, #6
 8000b7e:	22ff      	movs	r2, #255	@ 0xff
 8000b80:	401a      	ands	r2, r3
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	0018      	movs	r0, r3
 8000b88:	2303      	movs	r3, #3
 8000b8a:	4003      	ands	r3, r0
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	4809      	ldr	r0, [pc, #36]	@ (8000bb8 <__NVIC_SetPriority+0xd8>)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	001c      	movs	r4, r3
 8000b98:	230f      	movs	r3, #15
 8000b9a:	4023      	ands	r3, r4
 8000b9c:	3b08      	subs	r3, #8
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	3306      	adds	r3, #6
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	18c3      	adds	r3, r0, r3
 8000ba8:	3304      	adds	r3, #4
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	045b      	lsls	r3, r3, #17
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d301      	bcc.n	8000bd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e010      	b.n	8000bf6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <SysTick_Config+0x44>)
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bdc:	2301      	movs	r3, #1
 8000bde:	425b      	negs	r3, r3
 8000be0:	2103      	movs	r1, #3
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff ff7c 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <SysTick_Config+0x44>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <SysTick_Config+0x44>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	230f      	movs	r3, #15
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	1c02      	adds	r2, r0, #0
 8000c14:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d904      	bls.n	8000c26 <HAL_NVIC_SetPriority+0x22>
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_NVIC_SetPriority+0x3c>)
 8000c1e:	2189      	movs	r1, #137	@ 0x89
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fd10 	bl	8000646 <assert_failed>
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff ff54 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b004      	add	sp, #16
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	08004a1c 	.word	0x08004a1c

08000c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c56:	d904      	bls.n	8000c62 <HAL_NVIC_EnableIRQ+0x1e>
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <HAL_NVIC_EnableIRQ+0x34>)
 8000c5a:	2197      	movs	r1, #151	@ 0x97
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff fcf2 	bl	8000646 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ff1f 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	08004a1c 	.word	0x08004a1c

08000c7c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff ff98 	bl	8000bbc <SysTick_Config>
 8000c8c:	0003      	movs	r3, r0
}
 8000c8e:	0018      	movs	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e11d      	b.n	8000ee6 <HAL_DMA_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a90      	ldr	r2, [pc, #576]	@ (8000ef0 <HAL_DMA_Init+0x258>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d018      	beq.n	8000ce6 <HAL_DMA_Init+0x4e>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a8e      	ldr	r2, [pc, #568]	@ (8000ef4 <HAL_DMA_Init+0x25c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d013      	beq.n	8000ce6 <HAL_DMA_Init+0x4e>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a8d      	ldr	r2, [pc, #564]	@ (8000ef8 <HAL_DMA_Init+0x260>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d00e      	beq.n	8000ce6 <HAL_DMA_Init+0x4e>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a8b      	ldr	r2, [pc, #556]	@ (8000efc <HAL_DMA_Init+0x264>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d009      	beq.n	8000ce6 <HAL_DMA_Init+0x4e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a8a      	ldr	r2, [pc, #552]	@ (8000f00 <HAL_DMA_Init+0x268>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d004      	beq.n	8000ce6 <HAL_DMA_Init+0x4e>
 8000cdc:	4b89      	ldr	r3, [pc, #548]	@ (8000f04 <HAL_DMA_Init+0x26c>)
 8000cde:	21a1      	movs	r1, #161	@ 0xa1
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff fcb0 	bl	8000646 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00e      	beq.n	8000d0c <HAL_DMA_Init+0x74>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b10      	cmp	r3, #16
 8000cf4:	d00a      	beq.n	8000d0c <HAL_DMA_Init+0x74>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	01db      	lsls	r3, r3, #7
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d004      	beq.n	8000d0c <HAL_DMA_Init+0x74>
 8000d02:	4b80      	ldr	r3, [pc, #512]	@ (8000f04 <HAL_DMA_Init+0x26c>)
 8000d04:	21a2      	movs	r1, #162	@ 0xa2
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff fc9d 	bl	8000646 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	2b40      	cmp	r3, #64	@ 0x40
 8000d12:	d008      	beq.n	8000d26 <HAL_DMA_Init+0x8e>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d004      	beq.n	8000d26 <HAL_DMA_Init+0x8e>
 8000d1c:	4b79      	ldr	r3, [pc, #484]	@ (8000f04 <HAL_DMA_Init+0x26c>)
 8000d1e:	21a3      	movs	r1, #163	@ 0xa3
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff fc90 	bl	8000646 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	2b80      	cmp	r3, #128	@ 0x80
 8000d2c:	d008      	beq.n	8000d40 <HAL_DMA_Init+0xa8>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <HAL_DMA_Init+0xa8>
 8000d36:	4b73      	ldr	r3, [pc, #460]	@ (8000f04 <HAL_DMA_Init+0x26c>)
 8000d38:	21a4      	movs	r1, #164	@ 0xa4
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fc83 	bl	8000646 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d010      	beq.n	8000d6a <HAL_DMA_Init+0xd2>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d00a      	beq.n	8000d6a <HAL_DMA_Init+0xd2>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695a      	ldr	r2, [r3, #20]
 8000d58:	2380      	movs	r3, #128	@ 0x80
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d004      	beq.n	8000d6a <HAL_DMA_Init+0xd2>
 8000d60:	4b68      	ldr	r3, [pc, #416]	@ (8000f04 <HAL_DMA_Init+0x26c>)
 8000d62:	21a5      	movs	r1, #165	@ 0xa5
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff fc6e 	bl	8000646 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d010      	beq.n	8000d94 <HAL_DMA_Init+0xfc>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	699a      	ldr	r2, [r3, #24]
 8000d76:	2380      	movs	r3, #128	@ 0x80
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d00a      	beq.n	8000d94 <HAL_DMA_Init+0xfc>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699a      	ldr	r2, [r3, #24]
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d004      	beq.n	8000d94 <HAL_DMA_Init+0xfc>
 8000d8a:	4b5e      	ldr	r3, [pc, #376]	@ (8000f04 <HAL_DMA_Init+0x26c>)
 8000d8c:	21a6      	movs	r1, #166	@ 0xa6
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff fc59 	bl	8000646 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d008      	beq.n	8000dae <HAL_DMA_Init+0x116>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	2b20      	cmp	r3, #32
 8000da2:	d004      	beq.n	8000dae <HAL_DMA_Init+0x116>
 8000da4:	4b57      	ldr	r3, [pc, #348]	@ (8000f04 <HAL_DMA_Init+0x26c>)
 8000da6:	21a7      	movs	r1, #167	@ 0xa7
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fc4c 	bl	8000646 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d016      	beq.n	8000de4 <HAL_DMA_Init+0x14c>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a1a      	ldr	r2, [r3, #32]
 8000dba:	2380      	movs	r3, #128	@ 0x80
 8000dbc:	015b      	lsls	r3, r3, #5
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d010      	beq.n	8000de4 <HAL_DMA_Init+0x14c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1a      	ldr	r2, [r3, #32]
 8000dc6:	2380      	movs	r3, #128	@ 0x80
 8000dc8:	019b      	lsls	r3, r3, #6
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d00a      	beq.n	8000de4 <HAL_DMA_Init+0x14c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1a      	ldr	r2, [r3, #32]
 8000dd2:	23c0      	movs	r3, #192	@ 0xc0
 8000dd4:	019b      	lsls	r3, r3, #6
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d004      	beq.n	8000de4 <HAL_DMA_Init+0x14c>
 8000dda:	4b4a      	ldr	r3, [pc, #296]	@ (8000f04 <HAL_DMA_Init+0x26c>)
 8000ddc:	21a8      	movs	r1, #168	@ 0xa8
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff fc31 	bl	8000646 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b35      	cmp	r3, #53	@ 0x35
 8000dea:	d904      	bls.n	8000df6 <HAL_DMA_Init+0x15e>
 8000dec:	4b45      	ldr	r3, [pc, #276]	@ (8000f04 <HAL_DMA_Init+0x26c>)
 8000dee:	21aa      	movs	r1, #170	@ 0xaa
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff fc28 	bl	8000646 <assert_failed>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a43      	ldr	r2, [pc, #268]	@ (8000f08 <HAL_DMA_Init+0x270>)
 8000dfc:	4694      	mov	ip, r2
 8000dfe:	4463      	add	r3, ip
 8000e00:	2114      	movs	r1, #20
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff f97e 	bl	8000104 <__udivsi3>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	009a      	lsls	r2, r3, #2
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2225      	movs	r2, #37	@ 0x25
 8000e14:	2102      	movs	r1, #2
 8000e16:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	493a      	ldr	r1, [pc, #232]	@ (8000f0c <HAL_DMA_Init+0x274>)
 8000e24:	400a      	ands	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a1b      	ldr	r3, [r3, #32]
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 f9e1 	bl	8001228 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	2380      	movs	r3, #128	@ 0x80
 8000e6c:	01db      	lsls	r3, r3, #7
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d102      	bne.n	8000e78 <HAL_DMA_Init+0x1e0>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e80:	213f      	movs	r1, #63	@ 0x3f
 8000e82:	400a      	ands	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000e8e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d011      	beq.n	8000ebc <HAL_DMA_Init+0x224>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d80d      	bhi.n	8000ebc <HAL_DMA_Init+0x224>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 f9ec 	bl	8001280 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	e008      	b.n	8000ece <HAL_DMA_Init+0x236>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2225      	movs	r2, #37	@ 0x25
 8000ed8:	2101      	movs	r1, #1
 8000eda:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2224      	movs	r2, #36	@ 0x24
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	40020008 	.word	0x40020008
 8000ef4:	4002001c 	.word	0x4002001c
 8000ef8:	40020030 	.word	0x40020030
 8000efc:	40020044 	.word	0x40020044
 8000f00:	40020058 	.word	0x40020058
 8000f04:	08004a58 	.word	0x08004a58
 8000f08:	bffdfff8 	.word	0xbffdfff8
 8000f0c:	ffff800f 	.word	0xffff800f

08000f10 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1e:	2317      	movs	r3, #23
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_DMA_Start_IT+0x24>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	4a43      	ldr	r2, [pc, #268]	@ (800103c <HAL_DMA_Start_IT+0x12c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d907      	bls.n	8000f44 <HAL_DMA_Start_IT+0x34>
 8000f34:	23b8      	movs	r3, #184	@ 0xb8
 8000f36:	33ff      	adds	r3, #255	@ 0xff
 8000f38:	001a      	movs	r2, r3
 8000f3a:	4b41      	ldr	r3, [pc, #260]	@ (8001040 <HAL_DMA_Start_IT+0x130>)
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff fb81 	bl	8000646 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2224      	movs	r2, #36	@ 0x24
 8000f48:	5c9b      	ldrb	r3, [r3, r2]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d101      	bne.n	8000f52 <HAL_DMA_Start_IT+0x42>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e06f      	b.n	8001032 <HAL_DMA_Start_IT+0x122>
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2224      	movs	r2, #36	@ 0x24
 8000f56:	2101      	movs	r1, #1
 8000f58:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2225      	movs	r2, #37	@ 0x25
 8000f5e:	5c9b      	ldrb	r3, [r3, r2]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d157      	bne.n	8001016 <HAL_DMA_Start_IT+0x106>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2225      	movs	r2, #37	@ 0x25
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2200      	movs	r2, #0
 8000f72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	438a      	bics	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 f90c 	bl	80011a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d008      	beq.n	8000faa <HAL_DMA_Start_IT+0x9a>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	210e      	movs	r1, #14
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e00f      	b.n	8000fca <HAL_DMA_Start_IT+0xba>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	438a      	bics	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	210a      	movs	r1, #10
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d008      	beq.n	8000fea <HAL_DMA_Start_IT+0xda>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	2180      	movs	r1, #128	@ 0x80
 8000fe4:	0049      	lsls	r1, r1, #1
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <HAL_DMA_Start_IT+0xf4>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ffc:	2180      	movs	r1, #128	@ 0x80
 8000ffe:	0049      	lsls	r1, r1, #1
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2101      	movs	r1, #1
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e00a      	b.n	800102c <HAL_DMA_Start_IT+0x11c>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2280      	movs	r2, #128	@ 0x80
 800101a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2224      	movs	r2, #36	@ 0x24
 8001020:	2100      	movs	r1, #0
 8001022:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001024:	2317      	movs	r3, #23
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800102c:	2317      	movs	r3, #23
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	781b      	ldrb	r3, [r3, #0]
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b006      	add	sp, #24
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	0000fffe 	.word	0x0000fffe
 8001040:	08004a58 	.word	0x08004a58

08001044 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800104c:	4b55      	ldr	r3, [pc, #340]	@ (80011a4 <HAL_DMA_IRQHandler+0x160>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	221c      	movs	r2, #28
 8001060:	4013      	ands	r3, r2
 8001062:	2204      	movs	r2, #4
 8001064:	409a      	lsls	r2, r3
 8001066:	0013      	movs	r3, r2
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4013      	ands	r3, r2
 800106c:	d027      	beq.n	80010be <HAL_DMA_IRQHandler+0x7a>
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2204      	movs	r2, #4
 8001072:	4013      	ands	r3, r2
 8001074:	d023      	beq.n	80010be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2220      	movs	r2, #32
 800107e:	4013      	ands	r3, r2
 8001080:	d107      	bne.n	8001092 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2104      	movs	r1, #4
 800108e:	438a      	bics	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001092:	4b44      	ldr	r3, [pc, #272]	@ (80011a4 <HAL_DMA_IRQHandler+0x160>)
 8001094:	6859      	ldr	r1, [r3, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	221c      	movs	r2, #28
 800109c:	4013      	ands	r3, r2
 800109e:	2204      	movs	r2, #4
 80010a0:	409a      	lsls	r2, r3
 80010a2:	4b40      	ldr	r3, [pc, #256]	@ (80011a4 <HAL_DMA_IRQHandler+0x160>)
 80010a4:	430a      	orrs	r2, r1
 80010a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d100      	bne.n	80010b2 <HAL_DMA_IRQHandler+0x6e>
 80010b0:	e073      	b.n	800119a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	0010      	movs	r0, r2
 80010ba:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80010bc:	e06d      	b.n	800119a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	221c      	movs	r2, #28
 80010c4:	4013      	ands	r3, r2
 80010c6:	2202      	movs	r2, #2
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	d02e      	beq.n	8001130 <HAL_DMA_IRQHandler+0xec>
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2202      	movs	r2, #2
 80010d6:	4013      	ands	r3, r2
 80010d8:	d02a      	beq.n	8001130 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2220      	movs	r2, #32
 80010e2:	4013      	ands	r3, r2
 80010e4:	d10b      	bne.n	80010fe <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	210a      	movs	r1, #10
 80010f2:	438a      	bics	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2225      	movs	r2, #37	@ 0x25
 80010fa:	2101      	movs	r1, #1
 80010fc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80010fe:	4b29      	ldr	r3, [pc, #164]	@ (80011a4 <HAL_DMA_IRQHandler+0x160>)
 8001100:	6859      	ldr	r1, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	221c      	movs	r2, #28
 8001108:	4013      	ands	r3, r2
 800110a:	2202      	movs	r2, #2
 800110c:	409a      	lsls	r2, r3
 800110e:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <HAL_DMA_IRQHandler+0x160>)
 8001110:	430a      	orrs	r2, r1
 8001112:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2224      	movs	r2, #36	@ 0x24
 8001118:	2100      	movs	r1, #0
 800111a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001120:	2b00      	cmp	r3, #0
 8001122:	d03a      	beq.n	800119a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	0010      	movs	r0, r2
 800112c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800112e:	e034      	b.n	800119a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	221c      	movs	r2, #28
 8001136:	4013      	ands	r3, r2
 8001138:	2208      	movs	r2, #8
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4013      	ands	r3, r2
 8001142:	d02b      	beq.n	800119c <HAL_DMA_IRQHandler+0x158>
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2208      	movs	r2, #8
 8001148:	4013      	ands	r3, r2
 800114a:	d027      	beq.n	800119c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	210e      	movs	r1, #14
 8001158:	438a      	bics	r2, r1
 800115a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_DMA_IRQHandler+0x160>)
 800115e:	6859      	ldr	r1, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	221c      	movs	r2, #28
 8001166:	4013      	ands	r3, r2
 8001168:	2201      	movs	r2, #1
 800116a:	409a      	lsls	r2, r3
 800116c:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <HAL_DMA_IRQHandler+0x160>)
 800116e:	430a      	orrs	r2, r1
 8001170:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2225      	movs	r2, #37	@ 0x25
 800117c:	2101      	movs	r1, #1
 800117e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2224      	movs	r2, #36	@ 0x24
 8001184:	2100      	movs	r1, #0
 8001186:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	0010      	movs	r0, r2
 8001198:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	46c0      	nop			@ (mov r8, r8)
}
 800119e:	46bd      	mov	sp, r7
 80011a0:	b004      	add	sp, #16
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40020000 	.word	0x40020000

080011a8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80011be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80011d0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <DMA_SetConfig+0x7c>)
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	221c      	movs	r2, #28
 80011dc:	4013      	ands	r3, r2
 80011de:	2201      	movs	r2, #1
 80011e0:	409a      	lsls	r2, r3
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <DMA_SetConfig+0x7c>)
 80011e4:	430a      	orrs	r2, r1
 80011e6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b10      	cmp	r3, #16
 80011f6:	d108      	bne.n	800120a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001208:	e007      	b.n	800121a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	60da      	str	r2, [r3, #12]
}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b004      	add	sp, #16
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	40020000 	.word	0x40020000

08001228 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	4a10      	ldr	r2, [pc, #64]	@ (8001278 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001238:	4694      	mov	ip, r2
 800123a:	4463      	add	r3, ip
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	001a      	movs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	001a      	movs	r2, r3
 800124a:	23ff      	movs	r3, #255	@ 0xff
 800124c:	4013      	ands	r3, r2
 800124e:	3b08      	subs	r3, #8
 8001250:	2114      	movs	r1, #20
 8001252:	0018      	movs	r0, r3
 8001254:	f7fe ff56 	bl	8000104 <__udivsi3>
 8001258:	0003      	movs	r3, r0
 800125a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a07      	ldr	r2, [pc, #28]	@ (800127c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001260:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	221f      	movs	r2, #31
 8001266:	4013      	ands	r3, r2
 8001268:	2201      	movs	r2, #1
 800126a:	409a      	lsls	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bd80      	pop	{r7, pc}
 8001278:	10008200 	.word	0x10008200
 800127c:	40020880 	.word	0x40020880

08001280 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	223f      	movs	r2, #63	@ 0x3f
 800128e:	4013      	ands	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001296:	4694      	mov	ip, r2
 8001298:	4463      	add	r3, ip
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	001a      	movs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80012a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	4013      	ands	r3, r2
 80012b0:	2201      	movs	r2, #1
 80012b2:	409a      	lsls	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80012b8:	46c0      	nop			@ (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b004      	add	sp, #16
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	1000823f 	.word	0x1000823f
 80012c4:	40020940 	.word	0x40020940

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	23a0      	movs	r3, #160	@ 0xa0
 80012da:	05db      	lsls	r3, r3, #23
 80012dc:	429a      	cmp	r2, r3
 80012de:	d014      	beq.n	800130a <HAL_GPIO_Init+0x42>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4acc      	ldr	r2, [pc, #816]	@ (8001614 <HAL_GPIO_Init+0x34c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d010      	beq.n	800130a <HAL_GPIO_Init+0x42>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4acb      	ldr	r2, [pc, #812]	@ (8001618 <HAL_GPIO_Init+0x350>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00c      	beq.n	800130a <HAL_GPIO_Init+0x42>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4aca      	ldr	r2, [pc, #808]	@ (800161c <HAL_GPIO_Init+0x354>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d008      	beq.n	800130a <HAL_GPIO_Init+0x42>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4ac9      	ldr	r2, [pc, #804]	@ (8001620 <HAL_GPIO_Init+0x358>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d004      	beq.n	800130a <HAL_GPIO_Init+0x42>
 8001300:	4bc8      	ldr	r3, [pc, #800]	@ (8001624 <HAL_GPIO_Init+0x35c>)
 8001302:	21a9      	movs	r1, #169	@ 0xa9
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff f99e 	bl	8000646 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	041b      	lsls	r3, r3, #16
 8001310:	0c1b      	lsrs	r3, r3, #16
 8001312:	d005      	beq.n	8001320 <HAL_GPIO_Init+0x58>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2380      	movs	r3, #128	@ 0x80
 800131a:	025b      	lsls	r3, r3, #9
 800131c:	429a      	cmp	r2, r3
 800131e:	d304      	bcc.n	800132a <HAL_GPIO_Init+0x62>
 8001320:	4bc0      	ldr	r3, [pc, #768]	@ (8001624 <HAL_GPIO_Init+0x35c>)
 8001322:	21aa      	movs	r1, #170	@ 0xaa
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff f98e 	bl	8000646 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d100      	bne.n	8001334 <HAL_GPIO_Init+0x6c>
 8001332:	e1e6      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d100      	bne.n	800133e <HAL_GPIO_Init+0x76>
 800133c:	e1e1      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b11      	cmp	r3, #17
 8001344:	d100      	bne.n	8001348 <HAL_GPIO_Init+0x80>
 8001346:	e1dc      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d100      	bne.n	8001352 <HAL_GPIO_Init+0x8a>
 8001350:	e1d7      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b12      	cmp	r3, #18
 8001358:	d100      	bne.n	800135c <HAL_GPIO_Init+0x94>
 800135a:	e1d2      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	2388      	movs	r3, #136	@ 0x88
 8001362:	035b      	lsls	r3, r3, #13
 8001364:	429a      	cmp	r2, r3
 8001366:	d100      	bne.n	800136a <HAL_GPIO_Init+0xa2>
 8001368:	e1cb      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	2384      	movs	r3, #132	@ 0x84
 8001370:	039b      	lsls	r3, r3, #14
 8001372:	429a      	cmp	r2, r3
 8001374:	d100      	bne.n	8001378 <HAL_GPIO_Init+0xb0>
 8001376:	e1c4      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	23c4      	movs	r3, #196	@ 0xc4
 800137e:	039b      	lsls	r3, r3, #14
 8001380:	429a      	cmp	r2, r3
 8001382:	d100      	bne.n	8001386 <HAL_GPIO_Init+0xbe>
 8001384:	e1bd      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	2390      	movs	r3, #144	@ 0x90
 800138c:	035b      	lsls	r3, r3, #13
 800138e:	429a      	cmp	r2, r3
 8001390:	d100      	bne.n	8001394 <HAL_GPIO_Init+0xcc>
 8001392:	e1b6      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	2388      	movs	r3, #136	@ 0x88
 800139a:	039b      	lsls	r3, r3, #14
 800139c:	429a      	cmp	r2, r3
 800139e:	d100      	bne.n	80013a2 <HAL_GPIO_Init+0xda>
 80013a0:	e1af      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	23c8      	movs	r3, #200	@ 0xc8
 80013a8:	039b      	lsls	r3, r3, #14
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d100      	bne.n	80013b0 <HAL_GPIO_Init+0xe8>
 80013ae:	e1a8      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d100      	bne.n	80013ba <HAL_GPIO_Init+0xf2>
 80013b8:	e1a3      	b.n	8001702 <HAL_GPIO_Init+0x43a>
 80013ba:	4b9a      	ldr	r3, [pc, #616]	@ (8001624 <HAL_GPIO_Init+0x35c>)
 80013bc:	21ab      	movs	r1, #171	@ 0xab
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff f941 	bl	8000646 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c4:	e19d      	b.n	8001702 <HAL_GPIO_Init+0x43a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2101      	movs	r1, #1
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	4091      	lsls	r1, r2
 80013d0:	000a      	movs	r2, r1
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d100      	bne.n	80013de <HAL_GPIO_Init+0x116>
 80013dc:	e18e      	b.n	80016fc <HAL_GPIO_Init+0x434>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2203      	movs	r2, #3
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d005      	beq.n	80013f6 <HAL_GPIO_Init+0x12e>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2203      	movs	r2, #3
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d145      	bne.n	8001482 <HAL_GPIO_Init+0x1ba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d010      	beq.n	8001420 <HAL_GPIO_Init+0x158>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d00c      	beq.n	8001420 <HAL_GPIO_Init+0x158>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d008      	beq.n	8001420 <HAL_GPIO_Init+0x158>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d004      	beq.n	8001420 <HAL_GPIO_Init+0x158>
 8001416:	4b83      	ldr	r3, [pc, #524]	@ (8001624 <HAL_GPIO_Init+0x35c>)
 8001418:	21ba      	movs	r1, #186	@ 0xba
 800141a:	0018      	movs	r0, r3
 800141c:	f7ff f913 	bl	8000646 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	409a      	lsls	r2, r3
 800142e:	0013      	movs	r3, r2
 8001430:	43da      	mvns	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	409a      	lsls	r2, r3
 8001442:	0013      	movs	r3, r2
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001456:	2201      	movs	r2, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
 800145c:	0013      	movs	r3, r2
 800145e:	43da      	mvns	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	2201      	movs	r2, #1
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	4013      	ands	r3, r2
 800148a:	2b03      	cmp	r3, #3
 800148c:	d028      	beq.n	80014e0 <HAL_GPIO_Init+0x218>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00c      	beq.n	80014b0 <HAL_GPIO_Init+0x1e8>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d008      	beq.n	80014b0 <HAL_GPIO_Init+0x1e8>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d004      	beq.n	80014b0 <HAL_GPIO_Init+0x1e8>
 80014a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001624 <HAL_GPIO_Init+0x35c>)
 80014a8:	21cc      	movs	r1, #204	@ 0xcc
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff f8cb 	bl	8000646 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	409a      	lsls	r2, r3
 80014be:	0013      	movs	r3, r2
 80014c0:	43da      	mvns	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	0013      	movs	r3, r2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2203      	movs	r2, #3
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d146      	bne.n	800157a <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	23a0      	movs	r3, #160	@ 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d014      	beq.n	8001520 <HAL_GPIO_Init+0x258>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a46      	ldr	r2, [pc, #280]	@ (8001614 <HAL_GPIO_Init+0x34c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d010      	beq.n	8001520 <HAL_GPIO_Init+0x258>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a45      	ldr	r2, [pc, #276]	@ (8001618 <HAL_GPIO_Init+0x350>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00c      	beq.n	8001520 <HAL_GPIO_Init+0x258>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a44      	ldr	r2, [pc, #272]	@ (800161c <HAL_GPIO_Init+0x354>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d008      	beq.n	8001520 <HAL_GPIO_Init+0x258>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a43      	ldr	r2, [pc, #268]	@ (8001620 <HAL_GPIO_Init+0x358>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d004      	beq.n	8001520 <HAL_GPIO_Init+0x258>
 8001516:	4b43      	ldr	r3, [pc, #268]	@ (8001624 <HAL_GPIO_Init+0x35c>)
 8001518:	21d9      	movs	r1, #217	@ 0xd9
 800151a:	0018      	movs	r0, r3
 800151c:	f7ff f893 	bl	8000646 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b07      	cmp	r3, #7
 8001526:	d904      	bls.n	8001532 <HAL_GPIO_Init+0x26a>
 8001528:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <HAL_GPIO_Init+0x35c>)
 800152a:	21da      	movs	r1, #218	@ 0xda
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff f88a 	bl	8000646 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	08da      	lsrs	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3208      	adds	r2, #8
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	58d3      	ldr	r3, [r2, r3]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2207      	movs	r2, #7
 8001544:	4013      	ands	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	43da      	mvns	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	691a      	ldr	r2, [r3, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2107      	movs	r1, #7
 800155e:	400b      	ands	r3, r1
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	08da      	lsrs	r2, r3, #3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3208      	adds	r2, #8
 8001574:	0092      	lsls	r2, r2, #2
 8001576:	6939      	ldr	r1, [r7, #16]
 8001578:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	43da      	mvns	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2203      	movs	r2, #3
 8001598:	401a      	ands	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	23c0      	movs	r3, #192	@ 0xc0
 80015b4:	029b      	lsls	r3, r3, #10
 80015b6:	4013      	ands	r3, r2
 80015b8:	d100      	bne.n	80015bc <HAL_GPIO_Init+0x2f4>
 80015ba:	e09f      	b.n	80016fc <HAL_GPIO_Init+0x434>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001628 <HAL_GPIO_Init+0x360>)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3318      	adds	r3, #24
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	589b      	ldr	r3, [r3, r2]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2203      	movs	r2, #3
 80015ce:	4013      	ands	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	220f      	movs	r2, #15
 80015d4:	409a      	lsls	r2, r3
 80015d6:	0013      	movs	r3, r2
 80015d8:	43da      	mvns	r2, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	23a0      	movs	r3, #160	@ 0xa0
 80015e4:	05db      	lsls	r3, r3, #23
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d020      	beq.n	800162c <HAL_GPIO_Init+0x364>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a09      	ldr	r2, [pc, #36]	@ (8001614 <HAL_GPIO_Init+0x34c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x346>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a08      	ldr	r2, [pc, #32]	@ (8001618 <HAL_GPIO_Init+0x350>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x342>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a07      	ldr	r2, [pc, #28]	@ (800161c <HAL_GPIO_Init+0x354>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x33e>
 8001602:	2303      	movs	r3, #3
 8001604:	e013      	b.n	800162e <HAL_GPIO_Init+0x366>
 8001606:	2305      	movs	r3, #5
 8001608:	e011      	b.n	800162e <HAL_GPIO_Init+0x366>
 800160a:	2302      	movs	r3, #2
 800160c:	e00f      	b.n	800162e <HAL_GPIO_Init+0x366>
 800160e:	2301      	movs	r3, #1
 8001610:	e00d      	b.n	800162e <HAL_GPIO_Init+0x366>
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	50000400 	.word	0x50000400
 8001618:	50000800 	.word	0x50000800
 800161c:	50000c00 	.word	0x50000c00
 8001620:	50001400 	.word	0x50001400
 8001624:	08004a90 	.word	0x08004a90
 8001628:	40021800 	.word	0x40021800
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	2103      	movs	r1, #3
 8001632:	400a      	ands	r2, r1
 8001634:	00d2      	lsls	r2, r2, #3
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	@ (800171c <HAL_GPIO_Init+0x454>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3318      	adds	r3, #24
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800164c:	4b33      	ldr	r3, [pc, #204]	@ (800171c <HAL_GPIO_Init+0x454>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43da      	mvns	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	035b      	lsls	r3, r3, #13
 8001664:	4013      	ands	r3, r2
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x3a8>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001670:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <HAL_GPIO_Init+0x454>)
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001676:	4b29      	ldr	r3, [pc, #164]	@ (800171c <HAL_GPIO_Init+0x454>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43da      	mvns	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	039b      	lsls	r3, r3, #14
 800168e:	4013      	ands	r3, r2
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x3d2>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <HAL_GPIO_Init+0x454>)
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016a0:	4a1e      	ldr	r2, [pc, #120]	@ (800171c <HAL_GPIO_Init+0x454>)
 80016a2:	2384      	movs	r3, #132	@ 0x84
 80016a4:	58d3      	ldr	r3, [r2, r3]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43da      	mvns	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	2380      	movs	r3, #128	@ 0x80
 80016b8:	029b      	lsls	r3, r3, #10
 80016ba:	4013      	ands	r3, r2
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x3fe>
        {
          temp |= iocurrent;
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c6:	4915      	ldr	r1, [pc, #84]	@ (800171c <HAL_GPIO_Init+0x454>)
 80016c8:	2284      	movs	r2, #132	@ 0x84
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80016ce:	4a13      	ldr	r2, [pc, #76]	@ (800171c <HAL_GPIO_Init+0x454>)
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	58d3      	ldr	r3, [r2, r3]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43da      	mvns	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	025b      	lsls	r3, r3, #9
 80016e8:	4013      	ands	r3, r2
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f4:	4909      	ldr	r1, [pc, #36]	@ (800171c <HAL_GPIO_Init+0x454>)
 80016f6:	2280      	movs	r2, #128	@ 0x80
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3301      	adds	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	40da      	lsrs	r2, r3
 800170a:	1e13      	subs	r3, r2, #0
 800170c:	d000      	beq.n	8001710 <HAL_GPIO_Init+0x448>
 800170e:	e65a      	b.n	80013c6 <HAL_GPIO_Init+0xfe>
  }
}
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b006      	add	sp, #24
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	40021800 	.word	0x40021800

08001720 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	2380      	movs	r3, #128	@ 0x80
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	429a      	cmp	r2, r3
 8001730:	d00a      	beq.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x28>
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	429a      	cmp	r2, r3
 800173a:	d005      	beq.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x28>
 800173c:	4a1c      	ldr	r2, [pc, #112]	@ (80017b0 <HAL_PWREx_ControlVoltageScaling+0x90>)
 800173e:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <HAL_PWREx_ControlVoltageScaling+0x94>)
 8001740:	0011      	movs	r1, r2
 8001742:	0018      	movs	r0, r3
 8001744:	f7fe ff7f 	bl	8000646 <assert_failed>

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_PWREx_ControlVoltageScaling+0x98>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1b      	ldr	r2, [pc, #108]	@ (80017bc <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800174e:	4013      	ands	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <HAL_PWREx_ControlVoltageScaling+0x98>)
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	429a      	cmp	r2, r3
 8001762:	d11f      	bne.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x84>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	0013      	movs	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	189b      	adds	r3, r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4914      	ldr	r1, [pc, #80]	@ (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001772:	0018      	movs	r0, r3
 8001774:	f7fe fcc6 	bl	8000104 <__udivsi3>
 8001778:	0003      	movs	r3, r0
 800177a:	3301      	adds	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800177e:	e008      	b.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x72>
    {
      if (wait_loop_index != 0U)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_PWREx_ControlVoltageScaling+0x6e>
      {
        wait_loop_index--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3b01      	subs	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e001      	b.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      else
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e009      	b.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0x86>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_PWREx_ControlVoltageScaling+0x98>)
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	2380      	movs	r3, #128	@ 0x80
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	401a      	ands	r2, r3
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d0ed      	beq.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x60>
      }
    }
  }

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	000002fe 	.word	0x000002fe
 80017b4:	08004acc 	.word	0x08004acc
 80017b8:	40007000 	.word	0x40007000
 80017bc:	fffff9ff 	.word	0xfffff9ff
 80017c0:	20000000 	.word	0x20000000
 80017c4:	000f4240 	.word	0x000f4240

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f000 fc49 	bl	800206e <HAL_RCC_OscConfig+0x8a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01a      	beq.n	800181a <HAL_RCC_OscConfig+0x52>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	d115      	bne.n	800181a <HAL_RCC_OscConfig+0x52>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2202      	movs	r2, #2
 80017f4:	4013      	ands	r3, r2
 80017f6:	d110      	bne.n	800181a <HAL_RCC_OscConfig+0x52>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2208      	movs	r2, #8
 80017fe:	4013      	ands	r3, r2
 8001800:	d10b      	bne.n	800181a <HAL_RCC_OscConfig+0x52>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2204      	movs	r2, #4
 8001808:	4013      	ands	r3, r2
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x52>
 800180c:	23a1      	movs	r3, #161	@ 0xa1
 800180e:	005a      	lsls	r2, r3, #1
 8001810:	4bc9      	ldr	r3, [pc, #804]	@ (8001b38 <HAL_RCC_OscConfig+0x370>)
 8001812:	0011      	movs	r1, r2
 8001814:	0018      	movs	r0, r3
 8001816:	f7fe ff16 	bl	8000646 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2201      	movs	r2, #1
 8001820:	4013      	ands	r3, r2
 8001822:	d100      	bne.n	8001826 <HAL_RCC_OscConfig+0x5e>
 8001824:	e096      	b.n	8001954 <HAL_RCC_OscConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d012      	beq.n	8001854 <HAL_RCC_OscConfig+0x8c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	025b      	lsls	r3, r3, #9
 8001836:	429a      	cmp	r2, r3
 8001838:	d00c      	beq.n	8001854 <HAL_RCC_OscConfig+0x8c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	23a0      	movs	r3, #160	@ 0xa0
 8001840:	02db      	lsls	r3, r3, #11
 8001842:	429a      	cmp	r2, r3
 8001844:	d006      	beq.n	8001854 <HAL_RCC_OscConfig+0x8c>
 8001846:	23a4      	movs	r3, #164	@ 0xa4
 8001848:	005a      	lsls	r2, r3, #1
 800184a:	4bbb      	ldr	r3, [pc, #748]	@ (8001b38 <HAL_RCC_OscConfig+0x370>)
 800184c:	0011      	movs	r1, r2
 800184e:	0018      	movs	r0, r3
 8001850:	f7fe fef9 	bl	8000646 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001854:	4bb9      	ldr	r3, [pc, #740]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2238      	movs	r2, #56	@ 0x38
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800185e:	4bb7      	ldr	r3, [pc, #732]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2203      	movs	r2, #3
 8001864:	4013      	ands	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2b10      	cmp	r3, #16
 800186c:	d102      	bne.n	8001874 <HAL_RCC_OscConfig+0xac>
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d002      	beq.n	800187a <HAL_RCC_OscConfig+0xb2>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b08      	cmp	r3, #8
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0xcc>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187a:	4bb0      	ldr	r3, [pc, #704]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	029b      	lsls	r3, r3, #10
 8001882:	4013      	ands	r3, r2
 8001884:	d065      	beq.n	8001952 <HAL_RCC_OscConfig+0x18a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d161      	bne.n	8001952 <HAL_RCC_OscConfig+0x18a>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	f000 fbed 	bl	800206e <HAL_RCC_OscConfig+0x8a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	025b      	lsls	r3, r3, #9
 800189c:	429a      	cmp	r2, r3
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0xe8>
 80018a0:	4ba6      	ldr	r3, [pc, #664]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4ba5      	ldr	r3, [pc, #660]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 80018a6:	2180      	movs	r1, #128	@ 0x80
 80018a8:	0249      	lsls	r1, r1, #9
 80018aa:	430a      	orrs	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e020      	b.n	80018f2 <HAL_RCC_OscConfig+0x12a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	23a0      	movs	r3, #160	@ 0xa0
 80018b6:	02db      	lsls	r3, r3, #11
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d10e      	bne.n	80018da <HAL_RCC_OscConfig+0x112>
 80018bc:	4b9f      	ldr	r3, [pc, #636]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b9e      	ldr	r3, [pc, #632]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 80018c2:	2180      	movs	r1, #128	@ 0x80
 80018c4:	02c9      	lsls	r1, r1, #11
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	4b9c      	ldr	r3, [pc, #624]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b9b      	ldr	r3, [pc, #620]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 80018d0:	2180      	movs	r1, #128	@ 0x80
 80018d2:	0249      	lsls	r1, r1, #9
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e00b      	b.n	80018f2 <HAL_RCC_OscConfig+0x12a>
 80018da:	4b98      	ldr	r3, [pc, #608]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b97      	ldr	r3, [pc, #604]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 80018e0:	4997      	ldr	r1, [pc, #604]	@ (8001b40 <HAL_RCC_OscConfig+0x378>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	4b95      	ldr	r3, [pc, #596]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b94      	ldr	r3, [pc, #592]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 80018ec:	4995      	ldr	r1, [pc, #596]	@ (8001b44 <HAL_RCC_OscConfig+0x37c>)
 80018ee:	400a      	ands	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d015      	beq.n	8001926 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff f8a9 	bl	8000a50 <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001902:	e009      	b.n	8001918 <HAL_RCC_OscConfig+0x150>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f8a4 	bl	8000a50 <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d902      	bls.n	8001918 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	f000 fbab 	bl	800206e <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001918:	4b88      	ldr	r3, [pc, #544]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	029b      	lsls	r3, r3, #10
 8001920:	4013      	ands	r3, r2
 8001922:	d0ef      	beq.n	8001904 <HAL_RCC_OscConfig+0x13c>
 8001924:	e016      	b.n	8001954 <HAL_RCC_OscConfig+0x18c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff f893 	bl	8000a50 <HAL_GetTick>
 800192a:	0003      	movs	r3, r0
 800192c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192e:	e009      	b.n	8001944 <HAL_RCC_OscConfig+0x17c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff f88e 	bl	8000a50 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	@ 0x64
 800193c:	d902      	bls.n	8001944 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	f000 fb95 	bl	800206e <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001944:	4b7d      	ldr	r3, [pc, #500]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	@ 0x80
 800194a:	029b      	lsls	r3, r3, #10
 800194c:	4013      	ands	r3, r2
 800194e:	d1ef      	bne.n	8001930 <HAL_RCC_OscConfig+0x168>
 8001950:	e000      	b.n	8001954 <HAL_RCC_OscConfig+0x18c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001952:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d100      	bne.n	8001960 <HAL_RCC_OscConfig+0x198>
 800195e:	e100      	b.n	8001b62 <HAL_RCC_OscConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00c      	beq.n	8001982 <HAL_RCC_OscConfig+0x1ba>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	429a      	cmp	r2, r3
 8001972:	d006      	beq.n	8001982 <HAL_RCC_OscConfig+0x1ba>
 8001974:	23bf      	movs	r3, #191	@ 0xbf
 8001976:	005a      	lsls	r2, r3, #1
 8001978:	4b6f      	ldr	r3, [pc, #444]	@ (8001b38 <HAL_RCC_OscConfig+0x370>)
 800197a:	0011      	movs	r1, r2
 800197c:	0018      	movs	r0, r3
 800197e:	f7fe fe62 	bl	8000646 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	2b7f      	cmp	r3, #127	@ 0x7f
 8001988:	d907      	bls.n	800199a <HAL_RCC_OscConfig+0x1d2>
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	33ff      	adds	r3, #255	@ 0xff
 800198e:	001a      	movs	r2, r3
 8001990:	4b69      	ldr	r3, [pc, #420]	@ (8001b38 <HAL_RCC_OscConfig+0x370>)
 8001992:	0011      	movs	r1, r2
 8001994:	0018      	movs	r0, r3
 8001996:	f7fe fe56 	bl	8000646 <assert_failed>
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d030      	beq.n	8001a04 <HAL_RCC_OscConfig+0x23c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d02a      	beq.n	8001a04 <HAL_RCC_OscConfig+0x23c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	015b      	lsls	r3, r3, #5
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d024      	beq.n	8001a04 <HAL_RCC_OscConfig+0x23c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	23c0      	movs	r3, #192	@ 0xc0
 80019c0:	015b      	lsls	r3, r3, #5
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d01e      	beq.n	8001a04 <HAL_RCC_OscConfig+0x23c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	019b      	lsls	r3, r3, #6
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d018      	beq.n	8001a04 <HAL_RCC_OscConfig+0x23c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	23a0      	movs	r3, #160	@ 0xa0
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	429a      	cmp	r2, r3
 80019dc:	d012      	beq.n	8001a04 <HAL_RCC_OscConfig+0x23c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	23c0      	movs	r3, #192	@ 0xc0
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d00c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x23c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	23e0      	movs	r3, #224	@ 0xe0
 80019f0:	019b      	lsls	r3, r3, #6
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d006      	beq.n	8001a04 <HAL_RCC_OscConfig+0x23c>
 80019f6:	23c0      	movs	r3, #192	@ 0xc0
 80019f8:	005a      	lsls	r2, r3, #1
 80019fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001b38 <HAL_RCC_OscConfig+0x370>)
 80019fc:	0011      	movs	r1, r2
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7fe fe21 	bl	8000646 <assert_failed>

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a04:	4b4d      	ldr	r3, [pc, #308]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2238      	movs	r2, #56	@ 0x38
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2203      	movs	r2, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d102      	bne.n	8001a24 <HAL_RCC_OscConfig+0x25c>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d002      	beq.n	8001a2a <HAL_RCC_OscConfig+0x262>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d135      	bne.n	8001a96 <HAL_RCC_OscConfig+0x2ce>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2a:	4b44      	ldr	r3, [pc, #272]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4013      	ands	r3, r2
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_OscConfig+0x27a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x27a>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e315      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a42:	4b3e      	ldr	r3, [pc, #248]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a40      	ldr	r2, [pc, #256]	@ (8001b48 <HAL_RCC_OscConfig+0x380>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	021a      	lsls	r2, r3, #8
 8001a52:	4b3a      	ldr	r3, [pc, #232]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d112      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2bc>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a5e:	4b37      	ldr	r3, [pc, #220]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a3a      	ldr	r2, [pc, #232]	@ (8001b4c <HAL_RCC_OscConfig+0x384>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	4b33      	ldr	r3, [pc, #204]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a72:	4b32      	ldr	r3, [pc, #200]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0adb      	lsrs	r3, r3, #11
 8001a78:	2207      	movs	r2, #7
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	4a34      	ldr	r2, [pc, #208]	@ (8001b50 <HAL_RCC_OscConfig+0x388>)
 8001a7e:	40da      	lsrs	r2, r3
 8001a80:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <HAL_RCC_OscConfig+0x38c>)
 8001a82:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a84:	4b34      	ldr	r3, [pc, #208]	@ (8001b58 <HAL_RCC_OscConfig+0x390>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7fe ff85 	bl	8000998 <HAL_InitTick>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d066      	beq.n	8001b60 <HAL_RCC_OscConfig+0x398>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e2eb      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d030      	beq.n	8001b00 <HAL_RCC_OscConfig+0x338>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a9e:	4b27      	ldr	r3, [pc, #156]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b4c <HAL_RCC_OscConfig+0x384>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ab2:	4b22      	ldr	r3, [pc, #136]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001ab8:	2180      	movs	r1, #128	@ 0x80
 8001aba:	0049      	lsls	r1, r1, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7fe ffc6 	bl	8000a50 <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x314>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7fe ffc1 	bl	8000a50 <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x314>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e2c8      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001adc:	4b17      	ldr	r3, [pc, #92]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x302>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a16      	ldr	r2, [pc, #88]	@ (8001b48 <HAL_RCC_OscConfig+0x380>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	021a      	lsls	r2, r3, #8
 8001af8:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	e030      	b.n	8001b62 <HAL_RCC_OscConfig+0x39a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b00:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001b06:	4915      	ldr	r1, [pc, #84]	@ (8001b5c <HAL_RCC_OscConfig+0x394>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7fe ffa0 	bl	8000a50 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7fe ff9b 	bl	8000a50 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e2a2      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <HAL_RCC_OscConfig+0x374>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4013      	ands	r3, r2
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x34e>
 8001b34:	e015      	b.n	8001b62 <HAL_RCC_OscConfig+0x39a>
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	08004b08 	.word	0x08004b08
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	fffeffff 	.word	0xfffeffff
 8001b44:	fffbffff 	.word	0xfffbffff
 8001b48:	ffff80ff 	.word	0xffff80ff
 8001b4c:	ffffc7ff 	.word	0xffffc7ff
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	fffffeff 	.word	0xfffffeff
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b60:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2208      	movs	r2, #8
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d056      	beq.n	8001c1a <HAL_RCC_OscConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00a      	beq.n	8001b8a <HAL_RCC_OscConfig+0x3c2>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d006      	beq.n	8001b8a <HAL_RCC_OscConfig+0x3c2>
 8001b7c:	23ea      	movs	r3, #234	@ 0xea
 8001b7e:	005a      	lsls	r2, r3, #1
 8001b80:	4b85      	ldr	r3, [pc, #532]	@ (8001d98 <HAL_RCC_OscConfig+0x5d0>)
 8001b82:	0011      	movs	r1, r2
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7fe fd5e 	bl	8000646 <assert_failed>

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b8a:	4b84      	ldr	r3, [pc, #528]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2238      	movs	r2, #56	@ 0x38
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b18      	cmp	r3, #24
 8001b94:	d10a      	bne.n	8001bac <HAL_RCC_OscConfig+0x3e4>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b96:	4b81      	ldr	r3, [pc, #516]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d03c      	beq.n	8001c1a <HAL_RCC_OscConfig+0x452>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d138      	bne.n	8001c1a <HAL_RCC_OscConfig+0x452>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e260      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d019      	beq.n	8001be8 <HAL_RCC_OscConfig+0x420>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001bb4:	4b79      	ldr	r3, [pc, #484]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001bb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bb8:	4b78      	ldr	r3, [pc, #480]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001bba:	2101      	movs	r1, #1
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7fe ff46 	bl	8000a50 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x414>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bca:	f7fe ff41 	bl	8000a50 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e248      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be0:	2202      	movs	r2, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0f1      	beq.n	8001bca <HAL_RCC_OscConfig+0x402>
 8001be6:	e018      	b.n	8001c1a <HAL_RCC_OscConfig+0x452>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001be8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001bea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bec:	4b6b      	ldr	r3, [pc, #428]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	438a      	bics	r2, r1
 8001bf2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ff2c 	bl	8000a50 <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x448>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7fe ff27 	bl	8000a50 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x448>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e22e      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c10:	4b62      	ldr	r3, [pc, #392]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c14:	2202      	movs	r2, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	d1f1      	bne.n	8001bfe <HAL_RCC_OscConfig+0x436>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	4013      	ands	r3, r2
 8001c22:	d100      	bne.n	8001c26 <HAL_RCC_OscConfig+0x45e>
 8001c24:	e0d0      	b.n	8001dc8 <HAL_RCC_OscConfig+0x600>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	231f      	movs	r3, #31
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00e      	beq.n	8001c54 <HAL_RCC_OscConfig+0x48c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d00a      	beq.n	8001c54 <HAL_RCC_OscConfig+0x48c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d006      	beq.n	8001c54 <HAL_RCC_OscConfig+0x48c>
 8001c46:	2383      	movs	r3, #131	@ 0x83
 8001c48:	009a      	lsls	r2, r3, #2
 8001c4a:	4b53      	ldr	r3, [pc, #332]	@ (8001d98 <HAL_RCC_OscConfig+0x5d0>)
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7fe fcf9 	bl	8000646 <assert_failed>

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c54:	4b51      	ldr	r3, [pc, #324]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2238      	movs	r2, #56	@ 0x38
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d10c      	bne.n	8001c7a <HAL_RCC_OscConfig+0x4b2>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c60:	4b4e      	ldr	r3, [pc, #312]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c64:	2202      	movs	r2, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	d100      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4a4>
 8001c6a:	e0ad      	b.n	8001dc8 <HAL_RCC_OscConfig+0x600>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d000      	beq.n	8001c76 <HAL_RCC_OscConfig+0x4ae>
 8001c74:	e0a8      	b.n	8001dc8 <HAL_RCC_OscConfig+0x600>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1f9      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c7a:	4b48      	ldr	r3, [pc, #288]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001c7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	055b      	lsls	r3, r3, #21
 8001c82:	4013      	ands	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4c2>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x4c4>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d011      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c90:	4b42      	ldr	r3, [pc, #264]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c94:	4b41      	ldr	r3, [pc, #260]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001c96:	2180      	movs	r1, #128	@ 0x80
 8001c98:	0549      	lsls	r1, r1, #21
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001ca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	055b      	lsls	r3, r3, #21
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001cac:	231f      	movs	r3, #31
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001da0 <HAL_RCC_OscConfig+0x5d8>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	@ 0x80
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d11a      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x52e>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc0:	4b37      	ldr	r3, [pc, #220]	@ (8001da0 <HAL_RCC_OscConfig+0x5d8>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b36      	ldr	r3, [pc, #216]	@ (8001da0 <HAL_RCC_OscConfig+0x5d8>)
 8001cc6:	2180      	movs	r1, #128	@ 0x80
 8001cc8:	0049      	lsls	r1, r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001cce:	f7fe febf 	bl	8000a50 <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x522>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd8:	f7fe feba 	bl	8000a50 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1c1      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cea:	4b2d      	ldr	r3, [pc, #180]	@ (8001da0 <HAL_RCC_OscConfig+0x5d8>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	@ 0x80
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x510>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x544>
 8001cfe:	4b27      	ldr	r3, [pc, #156]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d02:	4b26      	ldr	r3, [pc, #152]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d0a:	e01c      	b.n	8001d46 <HAL_RCC_OscConfig+0x57e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x566>
 8001d14:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d18:	4b20      	ldr	r3, [pc, #128]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d20:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d24:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0x57e>
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d34:	2101      	movs	r1, #1
 8001d36:	438a      	bics	r2, r1
 8001d38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d3e:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d40:	2104      	movs	r1, #4
 8001d42:	438a      	bics	r2, r1
 8001d44:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d014      	beq.n	8001d78 <HAL_RCC_OscConfig+0x5b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4e:	f7fe fe7f 	bl	8000a50 <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d56:	e009      	b.n	8001d6c <HAL_RCC_OscConfig+0x5a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f7fe fe7a 	bl	8000a50 <HAL_GetTick>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	4a10      	ldr	r2, [pc, #64]	@ (8001da4 <HAL_RCC_OscConfig+0x5dc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x5a4>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e180      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_RCC_OscConfig+0x5d4>)
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d70:	2202      	movs	r2, #2
 8001d72:	4013      	ands	r3, r2
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x590>
 8001d76:	e01c      	b.n	8001db2 <HAL_RCC_OscConfig+0x5ea>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe fe6a 	bl	8000a50 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d80:	e012      	b.n	8001da8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7fe fe65 	bl	8000a50 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <HAL_RCC_OscConfig+0x5dc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d90a      	bls.n	8001da8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e16b      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	08004b08 	.word	0x08004b08
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40007000 	.word	0x40007000
 8001da4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da8:	4bb3      	ldr	r3, [pc, #716]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d1e7      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5ba>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001db2:	231f      	movs	r3, #31
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x600>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001dbc:	4bae      	ldr	r3, [pc, #696]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dc0:	4bad      	ldr	r3, [pc, #692]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001dc2:	49ae      	ldr	r1, [pc, #696]	@ (800207c <HAL_RCC_OscConfig+0x8b4>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00d      	beq.n	8001dec <HAL_RCC_OscConfig+0x624>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d009      	beq.n	8001dec <HAL_RCC_OscConfig+0x624>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_OscConfig+0x624>
 8001de0:	4aa7      	ldr	r2, [pc, #668]	@ (8002080 <HAL_RCC_OscConfig+0x8b8>)
 8001de2:	4ba8      	ldr	r3, [pc, #672]	@ (8002084 <HAL_RCC_OscConfig+0x8bc>)
 8001de4:	0011      	movs	r1, r2
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7fe fc2d 	bl	8000646 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d100      	bne.n	8001df6 <HAL_RCC_OscConfig+0x62e>
 8001df4:	e13a      	b.n	800206c <HAL_RCC_OscConfig+0x8a4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df6:	4ba0      	ldr	r3, [pc, #640]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2238      	movs	r2, #56	@ 0x38
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d100      	bne.n	8001e04 <HAL_RCC_OscConfig+0x63c>
 8001e02:	e0fa      	b.n	8001ffa <HAL_RCC_OscConfig+0x832>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d000      	beq.n	8001e0e <HAL_RCC_OscConfig+0x646>
 8001e0c:	e0d4      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7f0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <HAL_RCC_OscConfig+0x66a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_OscConfig+0x66a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x66a>
 8001e26:	4a98      	ldr	r2, [pc, #608]	@ (8002088 <HAL_RCC_OscConfig+0x8c0>)
 8001e28:	4b96      	ldr	r3, [pc, #600]	@ (8002084 <HAL_RCC_OscConfig+0x8bc>)
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7fe fc0a 	bl	8000646 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d021      	beq.n	8001e7e <HAL_RCC_OscConfig+0x6b6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d01d      	beq.n	8001e7e <HAL_RCC_OscConfig+0x6b6>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d019      	beq.n	8001e7e <HAL_RCC_OscConfig+0x6b6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	2b30      	cmp	r3, #48	@ 0x30
 8001e50:	d015      	beq.n	8001e7e <HAL_RCC_OscConfig+0x6b6>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	2b40      	cmp	r3, #64	@ 0x40
 8001e58:	d011      	beq.n	8001e7e <HAL_RCC_OscConfig+0x6b6>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	2b50      	cmp	r3, #80	@ 0x50
 8001e60:	d00d      	beq.n	8001e7e <HAL_RCC_OscConfig+0x6b6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	2b60      	cmp	r3, #96	@ 0x60
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_OscConfig+0x6b6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	2b70      	cmp	r3, #112	@ 0x70
 8001e70:	d005      	beq.n	8001e7e <HAL_RCC_OscConfig+0x6b6>
 8001e72:	4a86      	ldr	r2, [pc, #536]	@ (800208c <HAL_RCC_OscConfig+0x8c4>)
 8001e74:	4b83      	ldr	r3, [pc, #524]	@ (8002084 <HAL_RCC_OscConfig+0x8bc>)
 8001e76:	0011      	movs	r1, r2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7fe fbe4 	bl	8000646 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	d903      	bls.n	8001e8e <HAL_RCC_OscConfig+0x6c6>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8a:	2b56      	cmp	r3, #86	@ 0x56
 8001e8c:	d905      	bls.n	8001e9a <HAL_RCC_OscConfig+0x6d2>
 8001e8e:	4a80      	ldr	r2, [pc, #512]	@ (8002090 <HAL_RCC_OscConfig+0x8c8>)
 8001e90:	4b7c      	ldr	r3, [pc, #496]	@ (8002084 <HAL_RCC_OscConfig+0x8bc>)
 8001e92:	0011      	movs	r1, r2
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7fe fbd6 	bl	8000646 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e9e:	2380      	movs	r3, #128	@ 0x80
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d305      	bcc.n	8001eb2 <HAL_RCC_OscConfig+0x6ea>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eaa:	23f8      	movs	r3, #248	@ 0xf8
 8001eac:	039b      	lsls	r3, r3, #14
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d906      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x6f8>
 8001eb2:	23a5      	movs	r3, #165	@ 0xa5
 8001eb4:	009a      	lsls	r2, r3, #2
 8001eb6:	4b73      	ldr	r3, [pc, #460]	@ (8002084 <HAL_RCC_OscConfig+0x8bc>)
 8001eb8:	0011      	movs	r1, r2
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7fe fbc3 	bl	8000646 <assert_failed>
#if defined(RCC_PLLQ_SUPPORT)
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	049b      	lsls	r3, r3, #18
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d305      	bcc.n	8001ed8 <HAL_RCC_OscConfig+0x710>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ed0:	23e0      	movs	r3, #224	@ 0xe0
 8001ed2:	051b      	lsls	r3, r3, #20
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d905      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x71c>
 8001ed8:	4a6e      	ldr	r2, [pc, #440]	@ (8002094 <HAL_RCC_OscConfig+0x8cc>)
 8001eda:	4b6a      	ldr	r3, [pc, #424]	@ (8002084 <HAL_RCC_OscConfig+0x8bc>)
 8001edc:	0011      	movs	r1, r2
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7fe fbb1 	bl	8000646 <assert_failed>
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	059b      	lsls	r3, r3, #22
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d305      	bcc.n	8001efc <HAL_RCC_OscConfig+0x734>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef4:	23e0      	movs	r3, #224	@ 0xe0
 8001ef6:	061b      	lsls	r3, r3, #24
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d906      	bls.n	8001f0a <HAL_RCC_OscConfig+0x742>
 8001efc:	23a6      	movs	r3, #166	@ 0xa6
 8001efe:	009a      	lsls	r2, r3, #2
 8001f00:	4b60      	ldr	r3, [pc, #384]	@ (8002084 <HAL_RCC_OscConfig+0x8bc>)
 8001f02:	0011      	movs	r1, r2
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7fe fb9e 	bl	8000646 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001f10:	4961      	ldr	r1, [pc, #388]	@ (8002098 <HAL_RCC_OscConfig+0x8d0>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7fe fd9b 	bl	8000a50 <HAL_GetTick>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x76a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe fd96 	bl	8000a50 <HAL_GetTick>
 8001f24:	0002      	movs	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x76a>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e09d      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f32:	4b51      	ldr	r3, [pc, #324]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	2380      	movs	r3, #128	@ 0x80
 8001f38:	049b      	lsls	r3, r3, #18
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x758>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4a56      	ldr	r2, [pc, #344]	@ (800209c <HAL_RCC_OscConfig+0x8d4>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	4b42      	ldr	r3, [pc, #264]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f72:	4b41      	ldr	r3, [pc, #260]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b40      	ldr	r3, [pc, #256]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001f78:	2180      	movs	r1, #128	@ 0x80
 8001f7a:	0449      	lsls	r1, r1, #17
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f80:	4b3d      	ldr	r3, [pc, #244]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	4b3c      	ldr	r3, [pc, #240]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	0549      	lsls	r1, r1, #21
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fd5f 	bl	8000a50 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x7e2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fd5a 	bl	8000a50 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x7e2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e061      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001faa:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	@ 0x80
 8001fb0:	049b      	lsls	r3, r3, #18
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x7d0>
 8001fb6:	e059      	b.n	800206c <HAL_RCC_OscConfig+0x8a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001fbe:	4936      	ldr	r1, [pc, #216]	@ (8002098 <HAL_RCC_OscConfig+0x8d0>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fd44 	bl	8000a50 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x818>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7fe fd3f 	bl	8000a50 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e046      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe0:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	@ 0x80
 8001fe6:	049b      	lsls	r3, r3, #18
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x806>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001fec:	4b22      	ldr	r3, [pc, #136]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8001ff2:	492b      	ldr	r1, [pc, #172]	@ (80020a0 <HAL_RCC_OscConfig+0x8d8>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	e038      	b.n	800206c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x83e>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e033      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002006:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <HAL_RCC_OscConfig+0x8b0>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2203      	movs	r2, #3
 8002010:	401a      	ands	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	429a      	cmp	r2, r3
 8002018:	d126      	bne.n	8002068 <HAL_RCC_OscConfig+0x8a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2270      	movs	r2, #112	@ 0x70
 800201e:	401a      	ands	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d11f      	bne.n	8002068 <HAL_RCC_OscConfig+0x8a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	23fe      	movs	r3, #254	@ 0xfe
 800202c:	01db      	lsls	r3, r3, #7
 800202e:	401a      	ands	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x8a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	23f8      	movs	r3, #248	@ 0xf8
 800203e:	039b      	lsls	r3, r3, #14
 8002040:	401a      	ands	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d10e      	bne.n	8002068 <HAL_RCC_OscConfig+0x8a0>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	23e0      	movs	r3, #224	@ 0xe0
 800204e:	051b      	lsls	r3, r3, #20
 8002050:	401a      	ands	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d106      	bne.n	8002068 <HAL_RCC_OscConfig+0x8a0>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	0f5b      	lsrs	r3, r3, #29
 800205e:	075a      	lsls	r2, r3, #29
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x8a4>
        {
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x8a6>
        }
      }
    }
  }
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b008      	add	sp, #32
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	40021000 	.word	0x40021000
 800207c:	efffffff 	.word	0xefffffff
 8002080:	00000287 	.word	0x00000287
 8002084:	08004b08 	.word	0x08004b08
 8002088:	00000291 	.word	0x00000291
 800208c:	00000292 	.word	0x00000292
 8002090:	00000293 	.word	0x00000293
 8002094:	00000296 	.word	0x00000296
 8002098:	feffffff 	.word	0xfeffffff
 800209c:	11c1808c 	.word	0x11c1808c
 80020a0:	eefefffc 	.word	0xeefefffc

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e180      	b.n	80023ba <HAL_RCC_ClockConfig+0x316>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2207      	movs	r2, #7
 80020be:	4013      	ands	r3, r2
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_ClockConfig+0x26>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	d906      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x34>
 80020ca:	23cc      	movs	r3, #204	@ 0xcc
 80020cc:	009a      	lsls	r2, r3, #2
 80020ce:	4bbd      	ldr	r3, [pc, #756]	@ (80023c4 <HAL_RCC_ClockConfig+0x320>)
 80020d0:	0011      	movs	r1, r2
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe fab7 	bl	8000646 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x52>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x52>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x52>
 80020ea:	4ab7      	ldr	r2, [pc, #732]	@ (80023c8 <HAL_RCC_ClockConfig+0x324>)
 80020ec:	4bb5      	ldr	r3, [pc, #724]	@ (80023c4 <HAL_RCC_ClockConfig+0x320>)
 80020ee:	0011      	movs	r1, r2
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7fe faa8 	bl	8000646 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f6:	4bb5      	ldr	r3, [pc, #724]	@ (80023cc <HAL_RCC_ClockConfig+0x328>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2207      	movs	r2, #7
 80020fc:	4013      	ands	r3, r2
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d91e      	bls.n	8002142 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002104:	4bb1      	ldr	r3, [pc, #708]	@ (80023cc <HAL_RCC_ClockConfig+0x328>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2207      	movs	r2, #7
 800210a:	4393      	bics	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	4baf      	ldr	r3, [pc, #700]	@ (80023cc <HAL_RCC_ClockConfig+0x328>)
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002116:	f7fe fc9b 	bl	8000a50 <HAL_GetTick>
 800211a:	0003      	movs	r3, r0
 800211c:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800211e:	e009      	b.n	8002134 <HAL_RCC_ClockConfig+0x90>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe fc96 	bl	8000a50 <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	4aa9      	ldr	r2, [pc, #676]	@ (80023d0 <HAL_RCC_ClockConfig+0x32c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e142      	b.n	80023ba <HAL_RCC_ClockConfig+0x316>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002134:	4ba5      	ldr	r3, [pc, #660]	@ (80023cc <HAL_RCC_ClockConfig+0x328>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2207      	movs	r2, #7
 800213a:	4013      	ands	r3, r2
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d1ee      	bne.n	8002120 <HAL_RCC_ClockConfig+0x7c>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d04f      	beq.n	80021ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2204      	movs	r2, #4
 8002152:	4013      	ands	r3, r2
 8002154:	d006      	beq.n	8002164 <HAL_RCC_ClockConfig+0xc0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002156:	4b9f      	ldr	r3, [pc, #636]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	4b9e      	ldr	r3, [pc, #632]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 800215c:	21e0      	movs	r1, #224	@ 0xe0
 800215e:	01c9      	lsls	r1, r1, #7
 8002160:	430a      	orrs	r2, r1
 8002162:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d035      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x134>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	2380      	movs	r3, #128	@ 0x80
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	429a      	cmp	r2, r3
 8002176:	d02f      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x134>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	2390      	movs	r3, #144	@ 0x90
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	429a      	cmp	r2, r3
 8002182:	d029      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x134>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	23a0      	movs	r3, #160	@ 0xa0
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	429a      	cmp	r2, r3
 800218e:	d023      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x134>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	23b0      	movs	r3, #176	@ 0xb0
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	429a      	cmp	r2, r3
 800219a:	d01d      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x134>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	23c0      	movs	r3, #192	@ 0xc0
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d017      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x134>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	23d0      	movs	r3, #208	@ 0xd0
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d011      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x134>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	23e0      	movs	r3, #224	@ 0xe0
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	429a      	cmp	r2, r3
 80021be:	d00b      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x134>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	23f0      	movs	r3, #240	@ 0xf0
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x134>
 80021cc:	4a82      	ldr	r2, [pc, #520]	@ (80023d8 <HAL_RCC_ClockConfig+0x334>)
 80021ce:	4b7d      	ldr	r3, [pc, #500]	@ (80023c4 <HAL_RCC_ClockConfig+0x320>)
 80021d0:	0011      	movs	r1, r2
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7fe fa37 	bl	8000646 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b7e      	ldr	r3, [pc, #504]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a7f      	ldr	r2, [pc, #508]	@ (80023dc <HAL_RCC_ClockConfig+0x338>)
 80021de:	4013      	ands	r3, r2
 80021e0:	0019      	movs	r1, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	4b7b      	ldr	r3, [pc, #492]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 80021e8:	430a      	orrs	r2, r1
 80021ea:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2201      	movs	r2, #1
 80021f2:	4013      	ands	r3, r2
 80021f4:	d100      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x154>
 80021f6:	e072      	b.n	80022de <HAL_RCC_ClockConfig+0x23a>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d016      	beq.n	800222e <HAL_RCC_ClockConfig+0x18a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d012      	beq.n	800222e <HAL_RCC_ClockConfig+0x18a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d00e      	beq.n	800222e <HAL_RCC_ClockConfig+0x18a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d00a      	beq.n	800222e <HAL_RCC_ClockConfig+0x18a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d006      	beq.n	800222e <HAL_RCC_ClockConfig+0x18a>
 8002220:	23d7      	movs	r3, #215	@ 0xd7
 8002222:	009a      	lsls	r2, r3, #2
 8002224:	4b67      	ldr	r3, [pc, #412]	@ (80023c4 <HAL_RCC_ClockConfig+0x320>)
 8002226:	0011      	movs	r1, r2
 8002228:	0018      	movs	r0, r3
 800222a:	f7fe fa0c 	bl	8000646 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0x1a2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002236:	4b67      	ldr	r3, [pc, #412]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	@ 0x80
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	4013      	ands	r3, r2
 8002240:	d12b      	bne.n	800229a <HAL_RCC_ClockConfig+0x1f6>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0b9      	b.n	80023ba <HAL_RCC_ClockConfig+0x316>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0x1ba>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224e:	4b61      	ldr	r3, [pc, #388]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	049b      	lsls	r3, r3, #18
 8002256:	4013      	ands	r3, r2
 8002258:	d11f      	bne.n	800229a <HAL_RCC_ClockConfig+0x1f6>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0ad      	b.n	80023ba <HAL_RCC_ClockConfig+0x316>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0x1d2>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002266:	4b5b      	ldr	r3, [pc, #364]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4013      	ands	r3, r2
 8002270:	d113      	bne.n	800229a <HAL_RCC_ClockConfig+0x1f6>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0a1      	b.n	80023ba <HAL_RCC_ClockConfig+0x316>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d106      	bne.n	800228c <HAL_RCC_ClockConfig+0x1e8>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800227e:	4b55      	ldr	r3, [pc, #340]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	2202      	movs	r2, #2
 8002284:	4013      	ands	r3, r2
 8002286:	d108      	bne.n	800229a <HAL_RCC_ClockConfig+0x1f6>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e096      	b.n	80023ba <HAL_RCC_ClockConfig+0x316>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228c:	4b51      	ldr	r3, [pc, #324]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	2202      	movs	r2, #2
 8002292:	4013      	ands	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_RCC_ClockConfig+0x1f6>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e08f      	b.n	80023ba <HAL_RCC_ClockConfig+0x316>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800229a:	4b4e      	ldr	r3, [pc, #312]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2207      	movs	r2, #7
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4b4a      	ldr	r3, [pc, #296]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ae:	f7fe fbcf 	bl	8000a50 <HAL_GetTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	e009      	b.n	80022cc <HAL_RCC_ClockConfig+0x228>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7fe fbca 	bl	8000a50 <HAL_GetTick>
 80022bc:	0002      	movs	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	4a43      	ldr	r2, [pc, #268]	@ (80023d0 <HAL_RCC_ClockConfig+0x32c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_ClockConfig+0x228>
      {
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e076      	b.n	80023ba <HAL_RCC_ClockConfig+0x316>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022cc:	4b41      	ldr	r3, [pc, #260]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2238      	movs	r2, #56	@ 0x38
 80022d2:	401a      	ands	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	429a      	cmp	r2, r3
 80022dc:	d1ec      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x214>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022de:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <HAL_RCC_ClockConfig+0x328>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2207      	movs	r2, #7
 80022e4:	4013      	ands	r3, r2
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d21e      	bcs.n	800232a <HAL_RCC_ClockConfig+0x286>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ec:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <HAL_RCC_ClockConfig+0x328>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2207      	movs	r2, #7
 80022f2:	4393      	bics	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	4b35      	ldr	r3, [pc, #212]	@ (80023cc <HAL_RCC_ClockConfig+0x328>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022fe:	f7fe fba7 	bl	8000a50 <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002306:	e009      	b.n	800231c <HAL_RCC_ClockConfig+0x278>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fba2 	bl	8000a50 <HAL_GetTick>
 800230c:	0002      	movs	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	4a2f      	ldr	r2, [pc, #188]	@ (80023d0 <HAL_RCC_ClockConfig+0x32c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_ClockConfig+0x278>
      {
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e04e      	b.n	80023ba <HAL_RCC_ClockConfig+0x316>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800231c:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_RCC_ClockConfig+0x328>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2207      	movs	r2, #7
 8002322:	4013      	ands	r3, r2
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d1ee      	bne.n	8002308 <HAL_RCC_ClockConfig+0x264>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2204      	movs	r2, #4
 8002330:	4013      	ands	r3, r2
 8002332:	d02b      	beq.n	800238c <HAL_RCC_ClockConfig+0x2e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01d      	beq.n	8002378 <HAL_RCC_ClockConfig+0x2d4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	01db      	lsls	r3, r3, #7
 8002344:	429a      	cmp	r2, r3
 8002346:	d017      	beq.n	8002378 <HAL_RCC_ClockConfig+0x2d4>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	23a0      	movs	r3, #160	@ 0xa0
 800234e:	01db      	lsls	r3, r3, #7
 8002350:	429a      	cmp	r2, r3
 8002352:	d011      	beq.n	8002378 <HAL_RCC_ClockConfig+0x2d4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	23c0      	movs	r3, #192	@ 0xc0
 800235a:	01db      	lsls	r3, r3, #7
 800235c:	429a      	cmp	r2, r3
 800235e:	d00b      	beq.n	8002378 <HAL_RCC_ClockConfig+0x2d4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	23e0      	movs	r3, #224	@ 0xe0
 8002366:	01db      	lsls	r3, r3, #7
 8002368:	429a      	cmp	r2, r3
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x2d4>
 800236c:	4a1c      	ldr	r2, [pc, #112]	@ (80023e0 <HAL_RCC_ClockConfig+0x33c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_RCC_ClockConfig+0x320>)
 8002370:	0011      	movs	r1, r2
 8002372:	0018      	movs	r0, r3
 8002374:	f7fe f967 	bl	8000646 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b16      	ldr	r3, [pc, #88]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a19      	ldr	r2, [pc, #100]	@ (80023e4 <HAL_RCC_ClockConfig+0x340>)
 800237e:	4013      	ands	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 8002388:	430a      	orrs	r2, r1
 800238a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800238c:	f000 f832 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8002390:	0001      	movs	r1, r0
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <HAL_RCC_ClockConfig+0x330>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	220f      	movs	r2, #15
 800239a:	401a      	ands	r2, r3
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_RCC_ClockConfig+0x344>)
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	58d3      	ldr	r3, [r2, r3]
 80023a2:	221f      	movs	r2, #31
 80023a4:	4013      	ands	r3, r2
 80023a6:	000a      	movs	r2, r1
 80023a8:	40da      	lsrs	r2, r3
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <HAL_RCC_ClockConfig+0x348>)
 80023ac:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023ae:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <HAL_RCC_ClockConfig+0x34c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7fe faf0 	bl	8000998 <HAL_InitTick>
 80023b8:	0003      	movs	r3, r0
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	08004b08 	.word	0x08004b08
 80023c8:	00000331 	.word	0x00000331
 80023cc:	40022000 	.word	0x40022000
 80023d0:	00001388 	.word	0x00001388
 80023d4:	40021000 	.word	0x40021000
 80023d8:	00000355 	.word	0x00000355
 80023dc:	fffff0ff 	.word	0xfffff0ff
 80023e0:	000003af 	.word	0x000003af
 80023e4:	ffff8fff 	.word	0xffff8fff
 80023e8:	08004bc8 	.word	0x08004bc8
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fa:	4b3c      	ldr	r3, [pc, #240]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2238      	movs	r2, #56	@ 0x38
 8002400:	4013      	ands	r3, r2
 8002402:	d10f      	bne.n	8002424 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002404:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0adb      	lsrs	r3, r3, #11
 800240a:	2207      	movs	r2, #7
 800240c:	4013      	ands	r3, r2
 800240e:	2201      	movs	r2, #1
 8002410:	409a      	lsls	r2, r3
 8002412:	0013      	movs	r3, r2
 8002414:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002416:	6839      	ldr	r1, [r7, #0]
 8002418:	4835      	ldr	r0, [pc, #212]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800241a:	f7fd fe73 	bl	8000104 <__udivsi3>
 800241e:	0003      	movs	r3, r0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	e05d      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002424:	4b31      	ldr	r3, [pc, #196]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2238      	movs	r2, #56	@ 0x38
 800242a:	4013      	ands	r3, r2
 800242c:	2b08      	cmp	r3, #8
 800242e:	d102      	bne.n	8002436 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002430:	4b30      	ldr	r3, [pc, #192]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	e054      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002436:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2238      	movs	r2, #56	@ 0x38
 800243c:	4013      	ands	r3, r2
 800243e:	2b10      	cmp	r3, #16
 8002440:	d138      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002442:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2203      	movs	r2, #3
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800244c:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	2207      	movs	r2, #7
 8002454:	4013      	ands	r3, r2
 8002456:	3301      	adds	r3, #1
 8002458:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d10d      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	4824      	ldr	r0, [pc, #144]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002464:	f7fd fe4e 	bl	8000104 <__udivsi3>
 8002468:	0003      	movs	r3, r0
 800246a:	0019      	movs	r1, r3
 800246c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	227f      	movs	r2, #127	@ 0x7f
 8002474:	4013      	ands	r3, r2
 8002476:	434b      	muls	r3, r1
 8002478:	617b      	str	r3, [r7, #20]
        break;
 800247a:	e00d      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	481c      	ldr	r0, [pc, #112]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002480:	f7fd fe40 	bl	8000104 <__udivsi3>
 8002484:	0003      	movs	r3, r0
 8002486:	0019      	movs	r1, r3
 8002488:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	227f      	movs	r2, #127	@ 0x7f
 8002490:	4013      	ands	r3, r2
 8002492:	434b      	muls	r3, r1
 8002494:	617b      	str	r3, [r7, #20]
        break;
 8002496:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002498:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0f5b      	lsrs	r3, r3, #29
 800249e:	2207      	movs	r2, #7
 80024a0:	4013      	ands	r3, r2
 80024a2:	3301      	adds	r3, #1
 80024a4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	6978      	ldr	r0, [r7, #20]
 80024aa:	f7fd fe2b 	bl	8000104 <__udivsi3>
 80024ae:	0003      	movs	r3, r0
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	e015      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024b4:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2238      	movs	r2, #56	@ 0x38
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d103      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2238      	movs	r2, #56	@ 0x38
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b18      	cmp	r3, #24
 80024d2:	d103      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024d4:	23fa      	movs	r3, #250	@ 0xfa
 80024d6:	01db      	lsls	r3, r3, #7
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	e001      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024e0:	693b      	ldr	r3, [r7, #16]
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b006      	add	sp, #24
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	40021000 	.word	0x40021000
 80024f0:	00f42400 	.word	0x00f42400
 80024f4:	007a1200 	.word	0x007a1200

080024f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0d9      	b.n	80026be <HAL_TIM_Base_Init+0x1c6>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6e      	ldr	r2, [pc, #440]	@ (80026c8 <HAL_TIM_Base_Init+0x1d0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d020      	beq.n	8002556 <HAL_TIM_Base_Init+0x5e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	@ 0x80
 800251a:	05db      	lsls	r3, r3, #23
 800251c:	429a      	cmp	r2, r3
 800251e:	d01a      	beq.n	8002556 <HAL_TIM_Base_Init+0x5e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a69      	ldr	r2, [pc, #420]	@ (80026cc <HAL_TIM_Base_Init+0x1d4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d015      	beq.n	8002556 <HAL_TIM_Base_Init+0x5e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a68      	ldr	r2, [pc, #416]	@ (80026d0 <HAL_TIM_Base_Init+0x1d8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d010      	beq.n	8002556 <HAL_TIM_Base_Init+0x5e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a66      	ldr	r2, [pc, #408]	@ (80026d4 <HAL_TIM_Base_Init+0x1dc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00b      	beq.n	8002556 <HAL_TIM_Base_Init+0x5e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a65      	ldr	r2, [pc, #404]	@ (80026d8 <HAL_TIM_Base_Init+0x1e0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d006      	beq.n	8002556 <HAL_TIM_Base_Init+0x5e>
 8002548:	238f      	movs	r3, #143	@ 0x8f
 800254a:	005a      	lsls	r2, r3, #1
 800254c:	4b63      	ldr	r3, [pc, #396]	@ (80026dc <HAL_TIM_Base_Init+0x1e4>)
 800254e:	0011      	movs	r1, r2
 8002550:	0018      	movs	r0, r3
 8002552:	f7fe f878 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d017      	beq.n	800258e <HAL_TIM_Base_Init+0x96>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b10      	cmp	r3, #16
 8002564:	d013      	beq.n	800258e <HAL_TIM_Base_Init+0x96>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b20      	cmp	r3, #32
 800256c:	d00f      	beq.n	800258e <HAL_TIM_Base_Init+0x96>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b40      	cmp	r3, #64	@ 0x40
 8002574:	d00b      	beq.n	800258e <HAL_TIM_Base_Init+0x96>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b60      	cmp	r3, #96	@ 0x60
 800257c:	d007      	beq.n	800258e <HAL_TIM_Base_Init+0x96>
 800257e:	2320      	movs	r3, #32
 8002580:	33ff      	adds	r3, #255	@ 0xff
 8002582:	001a      	movs	r2, r3
 8002584:	4b55      	ldr	r3, [pc, #340]	@ (80026dc <HAL_TIM_Base_Init+0x1e4>)
 8002586:	0011      	movs	r1, r2
 8002588:	0018      	movs	r0, r3
 800258a:	f7fe f85c 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d012      	beq.n	80025bc <HAL_TIM_Base_Init+0xc4>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	429a      	cmp	r2, r3
 80025a0:	d00c      	beq.n	80025bc <HAL_TIM_Base_Init+0xc4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d006      	beq.n	80025bc <HAL_TIM_Base_Init+0xc4>
 80025ae:	2390      	movs	r3, #144	@ 0x90
 80025b0:	005a      	lsls	r2, r3, #1
 80025b2:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <HAL_TIM_Base_Init+0x1e4>)
 80025b4:	0011      	movs	r1, r2
 80025b6:	0018      	movs	r0, r3
 80025b8:	f7fe f845 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2380      	movs	r3, #128	@ 0x80
 80025c2:	05db      	lsls	r3, r3, #23
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d011      	beq.n	80025ec <HAL_TIM_Base_Init+0xf4>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_TIM_Base_Init+0xe8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	025b      	lsls	r3, r3, #9
 80025d8:	429a      	cmp	r2, r3
 80025da:	d201      	bcs.n	80025e0 <HAL_TIM_Base_Init+0xe8>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_TIM_Base_Init+0xea>
 80025e0:	2300      	movs	r3, #0
 80025e2:	1c1a      	adds	r2, r3, #0
 80025e4:	2301      	movs	r3, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e004      	b.n	80025f6 <HAL_TIM_Base_Init+0xfe>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	1e5a      	subs	r2, r3, #1
 80025f2:	4193      	sbcs	r3, r2
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d107      	bne.n	800260a <HAL_TIM_Base_Init+0x112>
 80025fa:	2322      	movs	r3, #34	@ 0x22
 80025fc:	33ff      	adds	r3, #255	@ 0xff
 80025fe:	001a      	movs	r2, r3
 8002600:	4b36      	ldr	r3, [pc, #216]	@ (80026dc <HAL_TIM_Base_Init+0x1e4>)
 8002602:	0011      	movs	r1, r2
 8002604:	0018      	movs	r0, r3
 8002606:	f7fe f81e 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_TIM_Base_Init+0x130>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b80      	cmp	r3, #128	@ 0x80
 8002618:	d006      	beq.n	8002628 <HAL_TIM_Base_Init+0x130>
 800261a:	2391      	movs	r3, #145	@ 0x91
 800261c:	005a      	lsls	r2, r3, #1
 800261e:	4b2f      	ldr	r3, [pc, #188]	@ (80026dc <HAL_TIM_Base_Init+0x1e4>)
 8002620:	0011      	movs	r1, r2
 8002622:	0018      	movs	r0, r3
 8002624:	f7fe f80f 	bl	8000646 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	223d      	movs	r2, #61	@ 0x3d
 800262c:	5c9b      	ldrb	r3, [r3, r2]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d107      	bne.n	8002644 <HAL_TIM_Base_Init+0x14c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	223c      	movs	r2, #60	@ 0x3c
 8002638:	2100      	movs	r1, #0
 800263a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	0018      	movs	r0, r3
 8002640:	f7fe f8d8 	bl	80007f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	223d      	movs	r2, #61	@ 0x3d
 8002648:	2102      	movs	r1, #2
 800264a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	0019      	movs	r1, r3
 8002656:	0010      	movs	r0, r2
 8002658:	f001 fba2 	bl	8003da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2248      	movs	r2, #72	@ 0x48
 8002660:	2101      	movs	r1, #1
 8002662:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	223e      	movs	r2, #62	@ 0x3e
 8002668:	2101      	movs	r1, #1
 800266a:	5499      	strb	r1, [r3, r2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	223f      	movs	r2, #63	@ 0x3f
 8002670:	2101      	movs	r1, #1
 8002672:	5499      	strb	r1, [r3, r2]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2240      	movs	r2, #64	@ 0x40
 8002678:	2101      	movs	r1, #1
 800267a:	5499      	strb	r1, [r3, r2]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2241      	movs	r2, #65	@ 0x41
 8002680:	2101      	movs	r1, #1
 8002682:	5499      	strb	r1, [r3, r2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2242      	movs	r2, #66	@ 0x42
 8002688:	2101      	movs	r1, #1
 800268a:	5499      	strb	r1, [r3, r2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2243      	movs	r2, #67	@ 0x43
 8002690:	2101      	movs	r1, #1
 8002692:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2244      	movs	r2, #68	@ 0x44
 8002698:	2101      	movs	r1, #1
 800269a:	5499      	strb	r1, [r3, r2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2245      	movs	r2, #69	@ 0x45
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2246      	movs	r2, #70	@ 0x46
 80026a8:	2101      	movs	r1, #1
 80026aa:	5499      	strb	r1, [r3, r2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2247      	movs	r2, #71	@ 0x47
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	223d      	movs	r2, #61	@ 0x3d
 80026b8:	2101      	movs	r1, #1
 80026ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b002      	add	sp, #8
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40002000 	.word	0x40002000
 80026d4:	40014400 	.word	0x40014400
 80026d8:	40014800 	.word	0x40014800
 80026dc:	08004b40 	.word	0x08004b40

080026e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0d2      	b.n	8002898 <HAL_TIM_PWM_Init+0x1b8>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a6a      	ldr	r2, [pc, #424]	@ (80028a0 <HAL_TIM_PWM_Init+0x1c0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d01f      	beq.n	800273c <HAL_TIM_PWM_Init+0x5c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	05db      	lsls	r3, r3, #23
 8002704:	429a      	cmp	r2, r3
 8002706:	d019      	beq.n	800273c <HAL_TIM_PWM_Init+0x5c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a65      	ldr	r2, [pc, #404]	@ (80028a4 <HAL_TIM_PWM_Init+0x1c4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d014      	beq.n	800273c <HAL_TIM_PWM_Init+0x5c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a64      	ldr	r2, [pc, #400]	@ (80028a8 <HAL_TIM_PWM_Init+0x1c8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00f      	beq.n	800273c <HAL_TIM_PWM_Init+0x5c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a62      	ldr	r2, [pc, #392]	@ (80028ac <HAL_TIM_PWM_Init+0x1cc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00a      	beq.n	800273c <HAL_TIM_PWM_Init+0x5c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a61      	ldr	r2, [pc, #388]	@ (80028b0 <HAL_TIM_PWM_Init+0x1d0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d005      	beq.n	800273c <HAL_TIM_PWM_Init+0x5c>
 8002730:	4a60      	ldr	r2, [pc, #384]	@ (80028b4 <HAL_TIM_PWM_Init+0x1d4>)
 8002732:	4b61      	ldr	r3, [pc, #388]	@ (80028b8 <HAL_TIM_PWM_Init+0x1d8>)
 8002734:	0011      	movs	r1, r2
 8002736:	0018      	movs	r0, r3
 8002738:	f7fd ff85 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_TIM_PWM_Init+0x90>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b10      	cmp	r3, #16
 800274a:	d011      	beq.n	8002770 <HAL_TIM_PWM_Init+0x90>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b20      	cmp	r3, #32
 8002752:	d00d      	beq.n	8002770 <HAL_TIM_PWM_Init+0x90>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b40      	cmp	r3, #64	@ 0x40
 800275a:	d009      	beq.n	8002770 <HAL_TIM_PWM_Init+0x90>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b60      	cmp	r3, #96	@ 0x60
 8002762:	d005      	beq.n	8002770 <HAL_TIM_PWM_Init+0x90>
 8002764:	4a55      	ldr	r2, [pc, #340]	@ (80028bc <HAL_TIM_PWM_Init+0x1dc>)
 8002766:	4b54      	ldr	r3, [pc, #336]	@ (80028b8 <HAL_TIM_PWM_Init+0x1d8>)
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f7fd ff6b 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d011      	beq.n	800279c <HAL_TIM_PWM_Init+0xbc>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	429a      	cmp	r2, r3
 8002782:	d00b      	beq.n	800279c <HAL_TIM_PWM_Init+0xbc>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	2380      	movs	r3, #128	@ 0x80
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d005      	beq.n	800279c <HAL_TIM_PWM_Init+0xbc>
 8002790:	4a4b      	ldr	r2, [pc, #300]	@ (80028c0 <HAL_TIM_PWM_Init+0x1e0>)
 8002792:	4b49      	ldr	r3, [pc, #292]	@ (80028b8 <HAL_TIM_PWM_Init+0x1d8>)
 8002794:	0011      	movs	r1, r2
 8002796:	0018      	movs	r0, r3
 8002798:	f7fd ff55 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	05db      	lsls	r3, r3, #23
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d011      	beq.n	80027cc <HAL_TIM_PWM_Init+0xec>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_TIM_PWM_Init+0xe0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	2380      	movs	r3, #128	@ 0x80
 80027b6:	025b      	lsls	r3, r3, #9
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d201      	bcs.n	80027c0 <HAL_TIM_PWM_Init+0xe0>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_TIM_PWM_Init+0xe2>
 80027c0:	2300      	movs	r3, #0
 80027c2:	1c1a      	adds	r2, r3, #0
 80027c4:	2301      	movs	r3, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e004      	b.n	80027d6 <HAL_TIM_PWM_Init+0xf6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	1e5a      	subs	r2, r3, #1
 80027d2:	4193      	sbcs	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_TIM_PWM_Init+0x106>
 80027da:	4a3a      	ldr	r2, [pc, #232]	@ (80028c4 <HAL_TIM_PWM_Init+0x1e4>)
 80027dc:	4b36      	ldr	r3, [pc, #216]	@ (80028b8 <HAL_TIM_PWM_Init+0x1d8>)
 80027de:	0011      	movs	r1, r2
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7fd ff30 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_TIM_PWM_Init+0x122>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b80      	cmp	r3, #128	@ 0x80
 80027f4:	d005      	beq.n	8002802 <HAL_TIM_PWM_Init+0x122>
 80027f6:	4a34      	ldr	r2, [pc, #208]	@ (80028c8 <HAL_TIM_PWM_Init+0x1e8>)
 80027f8:	4b2f      	ldr	r3, [pc, #188]	@ (80028b8 <HAL_TIM_PWM_Init+0x1d8>)
 80027fa:	0011      	movs	r1, r2
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7fd ff22 	bl	8000646 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	223d      	movs	r2, #61	@ 0x3d
 8002806:	5c9b      	ldrb	r3, [r3, r2]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d107      	bne.n	800281e <HAL_TIM_PWM_Init+0x13e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	223c      	movs	r2, #60	@ 0x3c
 8002812:	2100      	movs	r1, #0
 8002814:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	0018      	movs	r0, r3
 800281a:	f000 f857 	bl	80028cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	223d      	movs	r2, #61	@ 0x3d
 8002822:	2102      	movs	r1, #2
 8002824:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	0019      	movs	r1, r3
 8002830:	0010      	movs	r0, r2
 8002832:	f001 fab5 	bl	8003da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2248      	movs	r2, #72	@ 0x48
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	223e      	movs	r2, #62	@ 0x3e
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	223f      	movs	r2, #63	@ 0x3f
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2240      	movs	r2, #64	@ 0x40
 8002852:	2101      	movs	r1, #1
 8002854:	5499      	strb	r1, [r3, r2]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2241      	movs	r2, #65	@ 0x41
 800285a:	2101      	movs	r1, #1
 800285c:	5499      	strb	r1, [r3, r2]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2242      	movs	r2, #66	@ 0x42
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2243      	movs	r2, #67	@ 0x43
 800286a:	2101      	movs	r1, #1
 800286c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2244      	movs	r2, #68	@ 0x44
 8002872:	2101      	movs	r1, #1
 8002874:	5499      	strb	r1, [r3, r2]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2245      	movs	r2, #69	@ 0x45
 800287a:	2101      	movs	r1, #1
 800287c:	5499      	strb	r1, [r3, r2]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2246      	movs	r2, #70	@ 0x46
 8002882:	2101      	movs	r1, #1
 8002884:	5499      	strb	r1, [r3, r2]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2247      	movs	r2, #71	@ 0x47
 800288a:	2101      	movs	r1, #1
 800288c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	223d      	movs	r2, #61	@ 0x3d
 8002892:	2101      	movs	r1, #1
 8002894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40002000 	.word	0x40002000
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40014800 	.word	0x40014800
 80028b4:	0000053b 	.word	0x0000053b
 80028b8:	08004b40 	.word	0x08004b40
 80028bc:	0000053c 	.word	0x0000053c
 80028c0:	0000053d 	.word	0x0000053d
 80028c4:	0000053e 	.word	0x0000053e
 80028c8:	0000053f 	.word	0x0000053f

080028cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a92      	ldr	r2, [pc, #584]	@ (8002b34 <HAL_TIM_PWM_Start+0x258>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d111      	bne.n	8002914 <HAL_TIM_PWM_Start+0x38>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d04f      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d04c      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d049      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d046      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b10      	cmp	r3, #16
 800290c:	d043      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b14      	cmp	r3, #20
 8002912:	d040      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	05db      	lsls	r3, r3, #23
 800291c:	429a      	cmp	r2, r3
 800291e:	d10b      	bne.n	8002938 <HAL_TIM_PWM_Start+0x5c>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d037      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d034      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d031      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d02e      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a7e      	ldr	r2, [pc, #504]	@ (8002b38 <HAL_TIM_PWM_Start+0x25c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10b      	bne.n	800295a <HAL_TIM_PWM_Start+0x7e>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d026      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b04      	cmp	r3, #4
 800294c:	d023      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d020      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d01d      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a77      	ldr	r2, [pc, #476]	@ (8002b3c <HAL_TIM_PWM_Start+0x260>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d102      	bne.n	800296a <HAL_TIM_PWM_Start+0x8e>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d015      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a74      	ldr	r2, [pc, #464]	@ (8002b40 <HAL_TIM_PWM_Start+0x264>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d102      	bne.n	800297a <HAL_TIM_PWM_Start+0x9e>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a71      	ldr	r2, [pc, #452]	@ (8002b44 <HAL_TIM_PWM_Start+0x268>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d102      	bne.n	800298a <HAL_TIM_PWM_Start+0xae>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_TIM_PWM_Start+0xba>
 800298a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b48 <HAL_TIM_PWM_Start+0x26c>)
 800298c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b4c <HAL_TIM_PWM_Start+0x270>)
 800298e:	0011      	movs	r1, r2
 8002990:	0018      	movs	r0, r3
 8002992:	f7fd fe58 	bl	8000646 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d108      	bne.n	80029ae <HAL_TIM_PWM_Start+0xd2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	223e      	movs	r2, #62	@ 0x3e
 80029a0:	5c9b      	ldrb	r3, [r3, r2]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	1e5a      	subs	r2, r3, #1
 80029a8:	4193      	sbcs	r3, r2
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e037      	b.n	8002a1e <HAL_TIM_PWM_Start+0x142>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d108      	bne.n	80029c6 <HAL_TIM_PWM_Start+0xea>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	223f      	movs	r2, #63	@ 0x3f
 80029b8:	5c9b      	ldrb	r3, [r3, r2]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	1e5a      	subs	r2, r3, #1
 80029c0:	4193      	sbcs	r3, r2
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	e02b      	b.n	8002a1e <HAL_TIM_PWM_Start+0x142>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d108      	bne.n	80029de <HAL_TIM_PWM_Start+0x102>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2240      	movs	r2, #64	@ 0x40
 80029d0:	5c9b      	ldrb	r3, [r3, r2]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	1e5a      	subs	r2, r3, #1
 80029d8:	4193      	sbcs	r3, r2
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	e01f      	b.n	8002a1e <HAL_TIM_PWM_Start+0x142>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b0c      	cmp	r3, #12
 80029e2:	d108      	bne.n	80029f6 <HAL_TIM_PWM_Start+0x11a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2241      	movs	r2, #65	@ 0x41
 80029e8:	5c9b      	ldrb	r3, [r3, r2]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	1e5a      	subs	r2, r3, #1
 80029f0:	4193      	sbcs	r3, r2
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	e013      	b.n	8002a1e <HAL_TIM_PWM_Start+0x142>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d108      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x132>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2242      	movs	r2, #66	@ 0x42
 8002a00:	5c9b      	ldrb	r3, [r3, r2]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	1e5a      	subs	r2, r3, #1
 8002a08:	4193      	sbcs	r3, r2
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	e007      	b.n	8002a1e <HAL_TIM_PWM_Start+0x142>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2243      	movs	r2, #67	@ 0x43
 8002a12:	5c9b      	ldrb	r3, [r3, r2]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	4193      	sbcs	r3, r2
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_TIM_PWM_Start+0x14a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e081      	b.n	8002b2a <HAL_TIM_PWM_Start+0x24e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_PWM_Start+0x15a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	223e      	movs	r2, #62	@ 0x3e
 8002a30:	2102      	movs	r1, #2
 8002a32:	5499      	strb	r1, [r3, r2]
 8002a34:	e023      	b.n	8002a7e <HAL_TIM_PWM_Start+0x1a2>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d104      	bne.n	8002a46 <HAL_TIM_PWM_Start+0x16a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	223f      	movs	r2, #63	@ 0x3f
 8002a40:	2102      	movs	r1, #2
 8002a42:	5499      	strb	r1, [r3, r2]
 8002a44:	e01b      	b.n	8002a7e <HAL_TIM_PWM_Start+0x1a2>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x17a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2240      	movs	r2, #64	@ 0x40
 8002a50:	2102      	movs	r1, #2
 8002a52:	5499      	strb	r1, [r3, r2]
 8002a54:	e013      	b.n	8002a7e <HAL_TIM_PWM_Start+0x1a2>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_PWM_Start+0x18a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2241      	movs	r2, #65	@ 0x41
 8002a60:	2102      	movs	r1, #2
 8002a62:	5499      	strb	r1, [r3, r2]
 8002a64:	e00b      	b.n	8002a7e <HAL_TIM_PWM_Start+0x1a2>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_PWM_Start+0x19a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2242      	movs	r2, #66	@ 0x42
 8002a70:	2102      	movs	r1, #2
 8002a72:	5499      	strb	r1, [r3, r2]
 8002a74:	e003      	b.n	8002a7e <HAL_TIM_PWM_Start+0x1a2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2243      	movs	r2, #67	@ 0x43
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6839      	ldr	r1, [r7, #0]
 8002a84:	2201      	movs	r2, #1
 8002a86:	0018      	movs	r0, r3
 8002a88:	f001 fdfc 	bl	8004684 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a28      	ldr	r2, [pc, #160]	@ (8002b34 <HAL_TIM_PWM_Start+0x258>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x1ce>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a29      	ldr	r2, [pc, #164]	@ (8002b40 <HAL_TIM_PWM_Start+0x264>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x1ce>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a27      	ldr	r2, [pc, #156]	@ (8002b44 <HAL_TIM_PWM_Start+0x268>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_PWM_Start+0x1d2>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_TIM_PWM_Start+0x1d4>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0x1ea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2180      	movs	r1, #128	@ 0x80
 8002ac0:	0209      	lsls	r1, r1, #8
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1a      	ldr	r2, [pc, #104]	@ (8002b34 <HAL_TIM_PWM_Start+0x258>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00a      	beq.n	8002ae6 <HAL_TIM_PWM_Start+0x20a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	05db      	lsls	r3, r3, #23
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d004      	beq.n	8002ae6 <HAL_TIM_PWM_Start+0x20a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a15      	ldr	r2, [pc, #84]	@ (8002b38 <HAL_TIM_PWM_Start+0x25c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d116      	bne.n	8002b14 <HAL_TIM_PWM_Start+0x238>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a18      	ldr	r2, [pc, #96]	@ (8002b50 <HAL_TIM_PWM_Start+0x274>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b06      	cmp	r3, #6
 8002af6:	d016      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x24a>
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	025b      	lsls	r3, r3, #9
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d011      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x24a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b12:	e008      	b.n	8002b26 <HAL_TIM_PWM_Start+0x24a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e000      	b.n	8002b28 <HAL_TIM_PWM_Start+0x24c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40002000 	.word	0x40002000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800
 8002b48:	000005c4 	.word	0x000005c4
 8002b4c:	08004b40 	.word	0x08004b40
 8002b50:	00010007 	.word	0x00010007

08002b54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a65      	ldr	r2, [pc, #404]	@ (8002cf8 <HAL_TIM_PWM_Stop+0x1a4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d111      	bne.n	8002b8c <HAL_TIM_PWM_Stop+0x38>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d04f      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d04c      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d049      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d046      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d043      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b14      	cmp	r3, #20
 8002b8a:	d040      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	05db      	lsls	r3, r3, #23
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d10b      	bne.n	8002bb0 <HAL_TIM_PWM_Stop+0x5c>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d037      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d034      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d031      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	d02e      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a51      	ldr	r2, [pc, #324]	@ (8002cfc <HAL_TIM_PWM_Stop+0x1a8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_TIM_PWM_Stop+0x7e>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d026      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d023      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d020      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d01d      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4a      	ldr	r2, [pc, #296]	@ (8002d00 <HAL_TIM_PWM_Stop+0x1ac>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d102      	bne.n	8002be2 <HAL_TIM_PWM_Stop+0x8e>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d015      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a47      	ldr	r2, [pc, #284]	@ (8002d04 <HAL_TIM_PWM_Stop+0x1b0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d102      	bne.n	8002bf2 <HAL_TIM_PWM_Stop+0x9e>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a44      	ldr	r2, [pc, #272]	@ (8002d08 <HAL_TIM_PWM_Stop+0x1b4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d102      	bne.n	8002c02 <HAL_TIM_PWM_Stop+0xae>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_TIM_PWM_Stop+0xba>
 8002c02:	4a42      	ldr	r2, [pc, #264]	@ (8002d0c <HAL_TIM_PWM_Stop+0x1b8>)
 8002c04:	4b42      	ldr	r3, [pc, #264]	@ (8002d10 <HAL_TIM_PWM_Stop+0x1bc>)
 8002c06:	0011      	movs	r1, r2
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7fd fd1c 	bl	8000646 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	2200      	movs	r2, #0
 8002c16:	0018      	movs	r0, r3
 8002c18:	f001 fd34 	bl	8004684 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a35      	ldr	r2, [pc, #212]	@ (8002cf8 <HAL_TIM_PWM_Stop+0x1a4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_TIM_PWM_Stop+0xe6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a36      	ldr	r2, [pc, #216]	@ (8002d04 <HAL_TIM_PWM_Stop+0x1b0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_TIM_PWM_Stop+0xe6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a34      	ldr	r2, [pc, #208]	@ (8002d08 <HAL_TIM_PWM_Stop+0x1b4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PWM_Stop+0xea>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_TIM_PWM_Stop+0xec>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_TIM_PWM_Stop+0x118>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a32      	ldr	r2, [pc, #200]	@ (8002d14 <HAL_TIM_PWM_Stop+0x1c0>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d10d      	bne.n	8002c6c <HAL_TIM_PWM_Stop+0x118>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a30      	ldr	r2, [pc, #192]	@ (8002d18 <HAL_TIM_PWM_Stop+0x1c4>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_PWM_Stop+0x118>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	492d      	ldr	r1, [pc, #180]	@ (8002d1c <HAL_TIM_PWM_Stop+0x1c8>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a28      	ldr	r2, [pc, #160]	@ (8002d14 <HAL_TIM_PWM_Stop+0x1c0>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	d10d      	bne.n	8002c94 <HAL_TIM_PWM_Stop+0x140>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a26      	ldr	r2, [pc, #152]	@ (8002d18 <HAL_TIM_PWM_Stop+0x1c4>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_PWM_Stop+0x140>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	438a      	bics	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d104      	bne.n	8002ca4 <HAL_TIM_PWM_Stop+0x150>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	223e      	movs	r2, #62	@ 0x3e
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
 8002ca2:	e023      	b.n	8002cec <HAL_TIM_PWM_Stop+0x198>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d104      	bne.n	8002cb4 <HAL_TIM_PWM_Stop+0x160>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	223f      	movs	r2, #63	@ 0x3f
 8002cae:	2101      	movs	r1, #1
 8002cb0:	5499      	strb	r1, [r3, r2]
 8002cb2:	e01b      	b.n	8002cec <HAL_TIM_PWM_Stop+0x198>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d104      	bne.n	8002cc4 <HAL_TIM_PWM_Stop+0x170>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2240      	movs	r2, #64	@ 0x40
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]
 8002cc2:	e013      	b.n	8002cec <HAL_TIM_PWM_Stop+0x198>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d104      	bne.n	8002cd4 <HAL_TIM_PWM_Stop+0x180>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2241      	movs	r2, #65	@ 0x41
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5499      	strb	r1, [r3, r2]
 8002cd2:	e00b      	b.n	8002cec <HAL_TIM_PWM_Stop+0x198>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d104      	bne.n	8002ce4 <HAL_TIM_PWM_Stop+0x190>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2242      	movs	r2, #66	@ 0x42
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]
 8002ce2:	e003      	b.n	8002cec <HAL_TIM_PWM_Stop+0x198>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2243      	movs	r2, #67	@ 0x43
 8002ce8:	2101      	movs	r1, #1
 8002cea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b002      	add	sp, #8
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	40012c00 	.word	0x40012c00
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40002000 	.word	0x40002000
 8002d04:	40014400 	.word	0x40014400
 8002d08:	40014800 	.word	0x40014800
 8002d0c:	000005fa 	.word	0x000005fa
 8002d10:	08004b40 	.word	0x08004b40
 8002d14:	00001111 	.word	0x00001111
 8002d18:	00000444 	.word	0x00000444
 8002d1c:	ffff7fff 	.word	0xffff7fff

08002d20 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	1cbb      	adds	r3, r7, #2
 8002d30:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2317      	movs	r3, #23
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4abc      	ldr	r2, [pc, #752]	@ (8003030 <HAL_TIM_PWM_Start_DMA+0x310>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d111      	bne.n	8002d68 <HAL_TIM_PWM_Start_DMA+0x48>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d049      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d046      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d043      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b0c      	cmp	r3, #12
 8002d5a:	d040      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d03d      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b14      	cmp	r3, #20
 8002d66:	d03a      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	05db      	lsls	r3, r3, #23
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d10b      	bne.n	8002d8c <HAL_TIM_PWM_Start_DMA+0x6c>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d031      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d02e      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d02b      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b0c      	cmp	r3, #12
 8002d8a:	d028      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4aa8      	ldr	r2, [pc, #672]	@ (8003034 <HAL_TIM_PWM_Start_DMA+0x314>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10b      	bne.n	8002dae <HAL_TIM_PWM_Start_DMA+0x8e>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d01d      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d01a      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d017      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4aa1      	ldr	r2, [pc, #644]	@ (8003038 <HAL_TIM_PWM_Start_DMA+0x318>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d102      	bne.n	8002dbe <HAL_TIM_PWM_Start_DMA+0x9e>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00f      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a9e      	ldr	r2, [pc, #632]	@ (800303c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d102      	bne.n	8002dce <HAL_TIM_PWM_Start_DMA+0xae>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0xbe>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a9b      	ldr	r2, [pc, #620]	@ (8003040 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d108      	bne.n	8002dea <HAL_TIM_PWM_Start_DMA+0xca>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <HAL_TIM_PWM_Start_DMA+0xca>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d002      	beq.n	8002dea <HAL_TIM_PWM_Start_DMA+0xca>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b14      	cmp	r3, #20
 8002de8:	d105      	bne.n	8002df6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002dea:	4a96      	ldr	r2, [pc, #600]	@ (8003044 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002dec:	4b96      	ldr	r3, [pc, #600]	@ (8003048 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002dee:	0011      	movs	r1, r2
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7fd fc28 	bl	8000646 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d108      	bne.n	8002e0e <HAL_TIM_PWM_Start_DMA+0xee>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	223e      	movs	r2, #62	@ 0x3e
 8002e00:	5c9b      	ldrb	r3, [r3, r2]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3b02      	subs	r3, #2
 8002e06:	425a      	negs	r2, r3
 8002e08:	4153      	adcs	r3, r2
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	e037      	b.n	8002e7e <HAL_TIM_PWM_Start_DMA+0x15e>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d108      	bne.n	8002e26 <HAL_TIM_PWM_Start_DMA+0x106>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	223f      	movs	r2, #63	@ 0x3f
 8002e18:	5c9b      	ldrb	r3, [r3, r2]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	3b02      	subs	r3, #2
 8002e1e:	425a      	negs	r2, r3
 8002e20:	4153      	adcs	r3, r2
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e02b      	b.n	8002e7e <HAL_TIM_PWM_Start_DMA+0x15e>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d108      	bne.n	8002e3e <HAL_TIM_PWM_Start_DMA+0x11e>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2240      	movs	r2, #64	@ 0x40
 8002e30:	5c9b      	ldrb	r3, [r3, r2]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3b02      	subs	r3, #2
 8002e36:	425a      	negs	r2, r3
 8002e38:	4153      	adcs	r3, r2
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	e01f      	b.n	8002e7e <HAL_TIM_PWM_Start_DMA+0x15e>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d108      	bne.n	8002e56 <HAL_TIM_PWM_Start_DMA+0x136>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2241      	movs	r2, #65	@ 0x41
 8002e48:	5c9b      	ldrb	r3, [r3, r2]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3b02      	subs	r3, #2
 8002e4e:	425a      	negs	r2, r3
 8002e50:	4153      	adcs	r3, r2
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	e013      	b.n	8002e7e <HAL_TIM_PWM_Start_DMA+0x15e>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d108      	bne.n	8002e6e <HAL_TIM_PWM_Start_DMA+0x14e>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2242      	movs	r2, #66	@ 0x42
 8002e60:	5c9b      	ldrb	r3, [r3, r2]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	3b02      	subs	r3, #2
 8002e66:	425a      	negs	r2, r3
 8002e68:	4153      	adcs	r3, r2
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	e007      	b.n	8002e7e <HAL_TIM_PWM_Start_DMA+0x15e>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2243      	movs	r2, #67	@ 0x43
 8002e72:	5c9b      	ldrb	r3, [r3, r2]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	3b02      	subs	r3, #2
 8002e78:	425a      	negs	r2, r3
 8002e7a:	4153      	adcs	r3, r2
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_TIM_PWM_Start_DMA+0x166>
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
 8002e84:	e19e      	b.n	80031c4 <HAL_TIM_PWM_Start_DMA+0x4a4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d108      	bne.n	8002e9e <HAL_TIM_PWM_Start_DMA+0x17e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	223e      	movs	r2, #62	@ 0x3e
 8002e90:	5c9b      	ldrb	r3, [r3, r2]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	425a      	negs	r2, r3
 8002e98:	4153      	adcs	r3, r2
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	e037      	b.n	8002f0e <HAL_TIM_PWM_Start_DMA+0x1ee>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d108      	bne.n	8002eb6 <HAL_TIM_PWM_Start_DMA+0x196>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	223f      	movs	r2, #63	@ 0x3f
 8002ea8:	5c9b      	ldrb	r3, [r3, r2]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	425a      	negs	r2, r3
 8002eb0:	4153      	adcs	r3, r2
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	e02b      	b.n	8002f0e <HAL_TIM_PWM_Start_DMA+0x1ee>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d108      	bne.n	8002ece <HAL_TIM_PWM_Start_DMA+0x1ae>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2240      	movs	r2, #64	@ 0x40
 8002ec0:	5c9b      	ldrb	r3, [r3, r2]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	425a      	negs	r2, r3
 8002ec8:	4153      	adcs	r3, r2
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	e01f      	b.n	8002f0e <HAL_TIM_PWM_Start_DMA+0x1ee>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	d108      	bne.n	8002ee6 <HAL_TIM_PWM_Start_DMA+0x1c6>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2241      	movs	r2, #65	@ 0x41
 8002ed8:	5c9b      	ldrb	r3, [r3, r2]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	425a      	negs	r2, r3
 8002ee0:	4153      	adcs	r3, r2
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	e013      	b.n	8002f0e <HAL_TIM_PWM_Start_DMA+0x1ee>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d108      	bne.n	8002efe <HAL_TIM_PWM_Start_DMA+0x1de>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2242      	movs	r2, #66	@ 0x42
 8002ef0:	5c9b      	ldrb	r3, [r3, r2]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	425a      	negs	r2, r3
 8002ef8:	4153      	adcs	r3, r2
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	e007      	b.n	8002f0e <HAL_TIM_PWM_Start_DMA+0x1ee>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2243      	movs	r2, #67	@ 0x43
 8002f02:	5c9b      	ldrb	r3, [r3, r2]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	425a      	negs	r2, r3
 8002f0a:	4153      	adcs	r3, r2
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d035      	beq.n	8002f7e <HAL_TIM_PWM_Start_DMA+0x25e>
  {
    if ((pData == NULL) || (Length == 0U))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_TIM_PWM_Start_DMA+0x200>
 8002f18:	1cbb      	adds	r3, r7, #2
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_TIM_PWM_Start_DMA+0x204>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e14f      	b.n	80031c4 <HAL_TIM_PWM_Start_DMA+0x4a4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d104      	bne.n	8002f34 <HAL_TIM_PWM_Start_DMA+0x214>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	223e      	movs	r2, #62	@ 0x3e
 8002f2e:	2102      	movs	r1, #2
 8002f30:	5499      	strb	r1, [r3, r2]
 8002f32:	e026      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x262>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d104      	bne.n	8002f44 <HAL_TIM_PWM_Start_DMA+0x224>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	223f      	movs	r2, #63	@ 0x3f
 8002f3e:	2102      	movs	r1, #2
 8002f40:	5499      	strb	r1, [r3, r2]
 8002f42:	e01e      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x262>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d104      	bne.n	8002f54 <HAL_TIM_PWM_Start_DMA+0x234>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2240      	movs	r2, #64	@ 0x40
 8002f4e:	2102      	movs	r1, #2
 8002f50:	5499      	strb	r1, [r3, r2]
 8002f52:	e016      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x262>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d104      	bne.n	8002f64 <HAL_TIM_PWM_Start_DMA+0x244>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2241      	movs	r2, #65	@ 0x41
 8002f5e:	2102      	movs	r1, #2
 8002f60:	5499      	strb	r1, [r3, r2]
 8002f62:	e00e      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x262>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d104      	bne.n	8002f74 <HAL_TIM_PWM_Start_DMA+0x254>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2242      	movs	r2, #66	@ 0x42
 8002f6e:	2102      	movs	r1, #2
 8002f70:	5499      	strb	r1, [r3, r2]
 8002f72:	e006      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x262>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2243      	movs	r2, #67	@ 0x43
 8002f78:	2102      	movs	r1, #2
 8002f7a:	5499      	strb	r1, [r3, r2]
 8002f7c:	e001      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x262>
    }
  }
  else
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e120      	b.n	80031c4 <HAL_TIM_PWM_Start_DMA+0x4a4>
  }

  switch (Channel)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d100      	bne.n	8002f8a <HAL_TIM_PWM_Start_DMA+0x26a>
 8002f88:	e095      	b.n	80030b6 <HAL_TIM_PWM_Start_DMA+0x396>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b0c      	cmp	r3, #12
 8002f8e:	d900      	bls.n	8002f92 <HAL_TIM_PWM_Start_DMA+0x272>
 8002f90:	e0b6      	b.n	8003100 <HAL_TIM_PWM_Start_DMA+0x3e0>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d069      	beq.n	800306c <HAL_TIM_PWM_Start_DMA+0x34c>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d900      	bls.n	8002fa0 <HAL_TIM_PWM_Start_DMA+0x280>
 8002f9e:	e0af      	b.n	8003100 <HAL_TIM_PWM_Start_DMA+0x3e0>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_PWM_Start_DMA+0x28e>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d025      	beq.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x2d8>
 8002fac:	e0a8      	b.n	8003100 <HAL_TIM_PWM_Start_DMA+0x3e0>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	4a26      	ldr	r2, [pc, #152]	@ (800304c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	4a25      	ldr	r2, [pc, #148]	@ (8003050 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002fbc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	4a24      	ldr	r2, [pc, #144]	@ (8003054 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002fc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3334      	adds	r3, #52	@ 0x34
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	1cbb      	adds	r3, r7, #2
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	f7fd ff9a 	bl	8000f10 <HAL_DMA_Start_IT>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_TIM_PWM_Start_DMA+0x2c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0ef      	b.n	80031c4 <HAL_TIM_PWM_Start_DMA+0x4a4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2180      	movs	r1, #128	@ 0x80
 8002ff0:	0089      	lsls	r1, r1, #2
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	60da      	str	r2, [r3, #12]
      break;
 8002ff6:	e088      	b.n	800310a <HAL_TIM_PWM_Start_DMA+0x3ea>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	4a13      	ldr	r2, [pc, #76]	@ (800304c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	4a11      	ldr	r2, [pc, #68]	@ (8003054 <HAL_TIM_PWM_Start_DMA+0x334>)
 800300e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3338      	adds	r3, #56	@ 0x38
 800301c:	001a      	movs	r2, r3
 800301e:	1cbb      	adds	r3, r7, #2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	f7fd ff75 	bl	8000f10 <HAL_DMA_Start_IT>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d016      	beq.n	8003058 <HAL_TIM_PWM_Start_DMA+0x338>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0ca      	b.n	80031c4 <HAL_TIM_PWM_Start_DMA+0x4a4>
 800302e:	46c0      	nop			@ (mov r8, r8)
 8003030:	40012c00 	.word	0x40012c00
 8003034:	40000400 	.word	0x40000400
 8003038:	40002000 	.word	0x40002000
 800303c:	40014400 	.word	0x40014400
 8003040:	40014800 	.word	0x40014800
 8003044:	000006cb 	.word	0x000006cb
 8003048:	08004b40 	.word	0x08004b40
 800304c:	08003c8d 	.word	0x08003c8d
 8003050:	08003d37 	.word	0x08003d37
 8003054:	08003bf9 	.word	0x08003bf9
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2180      	movs	r1, #128	@ 0x80
 8003064:	00c9      	lsls	r1, r1, #3
 8003066:	430a      	orrs	r2, r1
 8003068:	60da      	str	r2, [r3, #12]
      break;
 800306a:	e04e      	b.n	800310a <HAL_TIM_PWM_Start_DMA+0x3ea>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	4a56      	ldr	r2, [pc, #344]	@ (80031cc <HAL_TIM_PWM_Start_DMA+0x4ac>)
 8003072:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	4a55      	ldr	r2, [pc, #340]	@ (80031d0 <HAL_TIM_PWM_Start_DMA+0x4b0>)
 800307a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	4a54      	ldr	r2, [pc, #336]	@ (80031d4 <HAL_TIM_PWM_Start_DMA+0x4b4>)
 8003082:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	333c      	adds	r3, #60	@ 0x3c
 8003090:	001a      	movs	r2, r3
 8003092:	1cbb      	adds	r3, r7, #2
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	f7fd ff3b 	bl	8000f10 <HAL_DMA_Start_IT>
 800309a:	1e03      	subs	r3, r0, #0
 800309c:	d001      	beq.n	80030a2 <HAL_TIM_PWM_Start_DMA+0x382>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e090      	b.n	80031c4 <HAL_TIM_PWM_Start_DMA+0x4a4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2180      	movs	r1, #128	@ 0x80
 80030ae:	0109      	lsls	r1, r1, #4
 80030b0:	430a      	orrs	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]
      break;
 80030b4:	e029      	b.n	800310a <HAL_TIM_PWM_Start_DMA+0x3ea>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	4a44      	ldr	r2, [pc, #272]	@ (80031cc <HAL_TIM_PWM_Start_DMA+0x4ac>)
 80030bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	4a43      	ldr	r2, [pc, #268]	@ (80031d0 <HAL_TIM_PWM_Start_DMA+0x4b0>)
 80030c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	4a42      	ldr	r2, [pc, #264]	@ (80031d4 <HAL_TIM_PWM_Start_DMA+0x4b4>)
 80030cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3340      	adds	r3, #64	@ 0x40
 80030da:	001a      	movs	r2, r3
 80030dc:	1cbb      	adds	r3, r7, #2
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	f7fd ff16 	bl	8000f10 <HAL_DMA_Start_IT>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d001      	beq.n	80030ec <HAL_TIM_PWM_Start_DMA+0x3cc>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e06b      	b.n	80031c4 <HAL_TIM_PWM_Start_DMA+0x4a4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2180      	movs	r1, #128	@ 0x80
 80030f8:	0149      	lsls	r1, r1, #5
 80030fa:	430a      	orrs	r2, r1
 80030fc:	60da      	str	r2, [r3, #12]
      break;
 80030fe:	e004      	b.n	800310a <HAL_TIM_PWM_Start_DMA+0x3ea>
    }

    default:
      status = HAL_ERROR;
 8003100:	2317      	movs	r3, #23
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
      break;
 8003108:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800310a:	2317      	movs	r3, #23
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d154      	bne.n	80031be <HAL_TIM_PWM_Start_DMA+0x49e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	2201      	movs	r2, #1
 800311c:	0018      	movs	r0, r3
 800311e:	f001 fab1 	bl	8004684 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2c      	ldr	r2, [pc, #176]	@ (80031d8 <HAL_TIM_PWM_Start_DMA+0x4b8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <HAL_TIM_PWM_Start_DMA+0x420>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2a      	ldr	r2, [pc, #168]	@ (80031dc <HAL_TIM_PWM_Start_DMA+0x4bc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <HAL_TIM_PWM_Start_DMA+0x420>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a29      	ldr	r2, [pc, #164]	@ (80031e0 <HAL_TIM_PWM_Start_DMA+0x4c0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <HAL_TIM_PWM_Start_DMA+0x424>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_TIM_PWM_Start_DMA+0x426>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_TIM_PWM_Start_DMA+0x43c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2180      	movs	r1, #128	@ 0x80
 8003156:	0209      	lsls	r1, r1, #8
 8003158:	430a      	orrs	r2, r1
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1d      	ldr	r2, [pc, #116]	@ (80031d8 <HAL_TIM_PWM_Start_DMA+0x4b8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00a      	beq.n	800317c <HAL_TIM_PWM_Start_DMA+0x45c>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	05db      	lsls	r3, r3, #23
 800316e:	429a      	cmp	r2, r3
 8003170:	d004      	beq.n	800317c <HAL_TIM_PWM_Start_DMA+0x45c>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1b      	ldr	r2, [pc, #108]	@ (80031e4 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d116      	bne.n	80031aa <HAL_TIM_PWM_Start_DMA+0x48a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4a19      	ldr	r2, [pc, #100]	@ (80031e8 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	2b06      	cmp	r3, #6
 800318c:	d016      	beq.n	80031bc <HAL_TIM_PWM_Start_DMA+0x49c>
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	025b      	lsls	r3, r3, #9
 8003194:	429a      	cmp	r2, r3
 8003196:	d011      	beq.n	80031bc <HAL_TIM_PWM_Start_DMA+0x49c>
      {
        __HAL_TIM_ENABLE(htim);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2101      	movs	r1, #1
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a8:	e008      	b.n	80031bc <HAL_TIM_PWM_Start_DMA+0x49c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2101      	movs	r1, #1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e000      	b.n	80031be <HAL_TIM_PWM_Start_DMA+0x49e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031bc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80031be:	2317      	movs	r3, #23
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	781b      	ldrb	r3, [r3, #0]
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b006      	add	sp, #24
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	08003c8d 	.word	0x08003c8d
 80031d0:	08003d37 	.word	0x08003d37
 80031d4:	08003bf9 	.word	0x08003bf9
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40014400 	.word	0x40014400
 80031e0:	40014800 	.word	0x40014800
 80031e4:	40000400 	.word	0x40000400
 80031e8:	00010007 	.word	0x00010007

080031ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f8:	2317      	movs	r3, #23
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d017      	beq.n	8003236 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d014      	beq.n	8003236 <HAL_TIM_PWM_ConfigChannel+0x4a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b08      	cmp	r3, #8
 8003210:	d011      	beq.n	8003236 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b0c      	cmp	r3, #12
 8003216:	d00e      	beq.n	8003236 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b10      	cmp	r3, #16
 800321c:	d00b      	beq.n	8003236 <HAL_TIM_PWM_ConfigChannel+0x4a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b14      	cmp	r3, #20
 8003222:	d008      	beq.n	8003236 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b3c      	cmp	r3, #60	@ 0x3c
 8003228:	d005      	beq.n	8003236 <HAL_TIM_PWM_ConfigChannel+0x4a>
 800322a:	4ad1      	ldr	r2, [pc, #836]	@ (8003570 <HAL_TIM_PWM_ConfigChannel+0x384>)
 800322c:	4bd1      	ldr	r3, [pc, #836]	@ (8003574 <HAL_TIM_PWM_ConfigChannel+0x388>)
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f7fd fa08 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b60      	cmp	r3, #96	@ 0x60
 800323c:	d01d      	beq.n	800327a <HAL_TIM_PWM_ConfigChannel+0x8e>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b70      	cmp	r3, #112	@ 0x70
 8003244:	d019      	beq.n	800327a <HAL_TIM_PWM_ConfigChannel+0x8e>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4acb      	ldr	r2, [pc, #812]	@ (8003578 <HAL_TIM_PWM_ConfigChannel+0x38c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d014      	beq.n	800327a <HAL_TIM_PWM_ConfigChannel+0x8e>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4ac9      	ldr	r2, [pc, #804]	@ (800357c <HAL_TIM_PWM_ConfigChannel+0x390>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00f      	beq.n	800327a <HAL_TIM_PWM_ConfigChannel+0x8e>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4ac8      	ldr	r2, [pc, #800]	@ (8003580 <HAL_TIM_PWM_ConfigChannel+0x394>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00a      	beq.n	800327a <HAL_TIM_PWM_ConfigChannel+0x8e>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4ac6      	ldr	r2, [pc, #792]	@ (8003584 <HAL_TIM_PWM_ConfigChannel+0x398>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d005      	beq.n	800327a <HAL_TIM_PWM_ConfigChannel+0x8e>
 800326e:	4ac6      	ldr	r2, [pc, #792]	@ (8003588 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8003270:	4bc0      	ldr	r3, [pc, #768]	@ (8003574 <HAL_TIM_PWM_ConfigChannel+0x388>)
 8003272:	0011      	movs	r1, r2
 8003274:	0018      	movs	r0, r3
 8003276:	f7fd f9e6 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d005      	beq.n	8003296 <HAL_TIM_PWM_ConfigChannel+0xaa>
 800328a:	4ac0      	ldr	r2, [pc, #768]	@ (800358c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800328c:	4bb9      	ldr	r3, [pc, #740]	@ (8003574 <HAL_TIM_PWM_ConfigChannel+0x388>)
 800328e:	0011      	movs	r1, r2
 8003290:	0018      	movs	r0, r3
 8003292:	f7fd f9d8 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0xc6>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d005      	beq.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0xc6>
 80032a6:	4aba      	ldr	r2, [pc, #744]	@ (8003590 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80032a8:	4bb2      	ldr	r3, [pc, #712]	@ (8003574 <HAL_TIM_PWM_ConfigChannel+0x388>)
 80032aa:	0011      	movs	r1, r2
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fd f9ca 	bl	8000646 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	223c      	movs	r2, #60	@ 0x3c
 80032b6:	5c9b      	ldrb	r3, [r3, r2]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_TIM_PWM_ConfigChannel+0xd4>
 80032bc:	2302      	movs	r3, #2
 80032be:	e18f      	b.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x3f4>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	223c      	movs	r2, #60	@ 0x3c
 80032c4:	2101      	movs	r1, #1
 80032c6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b14      	cmp	r3, #20
 80032cc:	d900      	bls.n	80032d0 <HAL_TIM_PWM_ConfigChannel+0xe4>
 80032ce:	e17b      	b.n	80035c8 <HAL_TIM_PWM_ConfigChannel+0x3dc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	009a      	lsls	r2, r3, #2
 80032d4:	4baf      	ldr	r3, [pc, #700]	@ (8003594 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80032d6:	18d3      	adds	r3, r2, r3
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	469f      	mov	pc, r3
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4aad      	ldr	r2, [pc, #692]	@ (8003598 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	05db      	lsls	r3, r3, #23
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d019      	beq.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4aa9      	ldr	r2, [pc, #676]	@ (800359c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d014      	beq.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4aa7      	ldr	r2, [pc, #668]	@ (80035a0 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00f      	beq.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4aa6      	ldr	r2, [pc, #664]	@ (80035a4 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00a      	beq.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4aa4      	ldr	r2, [pc, #656]	@ (80035a8 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d005      	beq.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800331a:	4aa4      	ldr	r2, [pc, #656]	@ (80035ac <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 800331c:	4b95      	ldr	r3, [pc, #596]	@ (8003574 <HAL_TIM_PWM_ConfigChannel+0x388>)
 800331e:	0011      	movs	r1, r2
 8003320:	0018      	movs	r0, r3
 8003322:	f7fd f990 	bl	8000646 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	0011      	movs	r1, r2
 800332e:	0018      	movs	r0, r3
 8003330:	f000 fdba 	bl	8003ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2108      	movs	r1, #8
 8003340:	430a      	orrs	r2, r1
 8003342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2104      	movs	r1, #4
 8003350:	438a      	bics	r2, r1
 8003352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6999      	ldr	r1, [r3, #24]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	619a      	str	r2, [r3, #24]
      break;
 8003366:	e134      	b.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0x3e6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a8a      	ldr	r2, [pc, #552]	@ (8003598 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d010      	beq.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	05db      	lsls	r3, r3, #23
 800337a:	429a      	cmp	r2, r3
 800337c:	d00a      	beq.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a86      	ldr	r2, [pc, #536]	@ (800359c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d005      	beq.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8003388:	4a89      	ldr	r2, [pc, #548]	@ (80035b0 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 800338a:	4b7a      	ldr	r3, [pc, #488]	@ (8003574 <HAL_TIM_PWM_ConfigChannel+0x388>)
 800338c:	0011      	movs	r1, r2
 800338e:	0018      	movs	r0, r3
 8003390:	f7fd f959 	bl	8000646 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	0011      	movs	r1, r2
 800339c:	0018      	movs	r0, r3
 800339e:	f000 fe39 	bl	8004014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2180      	movs	r1, #128	@ 0x80
 80033ae:	0109      	lsls	r1, r1, #4
 80033b0:	430a      	orrs	r2, r1
 80033b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	497d      	ldr	r1, [pc, #500]	@ (80035b4 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 80033c0:	400a      	ands	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	021a      	lsls	r2, r3, #8
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	619a      	str	r2, [r3, #24]
      break;
 80033d8:	e0fb      	b.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0x3e6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a6e      	ldr	r2, [pc, #440]	@ (8003598 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d010      	beq.n	8003406 <HAL_TIM_PWM_ConfigChannel+0x21a>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	2380      	movs	r3, #128	@ 0x80
 80033ea:	05db      	lsls	r3, r3, #23
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d00a      	beq.n	8003406 <HAL_TIM_PWM_ConfigChannel+0x21a>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a69      	ldr	r2, [pc, #420]	@ (800359c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d005      	beq.n	8003406 <HAL_TIM_PWM_ConfigChannel+0x21a>
 80033fa:	4a6f      	ldr	r2, [pc, #444]	@ (80035b8 <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 80033fc:	4b5d      	ldr	r3, [pc, #372]	@ (8003574 <HAL_TIM_PWM_ConfigChannel+0x388>)
 80033fe:	0011      	movs	r1, r2
 8003400:	0018      	movs	r0, r3
 8003402:	f7fd f920 	bl	8000646 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	0011      	movs	r1, r2
 800340e:	0018      	movs	r0, r3
 8003410:	f000 feb4 	bl	800417c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2108      	movs	r1, #8
 8003420:	430a      	orrs	r2, r1
 8003422:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2104      	movs	r1, #4
 8003430:	438a      	bics	r2, r1
 8003432:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69d9      	ldr	r1, [r3, #28]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	61da      	str	r2, [r3, #28]
      break;
 8003446:	e0c4      	b.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0x3e6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a52      	ldr	r2, [pc, #328]	@ (8003598 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d010      	beq.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x288>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	2380      	movs	r3, #128	@ 0x80
 8003458:	05db      	lsls	r3, r3, #23
 800345a:	429a      	cmp	r2, r3
 800345c:	d00a      	beq.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x288>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a4e      	ldr	r2, [pc, #312]	@ (800359c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d005      	beq.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x288>
 8003468:	4a54      	ldr	r2, [pc, #336]	@ (80035bc <HAL_TIM_PWM_ConfigChannel+0x3d0>)
 800346a:	4b42      	ldr	r3, [pc, #264]	@ (8003574 <HAL_TIM_PWM_ConfigChannel+0x388>)
 800346c:	0011      	movs	r1, r2
 800346e:	0018      	movs	r0, r3
 8003470:	f7fd f8e9 	bl	8000646 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	0011      	movs	r1, r2
 800347c:	0018      	movs	r0, r3
 800347e:	f000 ff35 	bl	80042ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2180      	movs	r1, #128	@ 0x80
 800348e:	0109      	lsls	r1, r1, #4
 8003490:	430a      	orrs	r2, r1
 8003492:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69da      	ldr	r2, [r3, #28]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4945      	ldr	r1, [pc, #276]	@ (80035b4 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69d9      	ldr	r1, [r3, #28]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	021a      	lsls	r2, r3, #8
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	61da      	str	r2, [r3, #28]
      break;
 80034b8:	e08b      	b.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0x3e6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a36      	ldr	r2, [pc, #216]	@ (8003598 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d005      	beq.n	80034d0 <HAL_TIM_PWM_ConfigChannel+0x2e4>
 80034c4:	4a3e      	ldr	r2, [pc, #248]	@ (80035c0 <HAL_TIM_PWM_ConfigChannel+0x3d4>)
 80034c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003574 <HAL_TIM_PWM_ConfigChannel+0x388>)
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7fd f8bb 	bl	8000646 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	0011      	movs	r1, r2
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 ff7f 	bl	80043dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2108      	movs	r1, #8
 80034ea:	430a      	orrs	r2, r1
 80034ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2104      	movs	r1, #4
 80034fa:	438a      	bics	r2, r1
 80034fc:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003510:	e05f      	b.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0x3e6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a20      	ldr	r2, [pc, #128]	@ (8003598 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d005      	beq.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800351c:	4a29      	ldr	r2, [pc, #164]	@ (80035c4 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_TIM_PWM_ConfigChannel+0x388>)
 8003520:	0011      	movs	r1, r2
 8003522:	0018      	movs	r0, r3
 8003524:	f7fd f88f 	bl	8000646 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	0011      	movs	r1, r2
 8003530:	0018      	movs	r0, r3
 8003532:	f000 ffad 	bl	8004490 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2180      	movs	r1, #128	@ 0x80
 8003542:	0109      	lsls	r1, r1, #4
 8003544:	430a      	orrs	r2, r1
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4918      	ldr	r1, [pc, #96]	@ (80035b4 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 8003554:	400a      	ands	r2, r1
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	021a      	lsls	r2, r3, #8
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800356c:	e031      	b.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0x3e6>
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	000010bb 	.word	0x000010bb
 8003574:	08004b40 	.word	0x08004b40
 8003578:	00010040 	.word	0x00010040
 800357c:	00010050 	.word	0x00010050
 8003580:	00010060 	.word	0x00010060
 8003584:	00010070 	.word	0x00010070
 8003588:	000010bc 	.word	0x000010bc
 800358c:	000010bd 	.word	0x000010bd
 8003590:	000010be 	.word	0x000010be
 8003594:	08004c08 	.word	0x08004c08
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40000400 	.word	0x40000400
 80035a0:	40002000 	.word	0x40002000
 80035a4:	40014400 	.word	0x40014400
 80035a8:	40014800 	.word	0x40014800
 80035ac:	000010c8 	.word	0x000010c8
 80035b0:	000010d9 	.word	0x000010d9
 80035b4:	fffffbff 	.word	0xfffffbff
 80035b8:	000010ea 	.word	0x000010ea
 80035bc:	000010fb 	.word	0x000010fb
 80035c0:	0000110c 	.word	0x0000110c
 80035c4:	0000111d 	.word	0x0000111d
    }

    default:
      status = HAL_ERROR;
 80035c8:	2317      	movs	r3, #23
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
      break;
 80035d0:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	223c      	movs	r2, #60	@ 0x3c
 80035d6:	2100      	movs	r1, #0
 80035d8:	5499      	strb	r1, [r3, r2]

  return status;
 80035da:	2317      	movs	r3, #23
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	781b      	ldrb	r3, [r3, #0]
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b006      	add	sp, #24
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	230f      	movs	r3, #15
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	223c      	movs	r2, #60	@ 0x3c
 80035fe:	5c9b      	ldrb	r3, [r3, r2]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_TIM_ConfigClockSource+0x20>
 8003604:	2302      	movs	r3, #2
 8003606:	e2c1      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x5a4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	223c      	movs	r2, #60	@ 0x3c
 800360c:	2101      	movs	r1, #1
 800360e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	223d      	movs	r2, #61	@ 0x3d
 8003614:	2102      	movs	r1, #2
 8003616:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	2380      	movs	r3, #128	@ 0x80
 800361e:	015b      	lsls	r3, r3, #5
 8003620:	429a      	cmp	r2, r3
 8003622:	d02b      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x94>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b70      	cmp	r3, #112	@ 0x70
 800362a:	d027      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x94>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	019b      	lsls	r3, r3, #6
 8003634:	429a      	cmp	r2, r3
 8003636:	d021      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x94>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b40      	cmp	r3, #64	@ 0x40
 800363e:	d01d      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x94>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b50      	cmp	r3, #80	@ 0x50
 8003646:	d019      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x94>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b60      	cmp	r3, #96	@ 0x60
 800364e:	d015      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x94>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d011      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x94>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b10      	cmp	r3, #16
 800365e:	d00d      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x94>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b20      	cmp	r3, #32
 8003666:	d009      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x94>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b30      	cmp	r3, #48	@ 0x30
 800366e:	d005      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x94>
 8003670:	4aaa      	ldr	r2, [pc, #680]	@ (800391c <HAL_TIM_ConfigClockSource+0x334>)
 8003672:	4bab      	ldr	r3, [pc, #684]	@ (8003920 <HAL_TIM_ConfigClockSource+0x338>)
 8003674:	0011      	movs	r1, r2
 8003676:	0018      	movs	r0, r3
 8003678:	f7fc ffe5 	bl	8000646 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4aa7      	ldr	r2, [pc, #668]	@ (8003924 <HAL_TIM_ConfigClockSource+0x33c>)
 8003688:	4013      	ands	r3, r2
 800368a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4aa6      	ldr	r2, [pc, #664]	@ (8003928 <HAL_TIM_ConfigClockSource+0x340>)
 8003690:	4013      	ands	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2280      	movs	r2, #128	@ 0x80
 80036a2:	0192      	lsls	r2, r2, #6
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d100      	bne.n	80036aa <HAL_TIM_ConfigClockSource+0xc2>
 80036a8:	e0cc      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x25c>
 80036aa:	2280      	movs	r2, #128	@ 0x80
 80036ac:	0192      	lsls	r2, r2, #6
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d900      	bls.n	80036b4 <HAL_TIM_ConfigClockSource+0xcc>
 80036b2:	e25a      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x582>
 80036b4:	2280      	movs	r2, #128	@ 0x80
 80036b6:	0152      	lsls	r2, r2, #5
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d028      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x126>
 80036bc:	2280      	movs	r2, #128	@ 0x80
 80036be:	0152      	lsls	r2, r2, #5
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d900      	bls.n	80036c6 <HAL_TIM_ConfigClockSource+0xde>
 80036c4:	e251      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x582>
 80036c6:	2b70      	cmp	r3, #112	@ 0x70
 80036c8:	d04d      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x17e>
 80036ca:	d900      	bls.n	80036ce <HAL_TIM_ConfigClockSource+0xe6>
 80036cc:	e24d      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x582>
 80036ce:	2b60      	cmp	r3, #96	@ 0x60
 80036d0:	d100      	bne.n	80036d4 <HAL_TIM_ConfigClockSource+0xec>
 80036d2:	e193      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x414>
 80036d4:	d900      	bls.n	80036d8 <HAL_TIM_ConfigClockSource+0xf0>
 80036d6:	e248      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x582>
 80036d8:	2b50      	cmp	r3, #80	@ 0x50
 80036da:	d100      	bne.n	80036de <HAL_TIM_ConfigClockSource+0xf6>
 80036dc:	e142      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x37c>
 80036de:	d900      	bls.n	80036e2 <HAL_TIM_ConfigClockSource+0xfa>
 80036e0:	e243      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x582>
 80036e2:	2b40      	cmp	r3, #64	@ 0x40
 80036e4:	d100      	bne.n	80036e8 <HAL_TIM_ConfigClockSource+0x100>
 80036e6:	e1d5      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x4ac>
 80036e8:	d900      	bls.n	80036ec <HAL_TIM_ConfigClockSource+0x104>
 80036ea:	e23e      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x582>
 80036ec:	2b30      	cmp	r3, #48	@ 0x30
 80036ee:	d100      	bne.n	80036f2 <HAL_TIM_ConfigClockSource+0x10a>
 80036f0:	e21c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x544>
 80036f2:	d900      	bls.n	80036f6 <HAL_TIM_ConfigClockSource+0x10e>
 80036f4:	e239      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x582>
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d100      	bne.n	80036fc <HAL_TIM_ConfigClockSource+0x114>
 80036fa:	e217      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x544>
 80036fc:	d900      	bls.n	8003700 <HAL_TIM_ConfigClockSource+0x118>
 80036fe:	e234      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x582>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d100      	bne.n	8003706 <HAL_TIM_ConfigClockSource+0x11e>
 8003704:	e212      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x544>
 8003706:	2b10      	cmp	r3, #16
 8003708:	d100      	bne.n	800370c <HAL_TIM_ConfigClockSource+0x124>
 800370a:	e20f      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x544>
 800370c:	e22d      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x582>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a86      	ldr	r2, [pc, #536]	@ (800392c <HAL_TIM_ConfigClockSource+0x344>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d100      	bne.n	800371a <HAL_TIM_ConfigClockSource+0x132>
 8003718:	e22c      	b.n	8003b74 <HAL_TIM_ConfigClockSource+0x58c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	2380      	movs	r3, #128	@ 0x80
 8003720:	05db      	lsls	r3, r3, #23
 8003722:	429a      	cmp	r2, r3
 8003724:	d100      	bne.n	8003728 <HAL_TIM_ConfigClockSource+0x140>
 8003726:	e225      	b.n	8003b74 <HAL_TIM_ConfigClockSource+0x58c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a80      	ldr	r2, [pc, #512]	@ (8003930 <HAL_TIM_ConfigClockSource+0x348>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d100      	bne.n	8003734 <HAL_TIM_ConfigClockSource+0x14c>
 8003732:	e21f      	b.n	8003b74 <HAL_TIM_ConfigClockSource+0x58c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7e      	ldr	r2, [pc, #504]	@ (8003934 <HAL_TIM_ConfigClockSource+0x34c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d100      	bne.n	8003740 <HAL_TIM_ConfigClockSource+0x158>
 800373e:	e219      	b.n	8003b74 <HAL_TIM_ConfigClockSource+0x58c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a7c      	ldr	r2, [pc, #496]	@ (8003938 <HAL_TIM_ConfigClockSource+0x350>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d100      	bne.n	800374c <HAL_TIM_ConfigClockSource+0x164>
 800374a:	e213      	b.n	8003b74 <HAL_TIM_ConfigClockSource+0x58c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7a      	ldr	r2, [pc, #488]	@ (800393c <HAL_TIM_ConfigClockSource+0x354>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d100      	bne.n	8003758 <HAL_TIM_ConfigClockSource+0x170>
 8003756:	e20d      	b.n	8003b74 <HAL_TIM_ConfigClockSource+0x58c>
 8003758:	4a79      	ldr	r2, [pc, #484]	@ (8003940 <HAL_TIM_ConfigClockSource+0x358>)
 800375a:	4b71      	ldr	r3, [pc, #452]	@ (8003920 <HAL_TIM_ConfigClockSource+0x338>)
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f7fc ff71 	bl	8000646 <assert_failed>
      break;
 8003764:	e206      	b.n	8003b74 <HAL_TIM_ConfigClockSource+0x58c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a70      	ldr	r2, [pc, #448]	@ (800392c <HAL_TIM_ConfigClockSource+0x344>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d010      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x1aa>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	2380      	movs	r3, #128	@ 0x80
 8003776:	05db      	lsls	r3, r3, #23
 8003778:	429a      	cmp	r2, r3
 800377a:	d00a      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x1aa>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a6b      	ldr	r2, [pc, #428]	@ (8003930 <HAL_TIM_ConfigClockSource+0x348>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d005      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x1aa>
 8003786:	4a6f      	ldr	r2, [pc, #444]	@ (8003944 <HAL_TIM_ConfigClockSource+0x35c>)
 8003788:	4b65      	ldr	r3, [pc, #404]	@ (8003920 <HAL_TIM_ConfigClockSource+0x338>)
 800378a:	0011      	movs	r1, r2
 800378c:	0018      	movs	r0, r3
 800378e:	f7fc ff5a 	bl	8000646 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0x1e2>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	015b      	lsls	r3, r3, #5
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d011      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0x1e2>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	2380      	movs	r3, #128	@ 0x80
 80037ac:	019b      	lsls	r3, r3, #6
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d00b      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0x1e2>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	23c0      	movs	r3, #192	@ 0xc0
 80037b8:	019b      	lsls	r3, r3, #6
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d005      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0x1e2>
 80037be:	4a62      	ldr	r2, [pc, #392]	@ (8003948 <HAL_TIM_ConfigClockSource+0x360>)
 80037c0:	4b57      	ldr	r3, [pc, #348]	@ (8003920 <HAL_TIM_ConfigClockSource+0x338>)
 80037c2:	0011      	movs	r1, r2
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7fc ff3e 	bl	8000646 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	2380      	movs	r3, #128	@ 0x80
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d015      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x21a>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x21a>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x21a>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d009      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x21a>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b0a      	cmp	r3, #10
 80037f4:	d005      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x21a>
 80037f6:	4a55      	ldr	r2, [pc, #340]	@ (800394c <HAL_TIM_ConfigClockSource+0x364>)
 80037f8:	4b49      	ldr	r3, [pc, #292]	@ (8003920 <HAL_TIM_ConfigClockSource+0x338>)
 80037fa:	0011      	movs	r1, r2
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7fc ff22 	bl	8000646 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	d905      	bls.n	8003816 <HAL_TIM_ConfigClockSource+0x22e>
 800380a:	4a51      	ldr	r2, [pc, #324]	@ (8003950 <HAL_TIM_ConfigClockSource+0x368>)
 800380c:	4b44      	ldr	r3, [pc, #272]	@ (8003920 <HAL_TIM_ConfigClockSource+0x338>)
 800380e:	0011      	movs	r1, r2
 8003810:	0018      	movs	r0, r3
 8003812:	f7fc ff18 	bl	8000646 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003826:	f000 ff0d 	bl	8004644 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2277      	movs	r2, #119	@ 0x77
 8003836:	4313      	orrs	r3, r2
 8003838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	609a      	str	r2, [r3, #8]
      break;
 8003842:	e198      	b.n	8003b76 <HAL_TIM_ConfigClockSource+0x58e>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a38      	ldr	r2, [pc, #224]	@ (800392c <HAL_TIM_ConfigClockSource+0x344>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d010      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0x288>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	05db      	lsls	r3, r3, #23
 8003856:	429a      	cmp	r2, r3
 8003858:	d00a      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0x288>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a34      	ldr	r2, [pc, #208]	@ (8003930 <HAL_TIM_ConfigClockSource+0x348>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d005      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0x288>
 8003864:	4a3b      	ldr	r2, [pc, #236]	@ (8003954 <HAL_TIM_ConfigClockSource+0x36c>)
 8003866:	4b2e      	ldr	r3, [pc, #184]	@ (8003920 <HAL_TIM_ConfigClockSource+0x338>)
 8003868:	0011      	movs	r1, r2
 800386a:	0018      	movs	r0, r3
 800386c:	f7fc feeb 	bl	8000646 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0x2c0>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	015b      	lsls	r3, r3, #5
 8003880:	429a      	cmp	r2, r3
 8003882:	d011      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0x2c0>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	019b      	lsls	r3, r3, #6
 800388c:	429a      	cmp	r2, r3
 800388e:	d00b      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0x2c0>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	23c0      	movs	r3, #192	@ 0xc0
 8003896:	019b      	lsls	r3, r3, #6
 8003898:	429a      	cmp	r2, r3
 800389a:	d005      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0x2c0>
 800389c:	4a2e      	ldr	r2, [pc, #184]	@ (8003958 <HAL_TIM_ConfigClockSource+0x370>)
 800389e:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <HAL_TIM_ConfigClockSource+0x338>)
 80038a0:	0011      	movs	r1, r2
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7fc fecf 	bl	8000646 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	2380      	movs	r3, #128	@ 0x80
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d015      	beq.n	80038e0 <HAL_TIM_ConfigClockSource+0x2f8>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d011      	beq.n	80038e0 <HAL_TIM_ConfigClockSource+0x2f8>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <HAL_TIM_ConfigClockSource+0x2f8>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d009      	beq.n	80038e0 <HAL_TIM_ConfigClockSource+0x2f8>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b0a      	cmp	r3, #10
 80038d2:	d005      	beq.n	80038e0 <HAL_TIM_ConfigClockSource+0x2f8>
 80038d4:	4a21      	ldr	r2, [pc, #132]	@ (800395c <HAL_TIM_ConfigClockSource+0x374>)
 80038d6:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_TIM_ConfigClockSource+0x338>)
 80038d8:	0011      	movs	r1, r2
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fc feb3 	bl	8000646 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b0f      	cmp	r3, #15
 80038e6:	d905      	bls.n	80038f4 <HAL_TIM_ConfigClockSource+0x30c>
 80038e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003960 <HAL_TIM_ConfigClockSource+0x378>)
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <HAL_TIM_ConfigClockSource+0x338>)
 80038ec:	0011      	movs	r1, r2
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7fc fea9 	bl	8000646 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003904:	f000 fe9e 	bl	8004644 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2180      	movs	r1, #128	@ 0x80
 8003914:	01c9      	lsls	r1, r1, #7
 8003916:	430a      	orrs	r2, r1
 8003918:	609a      	str	r2, [r3, #8]
      break;
 800391a:	e12c      	b.n	8003b76 <HAL_TIM_ConfigClockSource+0x58e>
 800391c:	00001573 	.word	0x00001573
 8003920:	08004b40 	.word	0x08004b40
 8003924:	ffceff88 	.word	0xffceff88
 8003928:	ffff00ff 	.word	0xffff00ff
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40000400 	.word	0x40000400
 8003934:	40002000 	.word	0x40002000
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800
 8003940:	0000157f 	.word	0x0000157f
 8003944:	00001586 	.word	0x00001586
 8003948:	00001589 	.word	0x00001589
 800394c:	0000158a 	.word	0x0000158a
 8003950:	0000158b 	.word	0x0000158b
 8003954:	0000159e 	.word	0x0000159e
 8003958:	000015a1 	.word	0x000015a1
 800395c:	000015a2 	.word	0x000015a2
 8003960:	000015a3 	.word	0x000015a3
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a8a      	ldr	r2, [pc, #552]	@ (8003b94 <HAL_TIM_ConfigClockSource+0x5ac>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d010      	beq.n	8003990 <HAL_TIM_ConfigClockSource+0x3a8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	2380      	movs	r3, #128	@ 0x80
 8003974:	05db      	lsls	r3, r3, #23
 8003976:	429a      	cmp	r2, r3
 8003978:	d00a      	beq.n	8003990 <HAL_TIM_ConfigClockSource+0x3a8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a86      	ldr	r2, [pc, #536]	@ (8003b98 <HAL_TIM_ConfigClockSource+0x5b0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d005      	beq.n	8003990 <HAL_TIM_ConfigClockSource+0x3a8>
 8003984:	4a85      	ldr	r2, [pc, #532]	@ (8003b9c <HAL_TIM_ConfigClockSource+0x5b4>)
 8003986:	4b86      	ldr	r3, [pc, #536]	@ (8003ba0 <HAL_TIM_ConfigClockSource+0x5b8>)
 8003988:	0011      	movs	r1, r2
 800398a:	0018      	movs	r0, r3
 800398c:	f7fc fe5b 	bl	8000646 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	2380      	movs	r3, #128	@ 0x80
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	429a      	cmp	r2, r3
 800399a:	d015      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x3e0>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d011      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x3e0>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00d      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x3e0>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d009      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x3e0>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b0a      	cmp	r3, #10
 80039ba:	d005      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x3e0>
 80039bc:	4a79      	ldr	r2, [pc, #484]	@ (8003ba4 <HAL_TIM_ConfigClockSource+0x5bc>)
 80039be:	4b78      	ldr	r3, [pc, #480]	@ (8003ba0 <HAL_TIM_ConfigClockSource+0x5b8>)
 80039c0:	0011      	movs	r1, r2
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fc fe3f 	bl	8000646 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b0f      	cmp	r3, #15
 80039ce:	d905      	bls.n	80039dc <HAL_TIM_ConfigClockSource+0x3f4>
 80039d0:	4a75      	ldr	r2, [pc, #468]	@ (8003ba8 <HAL_TIM_ConfigClockSource+0x5c0>)
 80039d2:	4b73      	ldr	r3, [pc, #460]	@ (8003ba0 <HAL_TIM_ConfigClockSource+0x5b8>)
 80039d4:	0011      	movs	r1, r2
 80039d6:	0018      	movs	r0, r3
 80039d8:	f7fc fe35 	bl	8000646 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e8:	001a      	movs	r2, r3
 80039ea:	f000 fdaf 	bl	800454c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2150      	movs	r1, #80	@ 0x50
 80039f4:	0018      	movs	r0, r3
 80039f6:	f000 fe09 	bl	800460c <TIM_ITRx_SetConfig>
      break;
 80039fa:	e0bc      	b.n	8003b76 <HAL_TIM_ConfigClockSource+0x58e>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a64      	ldr	r2, [pc, #400]	@ (8003b94 <HAL_TIM_ConfigClockSource+0x5ac>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d010      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x440>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	2380      	movs	r3, #128	@ 0x80
 8003a0c:	05db      	lsls	r3, r3, #23
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d00a      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x440>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a60      	ldr	r2, [pc, #384]	@ (8003b98 <HAL_TIM_ConfigClockSource+0x5b0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d005      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x440>
 8003a1c:	4a63      	ldr	r2, [pc, #396]	@ (8003bac <HAL_TIM_ConfigClockSource+0x5c4>)
 8003a1e:	4b60      	ldr	r3, [pc, #384]	@ (8003ba0 <HAL_TIM_ConfigClockSource+0x5b8>)
 8003a20:	0011      	movs	r1, r2
 8003a22:	0018      	movs	r0, r3
 8003a24:	f7fc fe0f 	bl	8000646 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	2380      	movs	r3, #128	@ 0x80
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d015      	beq.n	8003a60 <HAL_TIM_ConfigClockSource+0x478>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d011      	beq.n	8003a60 <HAL_TIM_ConfigClockSource+0x478>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <HAL_TIM_ConfigClockSource+0x478>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d009      	beq.n	8003a60 <HAL_TIM_ConfigClockSource+0x478>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b0a      	cmp	r3, #10
 8003a52:	d005      	beq.n	8003a60 <HAL_TIM_ConfigClockSource+0x478>
 8003a54:	4a56      	ldr	r2, [pc, #344]	@ (8003bb0 <HAL_TIM_ConfigClockSource+0x5c8>)
 8003a56:	4b52      	ldr	r3, [pc, #328]	@ (8003ba0 <HAL_TIM_ConfigClockSource+0x5b8>)
 8003a58:	0011      	movs	r1, r2
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7fc fdf3 	bl	8000646 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b0f      	cmp	r3, #15
 8003a66:	d905      	bls.n	8003a74 <HAL_TIM_ConfigClockSource+0x48c>
 8003a68:	4a52      	ldr	r2, [pc, #328]	@ (8003bb4 <HAL_TIM_ConfigClockSource+0x5cc>)
 8003a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba0 <HAL_TIM_ConfigClockSource+0x5b8>)
 8003a6c:	0011      	movs	r1, r2
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7fc fde9 	bl	8000646 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a80:	001a      	movs	r2, r3
 8003a82:	f000 fd91 	bl	80045a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2160      	movs	r1, #96	@ 0x60
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 fdbd 	bl	800460c <TIM_ITRx_SetConfig>
      break;
 8003a92:	e070      	b.n	8003b76 <HAL_TIM_ConfigClockSource+0x58e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a3e      	ldr	r2, [pc, #248]	@ (8003b94 <HAL_TIM_ConfigClockSource+0x5ac>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d010      	beq.n	8003ac0 <HAL_TIM_ConfigClockSource+0x4d8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	2380      	movs	r3, #128	@ 0x80
 8003aa4:	05db      	lsls	r3, r3, #23
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_TIM_ConfigClockSource+0x4d8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a3a      	ldr	r2, [pc, #232]	@ (8003b98 <HAL_TIM_ConfigClockSource+0x5b0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d005      	beq.n	8003ac0 <HAL_TIM_ConfigClockSource+0x4d8>
 8003ab4:	4a40      	ldr	r2, [pc, #256]	@ (8003bb8 <HAL_TIM_ConfigClockSource+0x5d0>)
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba0 <HAL_TIM_ConfigClockSource+0x5b8>)
 8003ab8:	0011      	movs	r1, r2
 8003aba:	0018      	movs	r0, r3
 8003abc:	f7fc fdc3 	bl	8000646 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d015      	beq.n	8003af8 <HAL_TIM_ConfigClockSource+0x510>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d011      	beq.n	8003af8 <HAL_TIM_ConfigClockSource+0x510>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00d      	beq.n	8003af8 <HAL_TIM_ConfigClockSource+0x510>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d009      	beq.n	8003af8 <HAL_TIM_ConfigClockSource+0x510>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b0a      	cmp	r3, #10
 8003aea:	d005      	beq.n	8003af8 <HAL_TIM_ConfigClockSource+0x510>
 8003aec:	4a33      	ldr	r2, [pc, #204]	@ (8003bbc <HAL_TIM_ConfigClockSource+0x5d4>)
 8003aee:	4b2c      	ldr	r3, [pc, #176]	@ (8003ba0 <HAL_TIM_ConfigClockSource+0x5b8>)
 8003af0:	0011      	movs	r1, r2
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7fc fda7 	bl	8000646 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b0f      	cmp	r3, #15
 8003afe:	d905      	bls.n	8003b0c <HAL_TIM_ConfigClockSource+0x524>
 8003b00:	4a2f      	ldr	r2, [pc, #188]	@ (8003bc0 <HAL_TIM_ConfigClockSource+0x5d8>)
 8003b02:	4b27      	ldr	r3, [pc, #156]	@ (8003ba0 <HAL_TIM_ConfigClockSource+0x5b8>)
 8003b04:	0011      	movs	r1, r2
 8003b06:	0018      	movs	r0, r3
 8003b08:	f7fc fd9d 	bl	8000646 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b18:	001a      	movs	r2, r3
 8003b1a:	f000 fd17 	bl	800454c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2140      	movs	r1, #64	@ 0x40
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fd71 	bl	800460c <TIM_ITRx_SetConfig>
      break;
 8003b2a:	e024      	b.n	8003b76 <HAL_TIM_ConfigClockSource+0x58e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a18      	ldr	r2, [pc, #96]	@ (8003b94 <HAL_TIM_ConfigClockSource+0x5ac>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d010      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0x570>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	05db      	lsls	r3, r3, #23
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d00a      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0x570>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a14      	ldr	r2, [pc, #80]	@ (8003b98 <HAL_TIM_ConfigClockSource+0x5b0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d005      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0x570>
 8003b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <HAL_TIM_ConfigClockSource+0x5dc>)
 8003b4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ba0 <HAL_TIM_ConfigClockSource+0x5b8>)
 8003b50:	0011      	movs	r1, r2
 8003b52:	0018      	movs	r0, r3
 8003b54:	f7fc fd77 	bl	8000646 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0019      	movs	r1, r3
 8003b62:	0010      	movs	r0, r2
 8003b64:	f000 fd52 	bl	800460c <TIM_ITRx_SetConfig>
      break;
 8003b68:	e005      	b.n	8003b76 <HAL_TIM_ConfigClockSource+0x58e>
    }

    default:
      status = HAL_ERROR;
 8003b6a:	230f      	movs	r3, #15
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
      break;
 8003b72:	e000      	b.n	8003b76 <HAL_TIM_ConfigClockSource+0x58e>
      break;
 8003b74:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	223d      	movs	r2, #61	@ 0x3d
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	223c      	movs	r2, #60	@ 0x3c
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

  return status;
 8003b86:	230f      	movs	r3, #15
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	781b      	ldrb	r3, [r3, #0]
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b004      	add	sp, #16
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	000015b2 	.word	0x000015b2
 8003ba0:	08004b40 	.word	0x08004b40
 8003ba4:	000015b5 	.word	0x000015b5
 8003ba8:	000015b6 	.word	0x000015b6
 8003bac:	000015c2 	.word	0x000015c2
 8003bb0:	000015c5 	.word	0x000015c5
 8003bb4:	000015c6 	.word	0x000015c6
 8003bb8:	000015d2 	.word	0x000015d2
 8003bbc:	000015d5 	.word	0x000015d5
 8003bc0:	000015d6 	.word	0x000015d6
 8003bc4:	000015e5 	.word	0x000015e5

08003bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bd0:	46c0      	nop			@ (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003be0:	46c0      	nop			@ (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d107      	bne.n	8003c20 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	223e      	movs	r2, #62	@ 0x3e
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	5499      	strb	r1, [r3, r2]
 8003c1e:	e02a      	b.n	8003c76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d107      	bne.n	8003c3a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	223f      	movs	r2, #63	@ 0x3f
 8003c34:	2101      	movs	r1, #1
 8003c36:	5499      	strb	r1, [r3, r2]
 8003c38:	e01d      	b.n	8003c76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2204      	movs	r2, #4
 8003c48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2240      	movs	r2, #64	@ 0x40
 8003c4e:	2101      	movs	r1, #1
 8003c50:	5499      	strb	r1, [r3, r2]
 8003c52:	e010      	b.n	8003c76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d107      	bne.n	8003c6e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2208      	movs	r2, #8
 8003c62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2241      	movs	r2, #65	@ 0x41
 8003c68:	2101      	movs	r1, #1
 8003c6a:	5499      	strb	r1, [r3, r2]
 8003c6c:	e003      	b.n	8003c76 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	223d      	movs	r2, #61	@ 0x3d
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff ffb5 	bl	8003be8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	771a      	strb	r2, [r3, #28]
}
 8003c84:	46c0      	nop			@ (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b004      	add	sp, #16
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d10b      	bne.n	8003cbc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d136      	bne.n	8003d20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	223e      	movs	r2, #62	@ 0x3e
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	5499      	strb	r1, [r3, r2]
 8003cba:	e031      	b.n	8003d20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10b      	bne.n	8003cde <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d125      	bne.n	8003d20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	223f      	movs	r2, #63	@ 0x3f
 8003cd8:	2101      	movs	r1, #1
 8003cda:	5499      	strb	r1, [r3, r2]
 8003cdc:	e020      	b.n	8003d20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d10b      	bne.n	8003d00 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2204      	movs	r2, #4
 8003cec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d114      	bne.n	8003d20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2240      	movs	r2, #64	@ 0x40
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]
 8003cfe:	e00f      	b.n	8003d20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d10a      	bne.n	8003d20 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d103      	bne.n	8003d20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2241      	movs	r2, #65	@ 0x41
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7ff ff50 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	771a      	strb	r2, [r3, #28]
}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b004      	add	sp, #16
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d103      	bne.n	8003d56 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	771a      	strb	r2, [r3, #28]
 8003d54:	e019      	b.n	8003d8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d103      	bne.n	8003d68 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2202      	movs	r2, #2
 8003d64:	771a      	strb	r2, [r3, #28]
 8003d66:	e010      	b.n	8003d8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d103      	bne.n	8003d7a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2204      	movs	r2, #4
 8003d76:	771a      	strb	r2, [r3, #28]
 8003d78:	e007      	b.n	8003d8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d102      	bne.n	8003d8a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2208      	movs	r2, #8
 8003d88:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f7ff ff23 	bl	8003bd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	771a      	strb	r2, [r3, #28]
}
 8003d98:	46c0      	nop			@ (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b004      	add	sp, #16
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a37      	ldr	r2, [pc, #220]	@ (8003e90 <TIM_Base_SetConfig+0xf0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d008      	beq.n	8003dca <TIM_Base_SetConfig+0x2a>
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	2380      	movs	r3, #128	@ 0x80
 8003dbc:	05db      	lsls	r3, r3, #23
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d003      	beq.n	8003dca <TIM_Base_SetConfig+0x2a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a33      	ldr	r2, [pc, #204]	@ (8003e94 <TIM_Base_SetConfig+0xf4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d108      	bne.n	8003ddc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2270      	movs	r2, #112	@ 0x70
 8003dce:	4393      	bics	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a2c      	ldr	r2, [pc, #176]	@ (8003e90 <TIM_Base_SetConfig+0xf0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d014      	beq.n	8003e0e <TIM_Base_SetConfig+0x6e>
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	2380      	movs	r3, #128	@ 0x80
 8003de8:	05db      	lsls	r3, r3, #23
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d00f      	beq.n	8003e0e <TIM_Base_SetConfig+0x6e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a28      	ldr	r2, [pc, #160]	@ (8003e94 <TIM_Base_SetConfig+0xf4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_Base_SetConfig+0x6e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a27      	ldr	r2, [pc, #156]	@ (8003e98 <TIM_Base_SetConfig+0xf8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_Base_SetConfig+0x6e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a26      	ldr	r2, [pc, #152]	@ (8003e9c <TIM_Base_SetConfig+0xfc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_Base_SetConfig+0x6e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a25      	ldr	r2, [pc, #148]	@ (8003ea0 <TIM_Base_SetConfig+0x100>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d108      	bne.n	8003e20 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a24      	ldr	r2, [pc, #144]	@ (8003ea4 <TIM_Base_SetConfig+0x104>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2280      	movs	r2, #128	@ 0x80
 8003e24:	4393      	bics	r3, r2
 8003e26:	001a      	movs	r2, r3
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a11      	ldr	r2, [pc, #68]	@ (8003e90 <TIM_Base_SetConfig+0xf0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_Base_SetConfig+0xbe>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a12      	ldr	r2, [pc, #72]	@ (8003e9c <TIM_Base_SetConfig+0xfc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_Base_SetConfig+0xbe>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a11      	ldr	r2, [pc, #68]	@ (8003ea0 <TIM_Base_SetConfig+0x100>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d103      	bne.n	8003e66 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2201      	movs	r2, #1
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d106      	bne.n	8003e86 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4393      	bics	r3, r2
 8003e80:	001a      	movs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	611a      	str	r2, [r3, #16]
  }
}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b004      	add	sp, #16
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40002000 	.word	0x40002000
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800
 8003ea4:	fffffcff 	.word	0xfffffcff

08003ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4393      	bics	r3, r2
 8003ec0:	001a      	movs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a45      	ldr	r2, [pc, #276]	@ (8003fec <TIM_OC1_SetConfig+0x144>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2203      	movs	r2, #3
 8003ede:	4393      	bics	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	4393      	bics	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a3b      	ldr	r2, [pc, #236]	@ (8003ff0 <TIM_OC1_SetConfig+0x148>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_OC1_SetConfig+0x6e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a3a      	ldr	r2, [pc, #232]	@ (8003ff4 <TIM_OC1_SetConfig+0x14c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_OC1_SetConfig+0x6e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a39      	ldr	r2, [pc, #228]	@ (8003ff8 <TIM_OC1_SetConfig+0x150>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d11a      	bne.n	8003f4c <TIM_OC1_SetConfig+0xa4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <TIM_OC1_SetConfig+0x8a>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d005      	beq.n	8003f32 <TIM_OC1_SetConfig+0x8a>
 8003f26:	4a35      	ldr	r2, [pc, #212]	@ (8003ffc <TIM_OC1_SetConfig+0x154>)
 8003f28:	4b35      	ldr	r3, [pc, #212]	@ (8004000 <TIM_OC1_SetConfig+0x158>)
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7fc fb8a 	bl	8000646 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2208      	movs	r2, #8
 8003f36:	4393      	bics	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2204      	movs	r2, #4
 8003f48:	4393      	bics	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a28      	ldr	r2, [pc, #160]	@ (8003ff0 <TIM_OC1_SetConfig+0x148>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <TIM_OC1_SetConfig+0xbc>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a27      	ldr	r2, [pc, #156]	@ (8003ff4 <TIM_OC1_SetConfig+0x14c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC1_SetConfig+0xbc>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a26      	ldr	r2, [pc, #152]	@ (8003ff8 <TIM_OC1_SetConfig+0x150>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d131      	bne.n	8003fc8 <TIM_OC1_SetConfig+0x120>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	2380      	movs	r3, #128	@ 0x80
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d009      	beq.n	8003f84 <TIM_OC1_SetConfig+0xdc>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <TIM_OC1_SetConfig+0xdc>
 8003f78:	4a22      	ldr	r2, [pc, #136]	@ (8004004 <TIM_OC1_SetConfig+0x15c>)
 8003f7a:	4b21      	ldr	r3, [pc, #132]	@ (8004000 <TIM_OC1_SetConfig+0x158>)
 8003f7c:	0011      	movs	r1, r2
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7fc fb61 	bl	8000646 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	2380      	movs	r3, #128	@ 0x80
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d009      	beq.n	8003fa4 <TIM_OC1_SetConfig+0xfc>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <TIM_OC1_SetConfig+0xfc>
 8003f98:	4a1b      	ldr	r2, [pc, #108]	@ (8004008 <TIM_OC1_SetConfig+0x160>)
 8003f9a:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <TIM_OC1_SetConfig+0x158>)
 8003f9c:	0011      	movs	r1, r2
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f7fc fb51 	bl	8000646 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4a19      	ldr	r2, [pc, #100]	@ (800400c <TIM_OC1_SetConfig+0x164>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4a18      	ldr	r2, [pc, #96]	@ (8004010 <TIM_OC1_SetConfig+0x168>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b006      	add	sp, #24
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	fffeff8f 	.word	0xfffeff8f
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800
 8003ffc:	00001b8b 	.word	0x00001b8b
 8004000:	08004b40 	.word	0x08004b40
 8004004:	00001b98 	.word	0x00001b98
 8004008:	00001b99 	.word	0x00001b99
 800400c:	fffffeff 	.word	0xfffffeff
 8004010:	fffffdff 	.word	0xfffffdff

08004014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	2210      	movs	r2, #16
 800402a:	4393      	bics	r3, r2
 800402c:	001a      	movs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a43      	ldr	r2, [pc, #268]	@ (8004150 <TIM_OC2_SetConfig+0x13c>)
 8004042:	4013      	ands	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4a42      	ldr	r2, [pc, #264]	@ (8004154 <TIM_OC2_SetConfig+0x140>)
 800404a:	4013      	ands	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2220      	movs	r2, #32
 800405e:	4393      	bics	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a39      	ldr	r2, [pc, #228]	@ (8004158 <TIM_OC2_SetConfig+0x144>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d11b      	bne.n	80040ae <TIM_OC2_SetConfig+0x9a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <TIM_OC2_SetConfig+0x7e>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b08      	cmp	r3, #8
 8004084:	d005      	beq.n	8004092 <TIM_OC2_SetConfig+0x7e>
 8004086:	4a35      	ldr	r2, [pc, #212]	@ (800415c <TIM_OC2_SetConfig+0x148>)
 8004088:	4b35      	ldr	r3, [pc, #212]	@ (8004160 <TIM_OC2_SetConfig+0x14c>)
 800408a:	0011      	movs	r1, r2
 800408c:	0018      	movs	r0, r3
 800408e:	f7fc fada 	bl	8000646 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2280      	movs	r2, #128	@ 0x80
 8004096:	4393      	bics	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2240      	movs	r2, #64	@ 0x40
 80040aa:	4393      	bics	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a29      	ldr	r2, [pc, #164]	@ (8004158 <TIM_OC2_SetConfig+0x144>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d007      	beq.n	80040c6 <TIM_OC2_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004164 <TIM_OC2_SetConfig+0x150>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d003      	beq.n	80040c6 <TIM_OC2_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a29      	ldr	r2, [pc, #164]	@ (8004168 <TIM_OC2_SetConfig+0x154>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d133      	bne.n	800412e <TIM_OC2_SetConfig+0x11a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d009      	beq.n	80040e6 <TIM_OC2_SetConfig+0xd2>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <TIM_OC2_SetConfig+0xd2>
 80040da:	4a24      	ldr	r2, [pc, #144]	@ (800416c <TIM_OC2_SetConfig+0x158>)
 80040dc:	4b20      	ldr	r3, [pc, #128]	@ (8004160 <TIM_OC2_SetConfig+0x14c>)
 80040de:	0011      	movs	r1, r2
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fc fab0 	bl	8000646 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d009      	beq.n	8004106 <TIM_OC2_SetConfig+0xf2>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <TIM_OC2_SetConfig+0xf2>
 80040fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004170 <TIM_OC2_SetConfig+0x15c>)
 80040fc:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <TIM_OC2_SetConfig+0x14c>)
 80040fe:	0011      	movs	r1, r2
 8004100:	0018      	movs	r0, r3
 8004102:	f7fc faa0 	bl	8000646 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4a1a      	ldr	r2, [pc, #104]	@ (8004174 <TIM_OC2_SetConfig+0x160>)
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4a19      	ldr	r2, [pc, #100]	@ (8004178 <TIM_OC2_SetConfig+0x164>)
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	46c0      	nop			@ (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b006      	add	sp, #24
 800414e:	bd80      	pop	{r7, pc}
 8004150:	feff8fff 	.word	0xfeff8fff
 8004154:	fffffcff 	.word	0xfffffcff
 8004158:	40012c00 	.word	0x40012c00
 800415c:	00001bd7 	.word	0x00001bd7
 8004160:	08004b40 	.word	0x08004b40
 8004164:	40014400 	.word	0x40014400
 8004168:	40014800 	.word	0x40014800
 800416c:	00001be4 	.word	0x00001be4
 8004170:	00001be5 	.word	0x00001be5
 8004174:	fffffbff 	.word	0xfffffbff
 8004178:	fffff7ff 	.word	0xfffff7ff

0800417c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	4a48      	ldr	r2, [pc, #288]	@ (80042b4 <TIM_OC3_SetConfig+0x138>)
 8004192:	401a      	ands	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a44      	ldr	r2, [pc, #272]	@ (80042b8 <TIM_OC3_SetConfig+0x13c>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2203      	movs	r2, #3
 80041b0:	4393      	bics	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	4a3e      	ldr	r2, [pc, #248]	@ (80042bc <TIM_OC3_SetConfig+0x140>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a3a      	ldr	r2, [pc, #232]	@ (80042c0 <TIM_OC3_SetConfig+0x144>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d11b      	bne.n	8004212 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <TIM_OC3_SetConfig+0x7a>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d005      	beq.n	80041f6 <TIM_OC3_SetConfig+0x7a>
 80041ea:	4a36      	ldr	r2, [pc, #216]	@ (80042c4 <TIM_OC3_SetConfig+0x148>)
 80041ec:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <TIM_OC3_SetConfig+0x14c>)
 80041ee:	0011      	movs	r1, r2
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7fc fa28 	bl	8000646 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4a34      	ldr	r2, [pc, #208]	@ (80042cc <TIM_OC3_SetConfig+0x150>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	4a30      	ldr	r2, [pc, #192]	@ (80042d0 <TIM_OC3_SetConfig+0x154>)
 800420e:	4013      	ands	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2a      	ldr	r2, [pc, #168]	@ (80042c0 <TIM_OC3_SetConfig+0x144>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <TIM_OC3_SetConfig+0xae>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2d      	ldr	r2, [pc, #180]	@ (80042d4 <TIM_OC3_SetConfig+0x158>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_OC3_SetConfig+0xae>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2c      	ldr	r2, [pc, #176]	@ (80042d8 <TIM_OC3_SetConfig+0x15c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d133      	bne.n	8004292 <TIM_OC3_SetConfig+0x116>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	2380      	movs	r3, #128	@ 0x80
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	429a      	cmp	r2, r3
 8004234:	d009      	beq.n	800424a <TIM_OC3_SetConfig+0xce>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <TIM_OC3_SetConfig+0xce>
 800423e:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <TIM_OC3_SetConfig+0x160>)
 8004240:	4b21      	ldr	r3, [pc, #132]	@ (80042c8 <TIM_OC3_SetConfig+0x14c>)
 8004242:	0011      	movs	r1, r2
 8004244:	0018      	movs	r0, r3
 8004246:	f7fc f9fe 	bl	8000646 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	2380      	movs	r3, #128	@ 0x80
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	429a      	cmp	r2, r3
 8004254:	d009      	beq.n	800426a <TIM_OC3_SetConfig+0xee>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <TIM_OC3_SetConfig+0xee>
 800425e:	4a20      	ldr	r2, [pc, #128]	@ (80042e0 <TIM_OC3_SetConfig+0x164>)
 8004260:	4b19      	ldr	r3, [pc, #100]	@ (80042c8 <TIM_OC3_SetConfig+0x14c>)
 8004262:	0011      	movs	r1, r2
 8004264:	0018      	movs	r0, r3
 8004266:	f7fc f9ee 	bl	8000646 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4a1d      	ldr	r2, [pc, #116]	@ (80042e4 <TIM_OC3_SetConfig+0x168>)
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4a1c      	ldr	r2, [pc, #112]	@ (80042e8 <TIM_OC3_SetConfig+0x16c>)
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	621a      	str	r2, [r3, #32]
}
 80042ac:	46c0      	nop			@ (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b006      	add	sp, #24
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	fffffeff 	.word	0xfffffeff
 80042b8:	fffeff8f 	.word	0xfffeff8f
 80042bc:	fffffdff 	.word	0xfffffdff
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	00001c22 	.word	0x00001c22
 80042c8:	08004b40 	.word	0x08004b40
 80042cc:	fffff7ff 	.word	0xfffff7ff
 80042d0:	fffffbff 	.word	0xfffffbff
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800
 80042dc:	00001c2f 	.word	0x00001c2f
 80042e0:	00001c30 	.word	0x00001c30
 80042e4:	ffffefff 	.word	0xffffefff
 80042e8:	ffffdfff 	.word	0xffffdfff

080042ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	4a2c      	ldr	r2, [pc, #176]	@ (80043b4 <TIM_OC4_SetConfig+0xc8>)
 8004302:	401a      	ands	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a28      	ldr	r2, [pc, #160]	@ (80043b8 <TIM_OC4_SetConfig+0xcc>)
 8004318:	4013      	ands	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a27      	ldr	r2, [pc, #156]	@ (80043bc <TIM_OC4_SetConfig+0xd0>)
 8004320:	4013      	ands	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4a23      	ldr	r2, [pc, #140]	@ (80043c0 <TIM_OC4_SetConfig+0xd4>)
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	031b      	lsls	r3, r3, #12
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a1f      	ldr	r2, [pc, #124]	@ (80043c4 <TIM_OC4_SetConfig+0xd8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d007      	beq.n	800435c <TIM_OC4_SetConfig+0x70>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a1e      	ldr	r2, [pc, #120]	@ (80043c8 <TIM_OC4_SetConfig+0xdc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_OC4_SetConfig+0x70>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a1d      	ldr	r2, [pc, #116]	@ (80043cc <TIM_OC4_SetConfig+0xe0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d119      	bne.n	8004390 <TIM_OC4_SetConfig+0xa4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	2380      	movs	r3, #128	@ 0x80
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	429a      	cmp	r2, r3
 8004366:	d009      	beq.n	800437c <TIM_OC4_SetConfig+0x90>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <TIM_OC4_SetConfig+0x90>
 8004370:	4a17      	ldr	r2, [pc, #92]	@ (80043d0 <TIM_OC4_SetConfig+0xe4>)
 8004372:	4b18      	ldr	r3, [pc, #96]	@ (80043d4 <TIM_OC4_SetConfig+0xe8>)
 8004374:	0011      	movs	r1, r2
 8004376:	0018      	movs	r0, r3
 8004378:	f7fc f965 	bl	8000646 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	4a16      	ldr	r2, [pc, #88]	@ (80043d8 <TIM_OC4_SetConfig+0xec>)
 8004380:	4013      	ands	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	019b      	lsls	r3, r3, #6
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	46c0      	nop			@ (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b006      	add	sp, #24
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	ffffefff 	.word	0xffffefff
 80043b8:	feff8fff 	.word	0xfeff8fff
 80043bc:	fffffcff 	.word	0xfffffcff
 80043c0:	ffffdfff 	.word	0xffffdfff
 80043c4:	40012c00 	.word	0x40012c00
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40014800 	.word	0x40014800
 80043d0:	00001c6f 	.word	0x00001c6f
 80043d4:	08004b40 	.word	0x08004b40
 80043d8:	ffffbfff 	.word	0xffffbfff

080043dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	4a21      	ldr	r2, [pc, #132]	@ (8004478 <TIM_OC5_SetConfig+0x9c>)
 80043f2:	401a      	ands	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a1d      	ldr	r2, [pc, #116]	@ (800447c <TIM_OC5_SetConfig+0xa0>)
 8004408:	4013      	ands	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4a19      	ldr	r2, [pc, #100]	@ (8004480 <TIM_OC5_SetConfig+0xa4>)
 800441a:	4013      	ands	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <TIM_OC5_SetConfig+0xa8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <TIM_OC5_SetConfig+0x66>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a14      	ldr	r2, [pc, #80]	@ (8004488 <TIM_OC5_SetConfig+0xac>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_OC5_SetConfig+0x66>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a13      	ldr	r2, [pc, #76]	@ (800448c <TIM_OC5_SetConfig+0xb0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d109      	bne.n	8004456 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	4a0c      	ldr	r2, [pc, #48]	@ (8004478 <TIM_OC5_SetConfig+0x9c>)
 8004446:	4013      	ands	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b006      	add	sp, #24
 8004476:	bd80      	pop	{r7, pc}
 8004478:	fffeffff 	.word	0xfffeffff
 800447c:	fffeff8f 	.word	0xfffeff8f
 8004480:	fffdffff 	.word	0xfffdffff
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800

08004490 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4a22      	ldr	r2, [pc, #136]	@ (8004530 <TIM_OC6_SetConfig+0xa0>)
 80044a6:	401a      	ands	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004534 <TIM_OC6_SetConfig+0xa4>)
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004538 <TIM_OC6_SetConfig+0xa8>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	051b      	lsls	r3, r3, #20
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a16      	ldr	r2, [pc, #88]	@ (800453c <TIM_OC6_SetConfig+0xac>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <TIM_OC6_SetConfig+0x68>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a15      	ldr	r2, [pc, #84]	@ (8004540 <TIM_OC6_SetConfig+0xb0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_OC6_SetConfig+0x68>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a14      	ldr	r2, [pc, #80]	@ (8004544 <TIM_OC6_SetConfig+0xb4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d109      	bne.n	800450c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	4a13      	ldr	r2, [pc, #76]	@ (8004548 <TIM_OC6_SetConfig+0xb8>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	029b      	lsls	r3, r3, #10
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b006      	add	sp, #24
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			@ (mov r8, r8)
 8004530:	ffefffff 	.word	0xffefffff
 8004534:	feff8fff 	.word	0xfeff8fff
 8004538:	ffdfffff 	.word	0xffdfffff
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40014400 	.word	0x40014400
 8004544:	40014800 	.word	0x40014800
 8004548:	fffbffff 	.word	0xfffbffff

0800454c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	2201      	movs	r2, #1
 8004564:	4393      	bics	r3, r2
 8004566:	001a      	movs	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	22f0      	movs	r2, #240	@ 0xf0
 8004576:	4393      	bics	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	220a      	movs	r2, #10
 8004588:	4393      	bics	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	46c0      	nop			@ (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b006      	add	sp, #24
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	2210      	movs	r2, #16
 80045c0:	4393      	bics	r3, r2
 80045c2:	001a      	movs	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <TIM_TI2_ConfigInputStage+0x60>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	031b      	lsls	r3, r3, #12
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	22a0      	movs	r2, #160	@ 0xa0
 80045e4:	4393      	bics	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b006      	add	sp, #24
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	ffff0fff 	.word	0xffff0fff

0800460c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a08      	ldr	r2, [pc, #32]	@ (8004640 <TIM_ITRx_SetConfig+0x34>)
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	2207      	movs	r2, #7
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	609a      	str	r2, [r3, #8]
}
 8004636:	46c0      	nop			@ (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b004      	add	sp, #16
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	ffcfff8f 	.word	0xffcfff8f

08004644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	4a09      	ldr	r2, [pc, #36]	@ (8004680 <TIM_ETR_SetConfig+0x3c>)
 800465c:	4013      	ands	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	021a      	lsls	r2, r3, #8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	431a      	orrs	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4313      	orrs	r3, r2
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	609a      	str	r2, [r3, #8]
}
 8004678:	46c0      	nop			@ (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b006      	add	sp, #24
 800467e:	bd80      	pop	{r7, pc}
 8004680:	ffff00ff 	.word	0xffff00ff

08004684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a2b      	ldr	r2, [pc, #172]	@ (8004740 <TIM_CCxChannelCmd+0xbc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d01a      	beq.n	80046ce <TIM_CCxChannelCmd+0x4a>
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	2380      	movs	r3, #128	@ 0x80
 800469c:	05db      	lsls	r3, r3, #23
 800469e:	429a      	cmp	r2, r3
 80046a0:	d015      	beq.n	80046ce <TIM_CCxChannelCmd+0x4a>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a27      	ldr	r2, [pc, #156]	@ (8004744 <TIM_CCxChannelCmd+0xc0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d011      	beq.n	80046ce <TIM_CCxChannelCmd+0x4a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4a26      	ldr	r2, [pc, #152]	@ (8004748 <TIM_CCxChannelCmd+0xc4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00d      	beq.n	80046ce <TIM_CCxChannelCmd+0x4a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a25      	ldr	r2, [pc, #148]	@ (800474c <TIM_CCxChannelCmd+0xc8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <TIM_CCxChannelCmd+0x4a>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4a24      	ldr	r2, [pc, #144]	@ (8004750 <TIM_CCxChannelCmd+0xcc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d005      	beq.n	80046ce <TIM_CCxChannelCmd+0x4a>
 80046c2:	4a24      	ldr	r2, [pc, #144]	@ (8004754 <TIM_CCxChannelCmd+0xd0>)
 80046c4:	4b24      	ldr	r3, [pc, #144]	@ (8004758 <TIM_CCxChannelCmd+0xd4>)
 80046c6:	0011      	movs	r1, r2
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fb ffbc 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d017      	beq.n	8004704 <TIM_CCxChannelCmd+0x80>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d014      	beq.n	8004704 <TIM_CCxChannelCmd+0x80>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d011      	beq.n	8004704 <TIM_CCxChannelCmd+0x80>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d00e      	beq.n	8004704 <TIM_CCxChannelCmd+0x80>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d00b      	beq.n	8004704 <TIM_CCxChannelCmd+0x80>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b14      	cmp	r3, #20
 80046f0:	d008      	beq.n	8004704 <TIM_CCxChannelCmd+0x80>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b3c      	cmp	r3, #60	@ 0x3c
 80046f6:	d005      	beq.n	8004704 <TIM_CCxChannelCmd+0x80>
 80046f8:	4a18      	ldr	r2, [pc, #96]	@ (800475c <TIM_CCxChannelCmd+0xd8>)
 80046fa:	4b17      	ldr	r3, [pc, #92]	@ (8004758 <TIM_CCxChannelCmd+0xd4>)
 80046fc:	0011      	movs	r1, r2
 80046fe:	0018      	movs	r0, r3
 8004700:	f7fb ffa1 	bl	8000646 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	221f      	movs	r2, #31
 8004708:	4013      	ands	r3, r2
 800470a:	2201      	movs	r2, #1
 800470c:	409a      	lsls	r2, r3
 800470e:	0013      	movs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	43d2      	mvns	r2, r2
 800471a:	401a      	ands	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	211f      	movs	r1, #31
 8004728:	400b      	ands	r3, r1
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4099      	lsls	r1, r3
 800472e:	000b      	movs	r3, r1
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	46bd      	mov	sp, r7
 800473a:	b006      	add	sp, #24
 800473c:	bd80      	pop	{r7, pc}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	40012c00 	.word	0x40012c00
 8004744:	40000400 	.word	0x40000400
 8004748:	40002000 	.word	0x40002000
 800474c:	40014400 	.word	0x40014400
 8004750:	40014800 	.word	0x40014800
 8004754:	00001ec9 	.word	0x00001ec9
 8004758:	08004b40 	.word	0x08004b40
 800475c:	00001eca 	.word	0x00001eca

08004760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a88      	ldr	r2, [pc, #544]	@ (8004990 <HAL_TIMEx_MasterConfigSynchronization+0x230>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d011      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2380      	movs	r3, #128	@ 0x80
 800477a:	05db      	lsls	r3, r3, #23
 800477c:	429a      	cmp	r2, r3
 800477e:	d00b      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a83      	ldr	r2, [pc, #524]	@ (8004994 <HAL_TIMEx_MasterConfigSynchronization+0x234>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d006      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 800478a:	23f7      	movs	r3, #247	@ 0xf7
 800478c:	00da      	lsls	r2, r3, #3
 800478e:	4b82      	ldr	r3, [pc, #520]	@ (8004998 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 8004790:	0011      	movs	r1, r2
 8004792:	0018      	movs	r0, r3
 8004794:	f7fb ff57 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d021      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d01d      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d019      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b30      	cmp	r3, #48	@ 0x30
 80047b6:	d015      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d011      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b50      	cmp	r3, #80	@ 0x50
 80047c6:	d00d      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b60      	cmp	r3, #96	@ 0x60
 80047ce:	d009      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b70      	cmp	r3, #112	@ 0x70
 80047d6:	d005      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047d8:	4a70      	ldr	r2, [pc, #448]	@ (800499c <HAL_TIMEx_MasterConfigSynchronization+0x23c>)
 80047da:	4b6f      	ldr	r3, [pc, #444]	@ (8004998 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 80047dc:	0011      	movs	r1, r2
 80047de:	0018      	movs	r0, r3
 80047e0:	f7fb ff31 	bl	8000646 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b80      	cmp	r3, #128	@ 0x80
 80047ea:	d009      	beq.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80047f4:	4a6a      	ldr	r2, [pc, #424]	@ (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x240>)
 80047f6:	4b68      	ldr	r3, [pc, #416]	@ (8004998 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 80047f8:	0011      	movs	r1, r2
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7fb ff23 	bl	8000646 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	223c      	movs	r2, #60	@ 0x3c
 8004804:	5c9b      	ldrb	r3, [r3, r2]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800480a:	2302      	movs	r3, #2
 800480c:	e0bc      	b.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0x228>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	223c      	movs	r2, #60	@ 0x3c
 8004812:	2101      	movs	r1, #1
 8004814:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	223d      	movs	r2, #61	@ 0x3d
 800481a:	2102      	movs	r1, #2
 800481c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a57      	ldr	r2, [pc, #348]	@ (8004990 <HAL_TIMEx_MasterConfigSynchronization+0x230>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d000      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0xda>
 8004838:	e073      	b.n	8004922 <HAL_TIMEx_MasterConfigSynchronization+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d100      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004842:	e065      	b.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	2380      	movs	r3, #128	@ 0x80
 800484a:	035b      	lsls	r3, r3, #13
 800484c:	429a      	cmp	r2, r3
 800484e:	d05f      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	2380      	movs	r3, #128	@ 0x80
 8004856:	039b      	lsls	r3, r3, #14
 8004858:	429a      	cmp	r2, r3
 800485a:	d059      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	23c0      	movs	r3, #192	@ 0xc0
 8004862:	039b      	lsls	r3, r3, #14
 8004864:	429a      	cmp	r2, r3
 8004866:	d053      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	03db      	lsls	r3, r3, #15
 8004870:	429a      	cmp	r2, r3
 8004872:	d04d      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	23a0      	movs	r3, #160	@ 0xa0
 800487a:	03db      	lsls	r3, r3, #15
 800487c:	429a      	cmp	r2, r3
 800487e:	d047      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	23c0      	movs	r3, #192	@ 0xc0
 8004886:	03db      	lsls	r3, r3, #15
 8004888:	429a      	cmp	r2, r3
 800488a:	d041      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	23c0      	movs	r3, #192	@ 0xc0
 8004892:	03db      	lsls	r3, r3, #15
 8004894:	429a      	cmp	r2, r3
 8004896:	d03b      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	23e0      	movs	r3, #224	@ 0xe0
 800489e:	03db      	lsls	r3, r3, #15
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d035      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	2380      	movs	r3, #128	@ 0x80
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d02f      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	2390      	movs	r3, #144	@ 0x90
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d029      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	23a0      	movs	r3, #160	@ 0xa0
 80048c2:	041b      	lsls	r3, r3, #16
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d023      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	23b0      	movs	r3, #176	@ 0xb0
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d01d      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	23c0      	movs	r3, #192	@ 0xc0
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	429a      	cmp	r2, r3
 80048de:	d017      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	23d0      	movs	r3, #208	@ 0xd0
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d011      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	23e0      	movs	r3, #224	@ 0xe0
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d00b      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	23f0      	movs	r3, #240	@ 0xf0
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	429a      	cmp	r2, r3
 8004902:	d005      	beq.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>
 8004904:	4a27      	ldr	r2, [pc, #156]	@ (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x244>)
 8004906:	4b24      	ldr	r3, [pc, #144]	@ (8004998 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 8004908:	0011      	movs	r1, r2
 800490a:	0018      	movs	r0, r3
 800490c:	f7fb fe9b 	bl	8000646 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a25      	ldr	r2, [pc, #148]	@ (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2270      	movs	r2, #112	@ 0x70
 8004926:	4393      	bics	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a13      	ldr	r2, [pc, #76]	@ (8004990 <HAL_TIMEx_MasterConfigSynchronization+0x230>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00a      	beq.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	2380      	movs	r3, #128	@ 0x80
 800494c:	05db      	lsls	r3, r3, #23
 800494e:	429a      	cmp	r2, r3
 8004950:	d004      	beq.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a0f      	ldr	r2, [pc, #60]	@ (8004994 <HAL_TIMEx_MasterConfigSynchronization+0x234>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d10c      	bne.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x216>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2280      	movs	r2, #128	@ 0x80
 8004960:	4393      	bics	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	4313      	orrs	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	223d      	movs	r2, #61	@ 0x3d
 800497a:	2101      	movs	r1, #1
 800497c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	223c      	movs	r2, #60	@ 0x3c
 8004982:	2100      	movs	r1, #0
 8004984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	0018      	movs	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	b004      	add	sp, #16
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40000400 	.word	0x40000400
 8004998:	08004b78 	.word	0x08004b78
 800499c:	000007b9 	.word	0x000007b9
 80049a0:	000007ba 	.word	0x000007ba
 80049a4:	000007cc 	.word	0x000007cc
 80049a8:	ff0fffff 	.word	0xff0fffff

080049ac <memset>:
 80049ac:	0003      	movs	r3, r0
 80049ae:	1882      	adds	r2, r0, r2
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d100      	bne.n	80049b6 <memset+0xa>
 80049b4:	4770      	bx	lr
 80049b6:	7019      	strb	r1, [r3, #0]
 80049b8:	3301      	adds	r3, #1
 80049ba:	e7f9      	b.n	80049b0 <memset+0x4>

080049bc <__libc_init_array>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	2600      	movs	r6, #0
 80049c0:	4c0c      	ldr	r4, [pc, #48]	@ (80049f4 <__libc_init_array+0x38>)
 80049c2:	4d0d      	ldr	r5, [pc, #52]	@ (80049f8 <__libc_init_array+0x3c>)
 80049c4:	1b64      	subs	r4, r4, r5
 80049c6:	10a4      	asrs	r4, r4, #2
 80049c8:	42a6      	cmp	r6, r4
 80049ca:	d109      	bne.n	80049e0 <__libc_init_array+0x24>
 80049cc:	2600      	movs	r6, #0
 80049ce:	f000 f819 	bl	8004a04 <_init>
 80049d2:	4c0a      	ldr	r4, [pc, #40]	@ (80049fc <__libc_init_array+0x40>)
 80049d4:	4d0a      	ldr	r5, [pc, #40]	@ (8004a00 <__libc_init_array+0x44>)
 80049d6:	1b64      	subs	r4, r4, r5
 80049d8:	10a4      	asrs	r4, r4, #2
 80049da:	42a6      	cmp	r6, r4
 80049dc:	d105      	bne.n	80049ea <__libc_init_array+0x2e>
 80049de:	bd70      	pop	{r4, r5, r6, pc}
 80049e0:	00b3      	lsls	r3, r6, #2
 80049e2:	58eb      	ldr	r3, [r5, r3]
 80049e4:	4798      	blx	r3
 80049e6:	3601      	adds	r6, #1
 80049e8:	e7ee      	b.n	80049c8 <__libc_init_array+0xc>
 80049ea:	00b3      	lsls	r3, r6, #2
 80049ec:	58eb      	ldr	r3, [r5, r3]
 80049ee:	4798      	blx	r3
 80049f0:	3601      	adds	r6, #1
 80049f2:	e7f2      	b.n	80049da <__libc_init_array+0x1e>
 80049f4:	08004c5c 	.word	0x08004c5c
 80049f8:	08004c5c 	.word	0x08004c5c
 80049fc:	08004c60 	.word	0x08004c60
 8004a00:	08004c5c 	.word	0x08004c5c

08004a04 <_init>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	46c0      	nop			@ (mov r8, r8)
 8004a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0a:	bc08      	pop	{r3}
 8004a0c:	469e      	mov	lr, r3
 8004a0e:	4770      	bx	lr

08004a10 <_fini>:
 8004a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a16:	bc08      	pop	{r3}
 8004a18:	469e      	mov	lr, r3
 8004a1a:	4770      	bx	lr
